{"contributor-docs":{"🌸 Welcome! 🌺\n":{"relativeUrl":"/contribute/README","description":"\n\nThanks for your interest in contributing to p5.js! Our community values contributions of all forms and seeks to expand the meaning of the word \"contributor\" as far and wide as possible. It includes documentation, teaching, writing code, making art, writing, design, activism, organizing, curating, or anything else you might imagine. [Our community page](https://p5js.org/community/#contribute) gives an overview of some different ways to get involved and contribute.\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specification. We use the @all-contributors bot to handle adding people to the README.md file. You can ask @all-contributors bot to add you in an issue or PR comment like so:\n\n```\n@all-contributors please add @[your GitHub handle] for [your contribution type]\n```\n\nYou can find relevant contribution type [here](https://allcontributors.org/docs/en/emoji-key). Although we will usually automatically add you to the contributor list using the bot after merging your PR. The contributor docs are published on p5.js [website](https://p5js.org/contributor-docs/#/), and hosted on p5.js [GitHub repository](https://github.com/processing/p5.js/tree/main/contributor_docs).\n\n# Before Contributing\n\nContributing to p5.js should be a stress free experience and we welcome contributions of all levels, whether you are just fixing a small typo in the documentation or refactoring complex 3D rendering functionalities. However there are just a few things you should be familiar with before starting your contribution.\n\nFirst, please have a read through our [community statement](https://p5js.org/community/).\n\nNext, we are currently prioritizing work that expands access (inclusion and accessibility) to p5.js! See [our access statement](./access/) for more details.\n\n# Get Started\n\nNow you are ready to start contributing to p5.js! There are many ways to get started with contributing to p5.js and many reasons to do so. For the purpose of this documentation, we will split contributions roughly into two categories.\n\n* Contributions that directly deals with the source code (including documentation)\n* Contributions that directly deals with the source code very little or not at all\n\nDepending on what kind of contribution you are making to p5.js, please read on to the relevant section of this documentation.\n\n## [Source code contribution](./contributor_guidelines/)\n\nFor a typical contribution to the p5.js or p5.js-website repository, we will follow the following steps:\n\n1. Open an issue\n2. Discuss\n3. Approved for opening a Pull Request (PR)\n4. Make code changes\n5. Open a PR\n6. Discuss\n7. Approved and merged\n\nHead over to [this link](./contributor_guidelines/) where you will be guided one step at a time on how to navigate the steps above, or you can also use the table of contents on the same page to skip to a relevant part you need a refresher on.\n\nMost of the time we will stick with this workflow quite strictly and, especially if you have contributed to other projects before, it may feel like there are too many hoops to jump through for what may be a simple contribution. However, the steps above are aimed to make it easy for you as a contributor and for stewards/maintainers to contribute meaningfully, while also making sure that you won't be spending time working on things that may not be accepted for various reasons. The steps above will help ensure that any proposals or fixes are adequately discussed and considered before any work begin, and often this will actually save you (and the steward/maintainer) time because the PR that would need additional fixing after review, or outright not accepted, would happen less often as a result.\n\n**We see contributing to p5.js as a learning opportunity** and we don't measure sucess by only looking at the volume of contributions we received. There is no time limit on how long it takes you to complete a contribution, so take your time and work at your own pace (we may check in after a long period of inactivity). Ask for help from any of the stewards or maintainers if you need them and we'll try our best to support you.\n\n## Non-source code contribution\n\nThere are many more ways to contribute to p5.js through non-source code contribution than can be exhaustively listed here, some of the ways may also involve working with some of the p5.js repositories (such as adding examples, writing tutorials for the website, etc.). Depending on what the planned contribution is, we may be able to support you in different ways so do reach out to us via any channel available to you (email, social media, [Discourse forum](https://discourse.processing.org/c/p5js/10), Discord, etc).\n\n## [Stewards and maintainers](./steward_guidelines/)\n\nFor information related to area stewards or general maintenance of p5.js GitHub repository, please check out the [steward guidelines](./steward_guidelines/).\n"},"Our Focus on Access\n":{"relativeUrl":"/contribute/access","description":"{/* What our commitment to access means for contributors and users of the library. */}\n\n\n\nAt the [2019 Contributors Conference](https://p5js.org/community/contributors-conference-2019.html), p5.js made the commitment to only add new features that increase access (inclusion and accessibility). We will not accept feature requests that don't support these efforts. We commit to the work of acknowledging, dismantling, and preventing barriers. This means considering intersecting[^1] experiences of diversity that can impact access and participation. These include alignments of gender, race, ethnicity, sexuality, language, location, et cetera. We center the needs of marginalized groups over the continued comfort of those privileged within the p5.js community. We are collectively exploring the meaning of access. We are learning how to practice and teach access. We choose to think of access through expansive, intersectional, and coalitionary frameworks. This commitment is part of the core values of p5.js outlined in our [Community Statement](https://p5js.org/about/#community-statement).\n\n## Kinds of access\n\nIncreasing access is not focused on expanding the raw number of people in the p5.js community. It is a continued commitment to making p5.js available to and approachable for people who have been excluded from the p5.js community as a consequence of structural oppression. This commitment extends to the tools and platforms p5.js offers. It also includes the makeup, decision-making, and actions of p5.js leadership. We resist a technological culture of speed, growth, and competition. We prioritize intentionality, slowness, accommodation, and accountability as acts of collective care.\n\nAccess here means making p5.js equitable for:\n\n* People who speak languages other than English\n* Black, Indigenous, People of Color, and people of marginalized ethnicities\n* Lesbian, gay, bisexual, queer, questioning, pansexual, and asexual people\n* Trans, genderfluid, agender, intersex, and two-spirit people, women, and others with marginalized genders\n* People who are blind, d/Deaf[^2] or hard of hearing, disabled/have a disability, neurodivergent, and chronically ill[^3]\n* People who have lower income, or lack access to financial or cultural capital\n* People with little or no prior experience in open source and creative coding\n* People from diverse educational backgrounds\n* People across all age groups, including children and elders\n* People with a variety of technological skill, tools, and internet access\n* People from diverse religious backgrounds\n* Other people who are systematically excluded and historically underrepresented\n* And all intersections thereof\n\nWe recognize the complexity of the terms used to describe our respective identities. Language is nuanced, evolving, and contested. This is not an exhaustive list. We provide an attempt to name and be accountable to our commitments and to the diverse needs of the p5.js community.\n\n### Examples\n\nThese are examples of efforts we believe increase access:\n\n* Translating documentation and other materials into more languages, decentering linguistic imperialism[^4] (e.g., Rolando Vargas’ [Processing in Kuna Language](https://medium.com/@ProcessingOrg/culture-as-translation-processing-in-kuna-language-with-rolando-vargas-and-edinson-izquierdo-8079f14851f7), Felipe Santos Gomes, Julia Brasil, Katherine Finn Zander, and Marcela Mancino’s [Pê Cinco: Internationalization and Popularization for Portuguese Speakers](https://medium.com/processing-foundation/translating-p5-js-into-portuguese-for-the-brazilian-community-14b969e77ab1))\n* Improving our support for assistive technologies, such as screen readers (e.g., Katie Liu’s [Adding Alt Text in p5.js](https://medium.com/processing-foundation/adding-alt-text-e2c7684e44f8), Claire Kearney-Volpe’s [P5 Accessibility Project](https://medium.com/processing-foundation/p5-accessibility-115d84535fa8))\n* Following [Web Content Accessibility Guidelines](https://www.w3.org/TR/WCAG21/) in our tools and working towards making it easier for users to follow them in their projects\n* Making p5.js error messages more helpful and supportive to people using the tool (e.g., the [p5.js Friendly Error System (FES)](https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system/))\n* Mentoring and supporting learners of p5.js within communities that are historically excluded from and marginalized in creative coding and the digital arts\n* Hosting community events (e.g., [p5.js Access Day 2022](https://p5js.org/community/p5js-access-day-2022.html), [The Web We Want: p5.js x W3C TPAC 2020)](https://medium.com/processing-foundation/p5-js-x-w3c-tpac-bee4c621a053) with access-centered organizing tactics (e.g., ASL interpretation, live captioning, accessible venues)\n* Supporting the creation of educational resources (e.g., Adekemi Sijuwade-Ukadike’s [A11y Syllabus](http://a11ysyllabus.site/))\n* Publishing documentation and reports of our work that follow WCAG guidelines, use plain language, and focus on beginners from diverse experiences (e.g., [OSACC p5.js Access Report](https://github.com/processing/OSACC-p5.js-Access-Report))\n\n## Maintenance\n\nWe are not accepting feature requests that do not support our effort to increase access. You'll see this criteria reflected in our issue and pull request templates. We also affirm our intention to maintain the existing feature set of p5.js. We'd like to fix bugs regardless of which area of the codebase they're in. We believe consistency of the tool makes it more accessible for beginners. Examples of feature requests that improve accessibility include:\nPerformance increases for people using less powerful hardware (e.g., Support for drawing to/reading from framebuffers)\nConsistency in the API (e.g, Add arcVertex() for creating arcs with beginShape()/endShape())\n\n***\n\nPlease consider this a ‘living document.' We will continue the conversation about what it means to prioritize access. We invite our community to engage with this document and the values it describes. If you have ideas or suggestions, we invite you to share them as an issue on Github or by emailing [hello@p5js.org](mailto:hello@p5js.org).\n\nThis version of the p5.js Access Statement was revised in collaboration with Evelyn Masso, Nat Decker, Bobby Joe Smith III, Sammie Veeler, Sonia (Suhyun) Choi, Xin Xin, Kate Hollenbach, Lauren Lee McCarthy, Caroline Sinders, Qianqian Ye, Tristan Jovani Magno Espinoza, Tanvi Sharma, Tsige Tafesse, and Sarah Ciston at the 2023 Open Source Arts Contributors Conference. It was finalized and published by Bobby Joe Smith III and Nat Decker through the support of the Processing Foundation Fellowship.\n\n[^1]: Crenshaw, Kimberlé (1989). \"Demarginalizing the intersection of race and sex: a black feminist critique of antidiscrimination doctrine, feminist theory and antiracist politics\". University of Chicago Legal Forum. 1989 (1): 139–167. ISSN 0892-5593. Full text at Archive.org.\n\n[^2]: Capital ‘D’ Deaf refers to people who are culturally Deaf or part of the Deaf community while lower case ‘d’ deaf is an audiological term that can describe people not associated with Deaf identity.\n\n[^3]: There are differing preferences between ‘person-first’ vs. ‘identity-first’ language within the disability community. Read [Unpacking the debate over person-first vs. identity-first language in the autism community](https://news.northeastern.edu/2018/07/12/unpacking-the-debate-over-person-first-vs-identity-first-language-in-the-autism-community/) and [I am Disabled: On Identity-First Versus People-First Language](https://thebodyisnotanapology.com/magazine/i-am-disabled-on-identity-first-versus-people-first-language/).\n\n[^4]: Linguistic Imperialism, or Language Imperialism, refers to the ongoing domination/prioritization/imposition of certain languages such as English at the expense of native languages due to imperial expansion and globalization.\n"},"Contributing to the p5.js Reference\n":{"relativeUrl":"/contribute/contributing_to_the_p5.js_reference","description":"{/* Write and edit p5.js reference using the right format. */}\n\n\n\nIn p5.js, we author the code reference you see on the [reference](https://p5js.org/reference/) page on the p5.js website by including them alongside the library’s source code as specialized comments. These reference comments include the description, the function’s signature (its parameters and return value), and usage examples. In other words, the content on each p5.js function/variable’s reference page is built from the reference comments in the source code.\n\nThis document will show you how to write and format the reference comments so that they can eventually be rendered onto the website correctly. You should follow this guide whenever you are editing or writing a reference for any p5.js function or variable.\n\n## A quick introduction to how reference comments work\n\nWhen you look at the source code of p5.js, you will see many lines in the library being reference comments; they look like this:\n\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n *\n * @method sin\n * @param  {Number} angle the angle.\n * @return {Number} sine of the angle.\n *\n * @example\n * <div>\n * <code>\n * function draw() {\n *   background(200);\n *\n *   let t = frameCount;\n *   let x = 50;\n *   let y = 30 * sin(t * 0.05) + 50;\n *   line(x, 50, x, y);\n *   circle(x, y, 20);\n *\n *   describe('A white ball on a string oscillates up and down.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let x = frameCount;\n *   let y = 30 * sin(x * 0.1) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form a wave pattern.');\n * }\n * </code>\n * </div>\n *\n * <div>\n * <code>\n * function draw() {\n *   let t = frameCount;\n *   let x = 30 * cos(t * 0.1) + 50;\n *   let y = 10 * sin(t * 0.2) + 50;\n *   point(x, y);\n *\n *   describe('A series of black dots form an infinity symbol.');\n * }\n * </code>\n * </div>\n */\n```\n\nThey are usually followed by the actual JavaScript code that defines the function. Reference comments always start with `/**` and end with `*/`, with each line in between the two starting with `*`.\n\nAnything in a block in this manner will be interpreted as reference documentation. You may be familiar with this style of code comments through [JSDoc](https://jsdoc.app/). While p5.js does not use JSDoc, it uses a very similar tool called [YUIDoc](https://yui.github.io/yuidoc/), which has a very similar reference syntax. In this style of reference comments, each comment block is further divided into individual elements, which we will have a look at next.\n\n## Reference comments block\n\nLet’s break down the reference comments block above for the `sin()` function and see what each section does. You can compare what you see in the comments here and what you can see on the reference page for [`sin()`](https://p5js.org/reference/#/p5/sin).\n\n```\n/**\n * Calculates the sine of an angle. `sin()` is useful for many geometric tasks\n * in creative coding. The values returned oscillate between -1 and 1 as the\n * input angle increases. `sin()` takes into account the current\n * <a href=\"#/p5/angleMode\">angleMode</a>.\n```\n\nAt the very top of the comment is the text description of the function. This description can contain both markdown syntax and HTML. The description should be concise and describe what the function does and, if necessary, some details about its quirks or behaviors.\n\n```\n * @method sin\n * @param  {Number} angle  the angle.\n * @return {Number} sine of the angle.\n```\n\nA function will typically have the three sections above, each starting with an `@` symbol followed by one of the following keywords:\n\n* `@method` is used to define the name of the function, in this case `sin` (note that the function name does not include the brackets `()`).\n* `@param` is used to define the parameters or arguments that the function accepts.\n  * Following the keyword `@param`, stored in curly brackets `{}` is the type of the parameter.\n  * After the type, the next word (angle) is the name of the parameter.\n  * After the name, the rest of the line is the description of the parameter.\n* `@return` is used to define the return value of the function.\n  * Following the keyword `@return`, stored in curly brackets `{}` is the type of the return value.\n  * After the type, the rest of the line is the description of the return value.\n\nMore generically for parameters, you should follow this format:\n\n```\n@param {type} name Description here.\n```\n\nIf the parameter is optional, add square brackets around the name:\n\n```\n@param {type} [name] Description here.\n```\n\n### Additional info: Constants\n\nIf the parameter takes one or more values defined in [`constants.js`](https://github.com/processing/p5.js/blob/main/src/core/constants.js) , then the type should be specified as `{Constant}` and the valid values should be enumerated in the comment following the `either` keyword, e.g.:\n\n```\n@param {Constant} horizAlign horizontal alignment, either LEFT, CENTER, or RIGHT\n```\n\nFor return types you should follow this format:\n\n```\n@return {type} Description of the data returned.\n```\n\nIf the function does not return a value, the `@return` tag can be left out.\n\n### Additional info: Chaining\n\nIf the method returns the parent object, you can skip the `@return` tag and add this line instead:\n\n```\n@chainable\n```\n\n## Additional signatures\n\nIf a function has multiple possible parameter options, you can specify each individually. For example, the [`background()`](http://p5js.org/reference/#p5/background) function takes a number of different parameter options (see \"Syntax\" section on the reference page). Choose one version to list as the first signature using the template above. At the end of the first reference comment block, you can add additional signatures, each in its own block, using only the `@method` and `@param` tags following the example below.\n\n```\n/**\n * @method background\n * @param {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @param {Number} [a] alpha value\n */\n\n/**\n * @method background\n * @param {Number} gray specifies a value between white and black\n * @param {Number} [a]\n */\n```\n\n### Additional info: Multiple signatures\n\nIt is not necessary to create a separate signature if the only difference between two signatures is the addition of an optional parameter. Limit the use of this feature if possible because it can create unnecessary noise in the reference.\n\n## Reference for p5.js variables\n\nSo far, we have looked at how to write references for functions and constants. Variables follow the same structure but use different tags.\n\n```\n/**\n * The system variable mouseX always contains the current horizontal\n * position of the mouse, relative to (0, 0) of the canvas. The value at\n * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n * If touch is used instead of mouse input, mouseX will hold the x value\n * of the most recent touch point.\n *\n * @property {Number} mouseX\n * @readOnly\n *\n * @example\n * <div>\n * <code>\n * // Move the mouse across the canvas\n * function draw() {\n *   background(244, 248, 252);\n *   line(mouseX, 0, mouseX, 100);\n *   describe('horizontal black line moves left and right with mouse x-position');\n * }\n * </code>\n * </div>\n */\n```\n\nThe start of the block contains the description of the variable (`mouseX` in this case). To define the name of the variable, we use `@property` instead of `@method`. `@property` follows the same syntax as `@param` for defining the type and its name. The `@readonly` tag is present on most p5.js variables and is used internally to indicate this value should not be overwritten directly by a library user.\n\n## Adding examples\n\nOne tag that is present in both `sin()` and `mouseX`’s reference comments that we have not talked about yet is the `@example` tag. This tag is where you define the code example(s) that is run when you visit the reference page.\n\n![Screenshot of the p5.js reference page of the \"red()\" function, showing only the example code section.](src/content/contributor-docs/images/reference-screenshot.png)\n\nThe relevant `@example` tag to create the above is as follows:\n\n```\n * @example\n * <div>\n * <code>\n * const c = color(255, 204, 0);\n * fill(c);\n * rect(15, 20, 35, 60);\n * // Sets 'redValue' to 255.\n * const redValue = red(c);\n * fill(redValue, 0, 0);\n * rect(50, 20, 35, 60);\n * describe(\n *   'Two rectangles with black edges. The rectangle on the left is yellow and the one on the right is red.'\n * );\n * </code>\n * </div>\n```\n\nAfter the `@example` tag, you should start an HTML `<div>` tag followed by a `<code>` tag. In between the opening and closing `<code>`  tag, you will insert the relevant example code. The basic principle of writing good example code for the reference is to keep things simple and minimal. The example should be meaningful and explain how the feature works without being too complicated. The example’s canvas should be 100x100 pixels and if the `setup()` function is not included, such as in the example above, the code will be automatically wrapped in a `setup()` function with a default 100x100 pixels gray background canvas created. We won’t go through the details about best practices and code style for the example code here; please see the reference style guide instead.\n\nYou can have multiple examples for one feature.To do so, add an additional `<div>` and `<code>` HTML block right after the first closed, separated by a blank line.\n\n```\n* @example\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('An ellipse created using an arc with its top right open.');\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* arc(50, 50, 80, 80, 0, PI, OPEN);\n* describe('The bottom half of an ellipse created using arc.');\n* </code>\n* </div>\n```\n\nIf you do not want the reference page to execute your example code (i.e., you just want the code to show up), include the class “`norender`” in the `<div>`:\n\n```\n* @example\n* <div class=\"norender\">\n* <code>\n* arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n* describe('ellipse created using arc with its top right open');\n* </code>\n* </div>\n```\n\nIf you do not want the example to be run as part of the automated tests (for example, if the example requires user interaction), include the class “`notest`” in the `<div>`:\n\n```\n* @example\n* <div class='norender notest'><code>\n* function setup() {\n*   let c = createCanvas(100, 100);\n*   saveCanvas(c, 'myCanvas', 'jpg');\n* }\n* </code></div>\n```\n\nIf your example uses external asset files, put them in the [/docs/yuidoc-p5-theme/assets](https://github.com/processing/p5.js/tree/main/docs/yuidoc-p5-theme/assets) folder (or reuse one already in there) then link to them with \"assets/filename.ext\" in the code. See the [tint()](http://p5js.org/reference/#/p5/tint) reference for example.\n\n### Add a canvas description using `describe()`\n\nFinally, for every example you add, you are required to use the p5.js function `describe()` in the example to create a screen-reader accessible description for the canvas. Include only one parameter: a string with a brief description of what is happening on the canvas.\n\n```\n* @example\n* <div>\n* <code>\n* let xoff = 0.0;\n* function draw() {\n*   background(204);\n*   xoff = xoff + 0.01;\n*   let n = noise(xoff) * width;\n*   line(n, 0, n, height);\n*   describe('A vertical line moves randomly from left to right.');\n* }\n* </code>\n* </div>\n*\n* <div>\n* <code>\n* let noiseScale = 0.02;\n* function draw() {\n*   background(0);\n*   for (let x = 0; x < width; x += 1) {\n*     let noiseVal = noise((mouseX + x) * noiseScale, mouseY * noiseScale);\n*     stroke(noiseVal*255);\n*     line(x, mouseY + noiseVal * 80, x, height);\n*   }\n*   describe('A horizontal wave pattern moves in the opposite direction of the mouse.');\n* }\n* </code>\n* </div>\n```\n\nFor more on `describe()` visit the [web accessibility contributor documentation](https://p5js.org/contributor-docs/#/web_accessibility?id=user-generated-accessible-canvas-descriptions).\n\nWith all the above you should have most of the tools needed to write and edit p5.js reference comments. However, there are a few more specialized usage of JSDoc style reference comments that you may come across in p5.js. These are situationally useful and not something that you need often.\n\n### `@private` tag\n\nYou can use the `@private` if a property or variable is a private function or variable. If a feature is marked as `@private` it will not be included as part of the rendered reference on the website. The reason to use the `@private` tag to mark a reference comments block as private is when you document internal features for the library itself. For example, see the reference comments for `_start` below:\n\n```\n/**\n * _start calls preload() setup() and draw()\n *\n * @method _start\n * @private\n */\np5.prototype._start = function () {\n```\n\n### `@module` and related tags\n\nAt the top of each source code file will be a `@module` tag. Modules correspond to a group of features in p5.js which on the rendered reference page on the website are split into the corresponding sections. Inside each module, there are additional submodules defined with the `@submodule` tag.\n\nThe `@for` tag defines the relationship between this module and the overall `p5` class, effectively saying this module is a part of the `p5` class.\n\nThe `@requires` tag defines the required imported modules that the current module depends on.\n\n```\n/**\n * @module Color\n * @submodule Creating & Reading\n * @for p5\n * @requires core\n * @requires constants\n */\n```\n\nThe convention p5.js follows is that each subfolder in the `src/` folder will be one `@module` while each file inside the subfolder will be its own `@submodule` under the overall subfolder’s `@module`. Unless you are adding new subfolders/files to the p5.js source code, you shouldn’t need to edit this reference comments block.\n\n### `@class` tag\n\nClass constructors are defined with the `@class` tag and the `@constructor` tag. The format for this block is similar to how a function is defined with the `@method` block, the class’s name will need to be defined with the `@class` tag and the `@constructor` tag will indicate the class has a constructor function. See the example below for the `p5.Color` class:\n\n```\n/**\n * A class to describe a color. Each `p5.Color` object stores the color mode\n * and level maxes that were active during its construction. These values are\n * used to interpret the arguments passed to the object's constructor. They\n * also determine output formatting such as when\n * <a href=\"#/p5/saturation\">saturation()</a> is called.\n *\n * Color is stored internally as an array of ideal RGBA values in floating\n * point form, normalized from 0 to 1. These values are used to calculate the\n * closest screen colors, which are RGBA levels from 0 to 255. Screen colors\n * are sent to the renderer.\n *\n * When different color representations are calculated, the results are cached\n * for performance. These values are normalized, floating-point numbers.\n *\n * <a href=\"#/p5/color\">color()</a> is the recommended way to create an instance\n * of this class.\n *\n * @class p5.Color\n * @constructor\n * @param {p5} [pInst]                  pointer to p5 instance.\n *\n * @param {Number[]|String} vals        an array containing the color values\n *                                      for red, green, blue and alpha channel\n *                                      or CSS color.\n */\n```\n\n## Generating and previewing the reference\n\nThe p5.js repository is set up so that you can generate and preview the reference without needing to build and run the p5.js website as well.\n\n* The main command to generate the reference from the reference comments in the source code is to run the following command.\n\n```\nnpm run docs\n```\n\nThis will generate the necessary preview files and the main `docs/reference/data.json` file, which is the same file (after minification) that will be used to render the reference page on the website.\n\n* For continuous work on the reference, you can run the following command.\n\n```\nnpm run docs:dev\n```\n\nThis will launch a live preview of the rendered reference that will update each time you make changes (you will need to refresh the page after making changes to see them appear). This is useful, especially for previewing example code running in the browser.\n\n* The main template files are stored in the `docs/` folder and, in most cases, you should not make changes directly to files in this folder, except to add new asset files in the `docs/yuidoc-p5-theme/assets` folder.\n\n## Next steps\n\nFor additional details about the reference system, you can checkout the documentation for [JSDoc](https://jsdoc.app/) and [YUIDoc](https://yui.github.io/yuidoc/).\n\nFor examples of issues related to the reference, have a look at [#6519](https://github.com/processing/p5.js/issues/6519) and [#6045](https://github.com/processing/p5.js/issues/6045). The [contributor guidelines](https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines/) document is also a good place to start.\n"},"Contributor Guidelines\n":{"relativeUrl":"/contribute/contributor_guidelines","description":"{/* Essential information about contributing to p5.js on GitHub. */}\n\n\n\nWelcome to the contributor guidelines! This document is for new contributors looking to contribute code to p5.js, contributors looking to refresh their memories on some technical steps, or just about anything else to do with code contributions to p5.js.\n\nIf you are looking to contribute outside of the p5.js repositories (writing tutorials, planning classes, organizing events), please have a look at the other relevant pages instead. Stewards or maintainers may find the [steward guidelines](https://github.com/processing/p5.js/blob/main/contributor_docs/steward_guidelines/) more helpful regarding reviewing issues and pull requests.\n\nThis is a relatively long and comprehensive document but we will try to signpost all steps and points as clearly as possible. Do utilize the table of contents to find sections relevant to you. Feel free to skip sections if they are not relevant to your planned contributions.\n\n**If you are a new contributor, you may want to start with the first section, “All about issues.” If you just want a step-by-step setup of the development process, you can look at the “Quick Get Started For Developers” section.**\n\n# Table of Contents\n\n* [All about issues](#all-about-issues)\n  * [What are issues?](#what-are-issues)\n  * [Issue templates](#issue-templates)\n    * [Found a bug](#found-a-bug)\n    * [Existing Feature Enhancement](#existing-feature-enhancement)\n    * [New Feature Request](#new-feature-request)\n    * [Discussion](#discussion)\n* [Working on p5.js codebase](#working-on-the-p5js-codebase)\n  * [Quick Get Started For Developers](#quick-get-started-for-developers)\n  * [Using the Github edit functionality](#using-the-github-edit-functionality)\n  * [Forking p5.js and working from your fork](#forking-p5js-and-working-from-your-fork)\n    * [Using Github Desktop](#using-github-desktop)\n    * [Using the git command line interface](#using-the-git-command-line-interface)\n  * [Codebase breakdown](#codebase-breakdown)\n  * [Build setup](#build-setup)\n  * [Git workflow](#git-workflow)\n    * [Source code](#source-code)\n    * [Unit tests](#unit-tests)\n    * [Inline documentation](#inline-documentation)\n    * [Internationalization](https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#internationalization)\n    * [Accessibility](#accessibility)\n  * [Code standard](#code-standard)\n  * [Software Design principles](#software-design-principles)\n* [Pull requests](#pull-requests)\n  * [Creating a pull request](#creating-a-pull-request)\n    * [Pull request information](#pull-request-information)\n    * [Title](#title)\n    * [Resolves](#resolves)\n    * [Changes](#changes)\n    * [Screenshots of the change](#screenshots-of-the-change)\n    * [PR Checklist](#pr-checklist)\n    * [Rebase and resolve conflicts](#rebase-and-resolve-conflicts)\n  * [Discuss and amend](#discuss-and-amend)\n\n***\n\n# All about issues\n\nThe majority of the activity on p5.js' GitHub repositories (repo for short) happens in issues, which is a great place to start your contribution journey.\n\n## What are issues?\n\n![A cropped screenshot of the p5.js library GitHub repository, only showing contents of the top right corner. A red box is drawn on top of the screenshot surrounding the Issues tab.](src/content/contributor-docs/images/issues-tab.png)\n\n“Issue” is the generic name for a post on GitHub that aims to describe, well, an issue. This issue can be a bug report, a request to add a new feature, a discussion, or anything that works as a post related to p5.js library development. Comments can be added below each issue by anyone with a GitHub account, including bots! It is the place where contributors discuss topics related to the development of the project in the repo.\n\nWhile an issue can be opened for a wide variety of reasons, we usually only use issues to discuss the development of p5.js source code. Topics such as debugging your own code, inviting collaborators to your project, or other unrelated topics should be discussed\n\neither on the [forum](https://discourse.processing.com) or on other platforms such as [Discord](https://discord.gg/SHQ8dH25r9).\n\nWe have created easy-to-use issue templates to aid you in deciding whether a topic should be a GitHub issue or posted elsewhere!\n\n## Issue templates\n\np5.js's issue templates make it easier for stewards and maintainers to understand and review issues. They also make it easier for you to file the relevant issue and receive a reply faster. \n\n![Screenshot of an example of what an issue looks like on GitHub. The title of the issue in the screenshot is \"Warning being logged in Safari when using a filter shader in 2D mode #6597\"](src/content/contributor-docs/images/github-issue.png)\n\nTo file a new issue, simply go to the \"Issues\" tab on the p5.js repo and click on the \"New issue\" button on the right side. You will be presented with several different options, each of which either corresponds to a relevant issue template or redirects you to the relevant place to file your question. We recommend choosing the most relevant option out of those presented to ensure your issue receives the right attention promptly.\n\n![Cropped screenshot of the GitHub repository's issue page with the green \"New issue\" button highlighted with a red box surrounding it.](src/content/contributor-docs/images/new-issue.png)\n\n### [\"Found a bug\"](https://github.com/processing/p5.js/issues/new?assignees=\\&labels=Bug\\&projects=\\&template=found-a-bug.yml)\n\nWhen you encounter possible incorrect behavior in p5.js or something not behaving as described in the documentation, use [this template](https://github.com/processing/p5.js/issues/new?assignees=\\&labels=Bug\\&projects=\\&template=found-a-bug.yml). Please note that if you are trying to debug your sketch and you think it may be a problem with your code, you should first ask on the [Discourse forum](https://discourse.processing.org) instead.\n\nThere are a few fields for you to fill in for this template:\n\n1. *Most appropriate sub-area of p5.js?* - This helps us identify and respond to your issue by automatically tagging the issue with the relevant [labels](https://github.com/processing/p5.js/blob/main/contributor_docs/issue_labels/).\n2. *p5.js version* - You can find the p5.js version number in either the `<script>` tag link or on the very first line of the p5.js/p5.min.js file. It will look something similar to `1.4.2` (three numbers separated by periods).\n3. *Web browser and version* - This helps us isolate different behaviors between browsers. To find the browser version number, follow the instructions in the table below for the browser you are using.\n\n<table>\n  <tr>\n    <td>\n      Chrome\n    </td>\n\n    <td>\n      Firefox\n    </td>\n\n    <td>\n      Safari\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      In the address bar, navigate to `chrome://version`\n    </td>\n\n    <td>\n      In the address bar, navigate to  `about:support`\n    </td>\n\n    <td>\n      Under the top bar “Safari” menu item, choose “About Safari”\n    </td>\n  </tr>\n</table>\n\n4. *Operating System* - You should include the OS version number if possible, e.g., `macOS 12.5`. Some bugs can stem from OS behaviors.\n5. *Steps to reproduce this* - This is arguably the most important information to share. You should list out detailed steps for replicating the bug you are seeing. Sharing a basic sample code that demonstrates the issue can go a long way for anyone looking to replicate the bug you are facing and start formulating a solution.\n\n**Replication is key!** Many of the fields in this template are aimed at replicating the bug. The more information you can provide us about your sketch's environment and how others can replicate what you are seeing, the easier it is for anyone to understand your issue and start looking into solutions. \n\n**Be as detailed as you can and avoid generic statements**, e.g., do not say \"image() function does not work\" but rather be more specific, such as \"image() function does not display the loaded GIF image at the right size.\" A helpful way to describe the bug you are facing is to describe two things: \n\n1. What you expect the sample code you share to do (expected behavior).\n2. What the sample code is actually doing (actual behavior).\n\nIf you wish to contribute a fix to the bug you just reported, you can indicate so in the description. You may provide a simple suggestion as to how you would fix the bug you just described, this will let us know how much support you may need to contribute to the fix.\n\n**You should not file a pull request (or start working on code changes) without a corresponding issue or before an issue has been approved for implementation**; that is because the proposed fix may not be accepted, need a different approach entirely, or the actual problem is somewhere else. Any pull requests filed before the issue has been approved for fixing will be closed until approval is given to the issue.\n\nFor bug reports to be accepted for fixing, they must be approved by at least one [area steward or maintainer](https://github.com/processing/p5.js#stewards) before work can begin on a pull request.\n\n### [\"Existing Feature Enhancement\"](https://github.com/processing/p5.js/issues/new?assignees=\\&labels=Enhancement\\&projects=\\&template=existing-feature-enhancement.yml)\n\nThis template should be used if you wish to propose changes or add functionality to existing features of p5.js (functions, constants, rendering, etc). For example, if you want to add a new way to define a color to the `color()` function and other functions that accept colors, this is the template to use.\n\nThere are a few fields for this template that you should fill in.\n\n1. *Increasing Access* - This required field is where you insert a statement about how adding the proposed feature enhancement will help p5.js [increase access](https://github.com/processing/p5.js/blob/main/contributor_docs/access/) for people historically marginalized in the field of creative arts or technology. **No proposals will be accepted without this**, although you can fill in \"Not sure\" and offer other members of the community to provide this argument if they can think of how it addresses the accessibility of p5.js.\n2. *Most appropriate sub-area of p5.js?* - This helps us identify and respond to your issue. This will automatically tag the issue with the relevant [labels](https://github.com/processing/p5.js/blob/main/contributor_docs/issue_labels/).\n3. *Feature enhancement details* - This is where you describe your proposal for the feature enhancement. A good feature enhancement proposal often includes a clear use case: what, when, how, and why this feature enhancement is needed.\n\nFor feature enhancement proposals to be accepted they must be approved by at least 1 [area steward or maintainer](https://github.com/processing/p5.js#stewards) before work can begin on a pull request. \n\n**You should not file a pull request (or start working on code changes) without a corresponding issue or before an issue has been approved for implementation**, because there is no guarantee that the proposal will be accepted. Any pull requests filed before a proposal has been approved will be closed until approval is given to the issue.\n\n### [\"New Feature Request\"](https://github.com/processing/p5.js/issues/new?assignees=\\&labels=Feature+Request\\&projects=\\&template=feature-request.yml)\n\nThis template should be used if you wish to propose a new feature to be added to p5.js. For example to add support for drawing native HTML `<table>` elements with a new `createTable` function. Some proposals may overlap with existing feature enhancement proposals, in these cases you should just choose whichever template you feel is most appropriate.\n\nAccordingly, the template form fields are nearly identical to the field of the \"Existing Feature Enhancement.\" As such please see the [previous section](#existing-feature-enchancement) for details about how to fill in each field.\n\nFor new feature request proposals to be accepted, they must be approved by at least 2 [area stewards or maintainers](https://github.com/processing/p5.js#stewards) before work can begin on a pull request. \n\n**You should not file a pull request (or start working on code changes) without a corresponding issue or before an issue has been approved for implementation**, that is because there is no guarantee that the proposal will be accepted. Any pull requests filed before a proposal has been approved will be closed until approval is given to the issue.\n\n### [\"Discussion\"](https://github.com/processing/p5.js/issues/new?assignees=\\&labels=Discussion\\&projects=\\&template=discussion.yml)\n\nThis template is used when the issue you are filing does not fit into any of the above in any way. An issue not fitting into any of the above templates should be relatively rare in practice. For example, a discussion about whether to adopt a specific Web API feature in p5.js should be filed as a [new feature request](https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#new-feature-request); a discussion about adding an additional color mode to the various color functions should be filed as a [feature enchancement](https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#existing-feature-enchancement); an announcement about a local creative coding event that you are organizing should be posted on the forum and contacting the Processing Foundation if you are looking for support or publicity; etc.\n\nWhen opening a discussion issue, you can use the \"Labels\" panel on the side panels to add additional relevant labels so you can signpost your issue to the relevant area. The template itself is just the bare minimum text field. You can see [this link](https://github.com/processing/p5.js/issues/6517) for an example discussion issue.\n\n[**⬆ back to top**](#contributor-guidelines)\n\n***\n\n# Working on the p5.js codebase\n\n## Prerequisites\n\nTo proceed you should be minimally familiar with working with the command line, git, node.js (at least v18 and up), and have a local development environment setup.\n\n## Introduction\n\nNow that your issue has been discussed, an implementation approved, and you are willing to make the code changes, you are ready to start working on the codebase.\n\nSimilarly, if you have come across an issue or joined in discussions of an issue and an implementation has been approved by stewards, but neither the original issue author nor other members of the community have indicated they are willing to work on the issue, you may volunteer for submit a contribution here and have the stewards assign the issue to you.\n\n**You should not \"jump the queue\"** by filing a PR for an issue that either someone else has indicated willingness to submit a contribution or has already been assigned to someone else. We will always prioritize the \"first assigned, first serve\" order for accepting code contributions for an issue. \n\nIf you file a PR for an issue while someone else is still working on the same issue, your PR will be closed. If you see that it has been a few months since the last activity on an issue with an assigned individual, you can check in with them by leaving a polite comment on the issue asking for progress and if they need help with the implementation. We generally allow for a reasonably long time frame for people to work on their contributions as we understand that most people will often be working on a volunteer basis, or it simply takes more time for them to work on the feature. \n\nSimilarly, you should work at your own pace and be confident that there is no hard time limit on how long you can spend working on something. That being said, if you are having trouble with any aspect of your code contribution, do not hesitate to ask for help in the issue, the stewards and maintainers, as well as members of our community, will do our best to guide you!\n\n## Quick Get Started For Developers\n\nIf you want to work/contribute to p5.js'🌸 codebase as a developer, either directly for improving p5.js or for improving its sub-projects like [Friendly Error Systems](https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system/), you can follow the following steps:\n\n1. [Create a fork of p5.js.](https://docs.github.com/en/get-started/quickstart/fork-a-repo)\n2. [Clone your created fork to your computer.](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)\n3. [Add upstream using the following command](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork):\n\n```\ngit remote add upstream https://github.com/processing/p5.js\n```\n\n4. Make sure your machine has [NodeJs](https://nodejs.org/en/download) installed; check it with the following command:\n\n```\nnode -v\n```\n\n5. Install dependencies with:\n\n```\nnpm ci\n```\n\n6. Create a git branch of the `main` branch having a descriptive branch name using: \n\n```\ngit checkout -b [branch_name]\n```\n\n7. As you start making changes to the codebase, frequently run the tests (it takes time, but it ensures that existing behaviors are not being broken).\n\n```\nnpm test\n```\n\n8. Add any unit tests if you are working on adding new features or feature enhancement.\n9. Once done, you can commit the changes and create a [Pull Request](https://p5js.org/contributor-docs/#/./contributor_guidelines?id=pull-requests).\n\n## Using the GitHub edit functionality\n\nWhen viewing a file on the GitHub web interface, near the top of the content of the file you are viewing will be a pencil icon button. This button is a convenient edit feature provided by GitHub that simplifies many of the processes we will be covering below and can be used to make quick and simple edits to the file you are viewing.\n\n![Cropped screenshot of a file view in GitHub of the p5.js repository, \"src/color/color\\_conversion.js\" file. A red arrow pointing to a pencil icon button on the right side of the image.](src/content/contributor-docs/images/edit-file.png)\n\nHowever, it is not recommended to use this feature other than for very simple changes. One of the main reasons for this is that for more complex changes to the source code, it should be built and tested locally before being filed as a PR. Using a local development environment is also often much more fluent for most as compared to the basic editing environment provided by this edit functionality.\n\n## Forking p5.js and working from your fork\n\nThe first step to work on the p5.js source code is to fork the p5.js repository. Forking has a specific meaning in open source, but for our purpose, it means creating a copy of the repository and storing it in your own GitHub account. To fork a repo, simply click on the \"Fork\" button near the top of the page, and GitHub will make a copy of the repo in your account.\n\n![Screenshot of the main page of repository. A button, labeled with a fork icon and \"Fork 59.3k,\" is outlined in dark orange.](src/content/contributor-docs/images/fork.png)\n\nWorking from your fork of the p5.js repository is necessary because you will likely not have direct write access to the official p5.js repository, and working on a fork allows you to make changes and later submit them back to the official repository.\n\n### Using GitHub Desktop\n\nGitHub Desktop is a program that lets you work with git via a graphical user interface rather than typing commands into a terminal. It is a good option if you are new to git, and you can always switch back and forth between Github Desktop and a terminal whenever you feel like it.\n\nFirst, [download and install GitHub Desktop.](https://desktop.github.com/) Once installed, open the application. It will ask you to sign in to your GitHub account. After you have signed in, it will list your projects, including your fork of p5.js. Select your fork, which will be named `yourUsername/p5.js`, and click the blue \"Clone\" button. It will ask for some details about where to place your project; you can either change them or leave the default settings and continue.\n\n![The GitHub Desktop user interface after signing in. On the right half of the screen, it lists your projects, and a Clone button in the bottom right.](src/content/contributor-docs/images/github-desktop-init.png)\n\nOnce cloned, it will ask how you plan to use your fork. Select the option to contribute to the parent project and click \"Continue.\"\n\n![The view after cloning a fork. It asks if you are planning to contribute to the parent project, or use it for your own purposes.](src/content/contributor-docs/images/github-desktop-fork.png)\n\n### Using the `git` command line interface\n\nOnce the fork is created, navigate to your fork's page and copy the git URL by clicking the green \"Code\" button. It should look something like `https://github.com/limzykenneth/p5.js.git`.\n\n![Screenshot of the list of files on the landing page of a repository. The \"Code\" button is highlighted with a dark orange outline.](src/content/contributor-docs/images/code-button.png)\n\nNext go to the command line in your local environment and clone this git repository. \"Clone\" simply means download a copy of the repo to your local machine. Run the following command in a folder where you want to store the p5.js source code folder.\n\n```\ngit clone [git_url]\n```\n\nReplace `[git_url]` with the URL you just copied above. This can take several minutes, depending on the speed of your internet connection, a good time to make some coffee! Once the process is finished, you can open up the downloaded folder named `p5.js` in your preferred text editor and start looking around.\n\n## Codebase breakdown\n\nSome of the key files and folders you will be in the p5.js folder are as follows:\n\n* `src` - Where all the code that eventually gets combined into the final p5.js and p5.min.js files lives\n* [`test`](https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing/) - Where unit tests and code for testing all documentation examples lives\n* `tasks` - Where detailed and custom build code lives\n* `Gruntfile.js` - This is the main build configuration file\n* `contributor_docs` - Where the documentation and all other contributor documentation lives\n\nThe other files and folders are either configurations or other kinds of support files; in most cases, you shouldn't need to make any modifications.\n\n## Build setup\n\nBefore you do anything, you'll need to set up the local project folder so that you can build and run tests for p5.js. Assuming you have node.js installed, run:\n\n```\nnpm ci\n```\n\nThis will likely take a while, as npm downloads all dependencies required. However, once done, that's it, you are all set up. Pretty simple, right?\n\n## Git workflow\n\nNow, you are ready to make the changes you need to make; for more details about the different parts of the repository and how you can make relevant changes, see the subsections below. To start, run:\n\n```\nnpm test\n```\n\nTo try building p5.js from scratch and run all unit tests, this should complete with no errors. If you just want to build the library without running the tests, you can run:\n\n```\nnpm run build\n```\n\nEither of the commands above will build the library into the `lib/` folder as `p5.js` and `p5.min.js`. You can use these built files for your own tests if necessary.\n\nNext, we recommend that you make a branch off the `main` branch before starting your work. A branch in git is as the name implies, a branched version of the repo that you can add commits to without affecting the `main` or other branches. Branches enable you to work on multiple features at once (by using multiple isolated branches) and have confidence that if you mess up a branch it won't affect the `main` branch.\n\nIn GitHub Desktop, this can be done by clicking the Current Branch button in the header of the window. From here, you can change branches, or enter a branch name to make a new one. For our purposes, enter a new branch name describing the change you will make, and click Create New Branch.\n\n![A screenshot of the GitHub Desktop branch selection menu. After entering a new branch name that does not yet exist, a \"Create New Branch\" button appears.](src/content/contributor-docs/images/github-desktop-create-branch.png)\n\nFrom the terminal, run `git checkout -b branch_name` while you are on the `main` branch, replacing `branch_name` with something descriptive, and you will be on a separate branch now. \n\nAs you make your changes, we recommend running `npm test` frequently, especially if you are working on the source code. Running this will take some time, but it ensures that the changes you make are not breaking existing behaviors. You should run `npm test` before moving on to committing the changes as described below.\n\nOnce you have made your changes to the codebase, you will need to commit it to git. A commit is a collection of changes saved in the git repository; it essentially records the current state of the files in the repo at the time of commit. \n\nA question that may arise is how often should you commit to git? In general it is preferred that you aim to commit often rather than lump multiple big changes into one commit. A good guideline is to commit whenever you have completed a subtask that can be described in a sentence.\n\nTo commit all current changes from GitHub Desktop, open the app after making your changes. It will show a list of the files you have changed in the left sidebar, and the specific changes within each file on the right. Type a brief, high-level description in the field next to your user icon in the bottom left corner of the window. This will be the title of the commit. You may elaborate further in the description field below or just leave it blank. Click the blue \"Commit\" button to finalize the change.\n\n![A screenshot of GitHub Desktop after having made a change. The area where you need to write a title for your change is circled in red in the lower left of the window.](src/content/contributor-docs/images/github-desktop-commit.png)\n\nTo commit all current changes from the terminal, run the following:\n\n1. Check that it only lists files you have changed with the following command. \n\n```\ngit status\n```\n\nIf there are files listed that you have not changed, you will need to either [restore](https://git-scm.com/docs/git-restore) them to the original or make sure they are intended changes. To show more detailed changes for each file use the following command. \n\n```\ngit diff\n```\n\nYou should not commit any file changes that you don't intend to change for your PR.\n\n2. Stage all changes for committing into git with the following command.\n\n```\ngit add .\n```\n\n3. To commit the changes into git, run the following command.\n\n```\ngit commit -m \"[your_commit_message]\"\n```\n\n`[your_commit_message]` should be replaced with a relevant commit message that is descriptive of the changes, avoiding generic statements. For example, instead of saying `Documentation fix 1`, say `Add documentation example to circle() function`.\n\n```\ngit commit -m \"Add documentation example to circle() function\"\n```\n\nRepeat the above steps for all commits you will be making while making sure to run `npm test` periodically to make sure things are working.\n\n### Source code\n\nIf you are going to work on the source code, a good place to start, if you know which of p5.js features you are going to work on, is to visit the documentation and at the bottom of each documented functionality of p5.js will be a link to its source code.\n\n![Cropped screenshot of a reference page on the p5.js website containing the sentence \"Notice any errors or typos? Please let us know. Please feel free to edit src/core/shape/2d\\_primitives.js and issue a pull request!\". Part of the above sentence where it says \"src/core/shape/2d\\_primitives.js\" is highlighted with a red underline and arrow pointing to it.](src/content/contributor-docs/images/reference-code-link.png)\n\n### Unit tests\n\nIf you are going to work on unit tests, please see [here](https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing/). Note that for any feature enhancement, new features, and certain bug fix, unit tests covering the new implementations should be included in the PR.\n\n### Inline documentation\n\nIf you are going to work on the inline documentation, please see [here](https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation/).\n\n### Accessibility\n\nIf you are going to work on accessibility features, please see [here](https://github.com/processing/p5.js/blob/main/contributor_docs/web_accessibility/). For a Friendly Error System, please see [here](https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system/).\n\n## Code standard\n\np5.js' code standard or code style is enforced by [ESLlint](https://eslint.org/). Any git commit and pull request must pass linting before it will be accepted. The easiest way for you to follow the right coding standard is to use the ESLint plugin available for your text editor with linting error highlighting (available for most popular text editors).\n\n## Software Design principles\n\nWhile working on any features of p5.js, it is important to keep in mind the design principles of p5.js. Our priorities may differ from the priorities of other projects, so if you are coming from a different project, we recommend that you familiarize yourself with p5.js' design principles.\n\n* **Access** We prioritize accessibility first and foremost, and decisions we make must take into account how it increases access to historically marginalized groups. Read more about this in our access statement.\n* **Beginner Friendly** The p5.js API aims to be friendly to beginner coders, offering a low barrier to creating interactive and visual web content with cutting-edge HTML5/Canvas/DOM APIs.\n* **Educational** p5.js is focused on an API and curriculum that supports educational use, including a complete reference to the API with supporting examples, as well as tutorials and sample class curricula that introduce core creative coding principles in a clear and engaging order.\n* **JavaScript and its community** p5.js aims to make web development practices more accessible to beginners by modeling proper JavaScript design patterns and usage while abstracting them where necessary. As an open-source library, p5.js also includes the wider JavaScript community in its creation, documentation, and dissemination.\n* **Processing and its community** p5.js is inspired by the Processing language and its community and aims to make the transition from Processing Java to JavaScript easy and clear.\n\n[**⬆ back to top**](#contributor-guidelines)\n\n***\n\n# Pull requests\n\nNow that you have made the changes you need to make, including unit tests if applicable, `npm test` does not error, and you have committed the changes, you can start preparing pull requests to get your new commits merged into the official p5.js repository. A pull request, more formally, is a request to a repo (in this case, the official p5.js repo) to pull or merge changes from another repo (in this case, your forked p5.js repo) into its commit history.\n\n## Creating a pull request\n\nThe first step here is to push your new commits to your fork of p5.js; think of it as uploading the changes to your fork.\n\nFrom GitHub Desktop, just to the right of the button to change branches in the header is a button to push your changes to GitHub. Click this to push your changes.![A view of GitHub Desktop after committing changes. The button to push the changes online is circled in red.](src/content/contributor-docs/images/publish-branch.png)\n\nOnce your code is uploaded, it will show a button prompting you to create a pull request. Clicking the button once will show a preview with another button to actually create the request. Press the \"Create Pull Request\" button to begin the process.\n\n![A screenshot of Github Desktop after pushing code. In the left sidebar, it says \"0 changed items.\" In the right pane, below the \"No local changes\" header, a blue \"Review Pull Request\" button has been marked up with a red circle.](src/content/contributor-docs/images/preview-pull-request.png)\n\nFrom the terminal, run the following command:\n\n```\ngit push -u origin [branch_name]\n```\n\nOnce the push is complete, you may see a link in the terminal that lets you open a pull request, if not you can navigate to your fork in your web browser, switch to the branch you are working on with the dropdown button on top of the file list, click on \"Contribute\" then \"Open pull request.\"\n\n![Screenshot of the git command line response after pushing a new branch. It includes a GitHub link to open a new pull request.](src/content/contributor-docs/images/new-branch.png)\n\nYou may also see a button to open a pull request when you visit the p5.js Github repo. Clicking it will also work to open a new pull request.\n\n![Cropped screenshot of the main page of the p5.js GitHub repository web page. A section near the top of the page is a yellow call to action box containing a green button with the text \"Compare & pull request\".](src/content/contributor-docs/images/recent-pushes.png)\n\n### Pull request information\n\n![Screenshot of an \"Open a pull request\" page on GitHub that is prepopulated with p5.js's pull request template.](src/content/contributor-docs/images/new-pr.png)\n\nBefore filing the pull request, you will need to fill out the pull request template. \n\n### Title\n\nThe pull request title should briefly describe what the changes are, again avoid generic statements here.\n\n### Resolves\n\nIn the template, there is this line `Resolves #[Add issue number here]`, which you should replace `[Add issue number here]` with the issue number of the issue you are addressing/fixing [above](https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#all-about-issues) (e.g., `Resolves #1234`). This will make sure the issue is automatically closed after this PR is merged. If you do not wish to automatically close the issue after this PR is merged (maybe because there are more changes coming in a separate PR), change `Resolves` to `Addresses`.\n\n### Changes\n\nYou should clearly describe the changes you have made in this PR. Include any implementation details and decisions you made here that are relevant to whoever will review it.\n\n### Screenshots of the change\n\nThis is optional depending on circumstances and should be included when making changes related to how p5.js renders visuals on the canvas. Note that this is not a screenshot of the text editor but a screenshot of an example sketch's behavior after your changes.\n\n### PR Checklist\n\nThis contains some relevant checklist items that you should tick by replacing `[ ]` with `[x]` wherever relevant to your changes.\n\nOnce done, click on \"Create pull request.\"\n\n### Rebase and resolve conflicts\n\n![Screenshot of an open pull request on p5.js's GitHub repository. The title of the pull request says \"Fix filter shaders when rectMode is applied; add tests #6603.](src/content/contributor-docs/images/opened-pr.png)\n\nYou should now inspect the opened pull request and pay attention to a few things:\n\n1. The number of commits should match the number of commits you have made, meaning if you have committed two times while working on this PR, it should only show two commits in the \"Commits\" tab.\n2. The \"Files changed\" tab should show the changes you have made as compared to the p5.js repo and nothing more.\n3. Near the bottom, it should say, \"This branch has no conflicts with the base branch,\" and not \"This branch has conflicts that must be resolved.\"\n\nIf any of the above is not true (there are more commits than you expected or there are conflicts), you may need to [rebase](https://git-scm.com/book/en/v2/Git-Branching-Rebasing) or help resolve conflicts. Conflicts here mean that you have made changes to a file that also recently had changes applied to it, and git is not sure which set of changes to keep or leave out. If you are not confident in resolving these issues, let us know and we'll guide you through the process. Basic instruction is as below.\n\nSometimes, Github lets you resolve conflicts directly in the browser by showing you a Resolve Conflicts button:![A screenshot of a GitHub pull request with merge conflicts. The conflicting filenames are listed, and there is a \"Resolve conflicts\" button highlighted.](src/content/contributor-docs/images/resolve-conflicts.png)\n\nConflicts are shown between `<<<<<<<` and `>>>>>>>`, separated by `=======`. One section shows your code, and the other section shows what has changed in the main branch.\n\n![A screenshot of GitHub's conflict resolution interface. A sidebar lists the files with conflicts. The right pane contains the conflicting code, with merge conflict markers highlighted.](src/content/contributor-docs/images/conflicts-interface.png)\n\nRemove the conflict markers and keep just the final code that you want in your PR. You can click \"Mark as resolved\" when all the conflicts have been addressed.\n\n![A screenshot of the GitHub conflict resolution interface after editing the code to remove the merge conflict markers. The \"mark as resolved\" button in the upper right is enabled.](src/content/contributor-docs/images/mark-as-resolved.png)\n\nWhen all files with conflicts have been resolved, you can commit your changes.\n\n![The GitHub conflict resolution interface after all conflicts have been marked as resolved. A green \"commit merge\" button is enabled.](src/content/contributor-docs/images/commit-merge.png)\n\nSometimes, the conflicts are too complicated for Github to show on the web. In this case, or if you just prefer the manual method, you can resolve your conflicts locally:\n\n1. Run `git remote add upstream https://github.com/processing/p5.js`\n2. Run `git fetch upstream`\n3. Run `git rebase upstream/main`\n4. You may have some conflicts! If it’s just lib/p5.js and lib/p5.min.js, it’s easy to fix; just build the project again. If you have conflicts in other files & you're not sure how to resolve them, ask for help!\n\n```\nnpm test\ngit add -u\ngit rebase --continue\n```\n\n5. Run `git push`\n\nThe checklist above may clear out after these steps but if not, we'll guide you through any fix necessary.\n\n## Discuss and amend\n\nNow that your PR is opened, a steward or maintainer will review your PR. It may take several days before a steward is able to reply to your PR, so be patient. Why not use the time to check out some of the other open issues in the meantime?\n\nOnce a steward has reviewed your PR, one of two things may happen: 1. Your PR is approved and merged, hurray! 2. The steward may ask some questions regarding the PR or request some changes to the PR. If it's the latter, don't panic; it's perfectly normal, and the stewards are always here to help you complete your contribution!\n\nIf changes are requested of your PR and you are able to make those changes, follow the [same process as before](https://github.com/processing/p5.js/blob/main/contributor_docs/contributor_guidelines.md#git-workflow) but just continue from your local copy of the repo and relevant branch, make those changes, commit them into git, and push them to your forked remote repo. Once you have pushed additional commits to your forked remote repo, you will see that the new commits automatically show up in the PR. Leave a comment in the PR to let the reviewer know you have made the requested changes, and if no additional changes are needed, your PR will be merged!\n\n[**⬆ back to top**](#contributor-guidelines)\n"},"Creating an Addon Library\n":{"relativeUrl":"/contribute/creating_libraries","description":"{/* Extend p5.js functionalities with your own addon library. */}\n\n\n\nA p5.js addon library is JavaScript code that extends or adds to the p5.js core functionality. While p5.js itself already provides a wide range of functionality, it doesn’t aim to cover everything you can do with JavaScript and the Web API. Addon libraries let you extend p5.js without needing to incorporate the features into p5.js. This guide will take you through the steps of creating an addon library that loads a simple CSV file by implementing a `loadCSV()` function.\n\nHere are some examples of why you may want to create an addon library:\n\n* Provide a simplified interface to another library\n  * [p5.ble.js](https://github.com/ITPNYU/p5.ble.js)\n  * [p5.serialserver](https://github.com/p5-serial/p5.serialserver)\n* Implement specialized algorithms or functionalities\n  * [p5.pattern](https://github.com/SYM380/p5.pattern)\n  * [p5.mapper](https://github.com/jdeboi/p5.mapper)\n* Test out new Web API features that are not widely available in different browsers yet\n  * [p5.webserial](https://github.com/gohai/p5.webserial/)\n  * [p5.joystick](https://github.com/Vamoss/p5.joystick)\n* Test alternative or new implementations of existing p5.js functionalities\n  * [número](https://github.com/nickmcintyre/numero)\n  * [p5.cmyk.js](https://github.com/jtnimoy/p5.cmyk.js)\n\n## Prerequisites\n\n* p5.js foundation\n* Prototype-based object orientation in Javascript\n\n## Step 1\n\nFirst, let’s create a blank JavaScript file for the addon library. We’ll call this file p5.loadcsv.js.\n\nThe main way to extend p5.js is by adding methods to the p5.prototype object. For example, the following code extends p5 to add a `loadCSV()` method to the p5.prototype object:\n\n```js\np5.prototype.loadCSV = function(){\n  console.log('I will load a CSV file soon!');\n};\n```\n\nWhen someone includes your p5.loadcsv.js file in a project, they can call `loadCSV()` as a global function just like `createCanvas()` or `background()`.\n\nYou can also extend p5.js classes such as` p5.Element` or` p5.Graphics` by adding methods to their prototypes. In the example below, `p5.Element.prototype` is extended with the `shout()` method. It adds an exclamation mark to the end of the element’s inner HTML.\n\n```js\np5.Element.prototype.shout = function () {\n  this.elt.innerHTML += '<span>!</span>';\n};\n```\n\n## Step 2\n\nYou now have a p5.loadcsv.js file with one method attached to the `p5.prototype` object. This method,` loadCSV()`, doesn’t do much currently; it just logs a message to the console. Run the following code in a new sketch that loads both p5.js and p5.loadcsv.js in the` <head>` tag.\n\n```js\nfunction setup() {\n  createCanvas(400, 400);\n  loadCSV();\n}\n```\n\n```html\n<html>\n  <head>\n    {/* Other tags */}\n\n    <script src=\"./p5.js\"></script>\n    <script src=\"./p5.loadcsv.js\"></script>\n\n    {/* Other tags */}\n  </head>\n\n  {/* Other tags */}\n\n</html>\n```\n\nRunning the sketch should print a single message in the console saying “I will load a CSV file soon!”.\n\n## Step 3\n\nTo load a CSV file with your `loadCSV()` function, the function needs to accept an argument. This can be defined in the same way as any other function parameter.\n\n```js\np5.prototype.loadCSV = function (filename) {\n  console.log(`I will load the CSV file ${filename} soon!`);\n};\n```\n\nIn our test sketch, we can use it like so:\n\n```js\nfunction setup() {\n  createCanvas(400, 400);\n\n  // Prints \"I will load the CSV file data.csv soon!\" to the console.\n  loadCSV('data.csv');\n}\n```\n\n## Step 4\n\nYou can access p5.js functions and variables such as `circle()` and `PI` in your addon code using the “`this`” object. We’ll use the `hour()` and `minute()` functions to further customize the `loadCSV()` function’s console message. This will give us some information about when the function is called.\n\n<details>\n  <summary>You should always use the “<code>function()</code>” keyword to attach methods to the <code>p5.prototype</code> object.</summary> Don’t use the arrow function syntax “<code>() =></code>” because the value of “<code>this</code>” when using the “<code>function()</code>” keyword is the created object (i.e., the p5 sketch), but with the arrow function syntax, the value of “<code>this</code>” is whatever the value of “<code>this</code>” is when the arrow function is defined. In the example below, “<code>this</code>” will refer to “<code>window</code>” instead of the p5 sketch, which is usually not what we want.\n</details>\n\n```js\np5.prototype.loadCSV = (filename) => {\n  // this === window is true because\n  // \"this\" refers to the window object.\n  // This is almost never what you want.\n  console.log(this === window);\n};\n\n\np5.prototype.loadCSV = function (filename) {\n  // Prints 'I will load the CSV file data.csv at 10:30'\n  // to the console.\n  console.log(`I will load the CSV file ${filename} at ${this.hour()}:${this.minute()}!`);\n};\n```\n\n## Step 5\n\nSo far, we have looked at several handy features for creating an addon library. If you just need to implement an algorithm, perform some drawings, or use other p5 functions in your addon, the previous steps should be enough for you to get started. You can explore more functionality a p5.js addon has access to by looking at the p5.js source code (every p5.js module is also written in the same way as a p5.js addon function!) or the “Looking inside p5.js” guide for more details on how p5.js work under the hood and how your addon library can utilize more advanced features.\n\nHowever, we have not made our `loadCSV()` function load any CSV file yet! To be able to load files, we need the function to be asynchronous, much like how p5.js’s own loading functions work (e.g., `loadJSON()`, `loadStrings()`, etc.).\n\nFirst make the following changes to your `loadCSV()` method:\n\n```js\np5.prototype.loadCSV = function(filename){\n  console.log(`I will load the CSV file ${filename} at ${this.hour()}:${this.minute()}!`);\n\n  let result = [];\n\n  fetch(filename)\n    .then((res) => res.text())\n    .then((data) => {\n      data.split('\\n').forEach((line) => {\n        result.push(line.split(','));\n      });\n    });\n\n  return result;\n};\n```\n\nThe method now creates an empty array in the variable “`result`”, load in the CSV file specified in the filename with the Fetch API, parse the CSV file in a simplified way (split each line into rows, then each row into words) and return the variable “`result`” at the end.\n\nNow, when you run the sketch, pass a file path to a simple CSV file to your `loadCSV()` function and log the output:\n\n```js\nfunction setup(){\n  createCanvas(400, 400);\n  let myCSV = loadCSV('data.csv');\n  print(myCSV);\n}\n```\n\nYou will notice that it is logging an empty array instead of an array containing data you have in your CSV file. This is because of the same reason why we need to load in data such as with `loadJSON()` or `loadStrings()` in the `preload()` function; the asynchronous nature of JavaScript makes it so that the “result” variable is returned from the `loadCSV()` function before the `fetch()` function can finish fetching the CSV file so we only get an empty array as it is first defined.\n\nSimply moving where you call `loadCSV()` to `preload()` in this case is not enough to solve this problem.\n\n```js\nlet myCSV;\n\nfunction preload(){\n  myCSV = loadCSV('data.csv');\n}\n\nfunction setup(){\n  createCanvas(400, 400);\n  print(myCSV); // Still prints []\n}\n```\n\np5 will need to be told that the addon’s `loadCSV()` function is something it should wait for in the `preload()` function for this to work. To do that, we use the “`registerPreloadMethod()`” in the `p5.prototype` object.\n\n```js\np5.prototype.loadCSV = function (filename){\n  console.log(`I will load the CSV file ${filename} at ${this.hour()}:${this.minute()}!`);\n\n  let result = [];\n\n  fetch(filename)\n    .then((res) => res.text())\n    .then((data) => {\n      data.split('\\n').forEach((line) => {\n        result.push(line.split(','));\n      });\n\n      this._decrementPreload();\n    });\n\n  return result;\n};\n\np5.prototype.registerPreloadMethod('loadCSV', p5.prototype);\n```\n\nNote two things from the code above:\n\n1. We call the `p5.prototype.registerPreloadMethod()` function passing in the name of the `loadCSV()` function as a string as the first parameter and `p5.prototype` as the second parameter.\n2. At the end of `fetch()`, after the CSV data has been parsed and pushed into the result array, `this._decrementPreload()` function is called.\n\n3) Now, if you test your sketch again, you should see that the “`myCSV`” variable is populated with the data from the CSV file!\n\n4. Note that due to inherent limitations of this technique, the returned “`result`” variable must be an object (array is also a type of object in Javascript) and must not be overwritten in the function body. You can set properties of the object (or push to the array), but you cannot reassign the variable (i.e., you cannot do “``result = data.split(`\\n`)``”).\n\n<details>\n  <summary>Quite a bit of magic is happening here: firstly, why does “<code>result</code>” now contain the additional data when <code>fetch()</code>code> should still have been asynchronous and thus running after “<code>result</code>” has returned?</summary>\n\n  This is related to why the return type must be an object. In Javascript, objects are passed by reference while most other types such as strings and numbers are passed by value. What this means is that when an object is returned from a function, it points to the original object that was created (in this case, the empty array we create in the line “`let result = [];`”.) In contrast, pass by value types, when returning from a function, will be copied and lose their relation to the original reference. This behavior allows us to modify the properties of the returned objects after they have been returned from the function as long as we don’t reassign the variable, which will create a new reference separate from the original object.\n</details>\n\n<details>\n  <summary>Secondly, what is <code>registerPreloadMethod()</code> doing and what about <code>this.\\_decrementPreload()</code>?</summary>\n\n  Without going into all the details, `registerPreloadMethod()` adds the function we specified into an internal list of functions that p5 keeps track of whenever it is called in `preload()`. When p5 detects such a function is called, it will add 1 to an internal counter. If this internal counter is larger than 0, it will keep waiting in `preload()` and defer running `setup()` and starting the `draw()` loop. Loading functions can decrement that internal counter by calling `this._decrementPreload()`, effectively signaling to p5 that a loading function in `preload()` is complete. If the internal counter reaches 0 after the decrement, it means all loadings are complete and the whole sketch can start.\n</details>\n\n## Step 6\n\nYour `loadCSV()` function should now work as expected and you can add additional features such as callback function support, additional methods attached to `p5.prototypes`, or anything else you can think of.\n\nThere is one more major feature that is available for addon libraries and these are action hooks. Action hooks are functions that will be run at certain points in the p5 object’s lifetime. For example, if you want your addon library to run some code just before p5 runs the `setup()` function or if your addon library needs to do some clean up after a sketch is removed using the `remove()` function, hooks are what will enable your addon library to do so.\n\nThe available hooks, in order of execution, are:\n\n* `init` — Called when the sketch is first initialized, just before the sketch initialization function (the one that was passed into the `p5` constructor) is executed. This is also called before any global mode setup, so your library can add anything to the sketch and it will automatically be assigned to the `window` object if global mode is active.\n* `beforePreload` — Called before the `preload()` function is executed.\n* `afterPreload` — Called after the `preload()` function is executed.\n* `beforeSetup` — Called before the `setup()` function is executed.\n* `afterSetup` — Called after the `setup()` function is executed.\n* `pre` — Called at the beginning of `draw()`. Called repeatedly the same as `draw()`.\n* `post` — Called at the end of `draw()`. Called repeatedly the same as `draw()`.\n* `remove` — Called when `remove()` is called.\n\nTo create an action hook, you can use the snippet below.\n\n```js\np5.prototype.doRemoveStuff = function (){\n  // Addon library related cleanup\n};\np5.prototype.registerMethod(\"remove\", p5.prototype.doRemoveStuff);\n\np5.prototype.setDefaultBackground = function(){\n  // Set background to be p5 pink by default\n  this.background(\"#ed225d\");\n};\np5.prototype.registerMethod(\"pre\", p5.prototype.setDefaultBackground);\n```\n\nYou can also unregister the hook when it is no longer needed.\n\n```js\np5.prototype.unregisterMethod('remove', p5.prototype.doRemoveStuff);\n```\n\n## Next steps\n\nBelow are some extra tips about authoring your addon library.\n\n**Must an addon library extend** `p5.prototype` **or the prototype object of p5.\\* classes?**\n\nYour addon library may not extend p5 or p5 classes at all, but instead just offer extra classes, functions, or constants that can be instantiated and used with p5, or it may do some mix of both: offering extra classes but with convenience methods attached to the `p5.prototype` object for example.\n\n**Naming conventions**\n\n**Don't overwrite p5 functions or properties.** When extending a `p5.prototype` or prototype object of p5 classes, be careful not to use the names of existing properties or functions unless you intend to replace their functionalities entirely.\n\n**p5.js has two modes, global mode and instance mode.** In global mode, all p5 properties and methods are bound to the `window` object, allowing users to call methods like `background()` without having to prefix them with anything. However, this means you need to be careful not to overwrite native JavaScript functionality. For example “`Math`” and “`console`” are both native Javascript functionalities so you shouldn’t have methods named “`Math`” or “`console`”.\n\n**Class names should use** `PascalCase`**, while methods and properties should use** `camelCase`**.** Classes in p5 are prefixed with p5. We would like to keep this namespace for p5 core classes only, so when you create your own namespace, **do not include the** `p5.` **prefix for class names**. You are welcomed to create your own prefix, or just give them non-prefixed names.\n\n```js\n// Do not do this\np5.prototype.p5.MyClass = class {\n};\n\n// Do this\np5.prototype.myAddon.MyClass = class {\n};\n\n// Or this\np5.prototype.myMethod = function(){\n};\n```\n\n**p5.js library filenames are also prefixed with p5, but the next word is lowercase** to distinguish them from classes. For example, p5.sound.js. You are encouraged to follow this format for naming your file.\n\n**Packaging**\n\n**Create a single JS file that contains your library.** This makes it easy for users to add it to their projects. We suggest using a [bundler](https://rollupjs.org/) for your library. You may want to provide options for both the normal JavaScript file for sketching/debugging and a [minified](https://terser.org/) version for faster loading.\n\n**Contributed libraries are hosted, documented, and maintained by their creators.** This could be on GitHub, a separate website, or elsewhere. We only feature addon libraries that are fully open source.\n\n**Documentation is key!** The documentation for your library should be easy to find. The documentation for contributed libraries won’t be included in the main p5.js reference, but you may want to follow a similar format. See these examples of a [library overview page](http://p5js.org/reference/#/libraries/p5.sound), [class overview page](http://p5js.org/reference/#/p5.Vector), and [method page](http://p5js.org/reference/#/p5/arc).\n\n**Examples are great, too!** They show people what your library can do. Because this is all JavaScript, people can see them running online before they download anything.[ ](http://jsfiddle.net/) You can create a collection of examples on the p5.js web editor to showcase how your library works.\n\n**Let us know!** Once your library is ready for distribution, send an email to [hello@p5js.org](mailto:hello@p5js.org) with a link and some info. We'll include it on the [libraries page](http://p5js.org/libraries/)! If you have created a library and would like to have it included on the [p5js.org/libraries](https://p5js.org/libraries) page, please fill in [this form](https://docs.google.com/forms/d/e/1FAIpQLSdWWb95cfvosaIFI7msA7XC5zOEVsNruaA5klN1jH95ESJVcw/viewform).\n"},"Documentation Style Guide\n":{"relativeUrl":"/contribute/documentation_style_guide","description":"{/* A reference to help give our documentation a consistent voice. */}\n\n\n\nHello! Welcome to the guidelines for writing p5.js documentation. This document is a remix of the following resources:\n\n* Ruby on Rails [API Documentation Guidlines](https://guides.rubyonrails.org/api_documentation_guidelines.html) (CC BY-SA 4.0)\n* WordPress documentation guidelines for [accessibility](https://make.wordpress.org/docs/style-guide/general-guidelines/accessibility/) and [inclusivity](https://make.wordpress.org/docs/style-guide/general-guidelines/inclusivity/) (CC0)\n* Airbnb [JavaScript Style Guide](https://airbnb.io/javascript/) (MIT)\n\nOur community is large and diverse. Many people learn to code using p5.js, and a large subset of those people are students in K–12 classes. After reading this guide, you will know:\n\n* How to write effective, inclusive, and accessible prose for documentation purposes.\n* How to write simple code samples for documentation purposes.\n\n## Table of Contents\n\n### Writing\n\n* [YUIDoc](#yuidoc)\n* [English](#english)\n* [Oxford Comma](#oxford-comma)\n* [Wording](#wording)\n* [Unbiased Documentation](#unbiased-documentation)\n* [Accessibility and Disability](#accessibility-and-disability)\n\n### Code\n\n* [Code Samples](#code-samples)\n* [Comments](#comments)\n* [Whitespace](#whitespace)\n* [Semicolons](#semicolons)\n* [Naming Conventions](#naming-conventions)\n* [Variables](#variables)\n* [Strings](#strings)\n* [Boolean Operators](#boolean-operators)\n* [Conditionals](#conditionals)\n* [Iteration](#iteration)\n* [Objects](#objects)\n* [Arrays](#arrays)\n* [Functions](#functions)\n* [Arrow Functions](#arrow-functions)\n* [Chaining](#chaining)\n* [Classes](#classes)\n* [Assets](#assets)\n\n## YUIDoc\n\nWe use YUIDoc to generate the p5.js API documentation. To generate the docs, navigate to the p5.js root directory, run `npm install`, and execute:\n\n```\n$ npm run grunt yui:dev\n```\n\nThe output will appear in docs/reference. Refer to the [inline documentation guide](https://p5js.org/contribute/contributing_to_the_p5js_reference) for more information.\n\n**[⬆ back to top](#table-of-contents)**\n\n## English\n\nPlease use American English (color, center, modularize, etc). See [a list of American and British English spelling differences here](https://en.wikipedia.org/wiki/American_and_British_English_spelling_differences).\n\n**[⬆ back to top](#table-of-contents)**\n\n## Oxford Comma\n\nPlease use the [Oxford comma](https://en.wikipedia.org/wiki/Serial_comma) (\"red, white, and blue\", instead of \"red, white and blue\").\n\n**[⬆ back to top](#table-of-contents)**\n\n## Wording\n\nWrite simple, declarative sentences. Brevity is a plus: get to the point.\n\nWrite in the present tense: \"Returns an object that...\", rather than \"Returned an object that...\" or \"Will return an object that...\".\n\nStart comments in upper case. Follow regular punctuation rules:\n\n```javascript\n// Draws a fractal from a Julia set.\nfunction drawFractal(c, radius, maxIter) {\n  // ...\n}\n```\n\nCommunicate the current way of doing things, both explicitly and implicitly. Use the idioms recommended in this guide. Reorder sections to emphasize favored approaches if needed. The documentation should be a model for best practices and approachable for beginners.\n\nDocumentation has to be brief but comprehensive. Explore and document edge cases. What happens for each combination of arguments? What bugs are most likely to appear in a beginner's code?\n\nSpell names correctly: p5.js, CSS, HTML, JavaScript, WebGL. When in doubt, refer to an authoritative source like their official documentation.\n\n**[⬆ back to top](#table-of-contents)**\n\n## Unbiased Documentation\n\nWrite documentation without bias towards any kind of person. While documenting particularly demanding/sensitive topics, take the time to educate yourself. Ensure that your writing doesn’t hurt or offend someone unintentionally.\n\nWhile writing unbiased documentation:\n\n* Be inclusive of every gender identity and expression, sexual orientation, race, ethnicity, language, neuro-type, size, disability, class, religion, culture, subculture, political opinion, age, skill level, occupation, and background. Make examples as diverse as our community.\n* Avoid politicized content. If political content is necessary, remain neutral.\n* Follow accessibility guidelines.\n* Avoid content that would insult or cause harm to people.\n* Don’t make any generalizations about people, countries, and cultures. That includes positive or neutral generalizations.\n* Don’t write prejudiced and discriminatory content against minority communities.\n* Avoid terms related to historical events.\n\nPrefer wordings that avoid \"you\"s and \"your\"s. For example, instead of:\n\n```\nIf you need to declare a variable, it is recommended that you use `let`.\n```\n\nuse this style:\n\n```\nAlways use `let` to declare variables.\n```\n\n**Pronouns**\n\n| Recommended | Not Recommended    |\n| ----------- | ------------------ |\n| they        | he or she          |\n| them        | him or her         |\n| their       | his or her         |\n| theirs      | his or hers        |\n| themselves  | himself or herself |\n\n**[⬆ back to top](#table-of-contents)**\n\n## Accessibility and Disability\n\n* Emphasize the reader rather than underlining their inconveniences.\n* Don’t refer to a person with a disability as a disabled person. Use [approved terminology](https://make.wordpress.org/docs/style-guide/general-guidelines/inclusivity/#accessibility-terminology) for people with specific disabilities.\n* Maintain a uniform structure throughout the p5.js documentation. Emphasize important points both stylistically and visually.\n* Use a screen reader to test documentation. To test a screen reader, see [List of screen readers](https://en.wikipedia.org/wiki/List_of_screen_readers).\n* Consider multi-platform accessibility for all types of devices and operating systems.\n* Create examples with all types of input devices such as voice and gesture based devices, controllers, mice, and keyboards.\n* Don’t use ableist language. Be inclusive and unbiased while writing about accessibility and disability.\n* Take a pragmatic approach to HTML semantics. Don’t add semantics purely for the sake of semantics. If there is an HTML structure that clearly matches the content, use that element. For example, a group of links should most likely use a list element.\n* Use simple tables and tabular formats. Avoid span tags (such as rowspan and colspan). Tables prove to be difficult for screen readers.\n\n**Accessibility terminology**\n\nThe following terminiology is adapted from the WordPress documentation guidelines for [Writing inclusive documentation](https://make.wordpress.org/docs/style-guide/general-guidelines/inclusivity/#accessibility-terminology). For more background on people-first language, see the CDC's guide on [Communicating With and About People with Disabilities](https://www.cdc.gov/ncbddd/disabilityandhealth/materials/factsheets/fs-communicating-with-people.html).\n\n| Recommended                                                     | Not Recommended                                                    |\n| --------------------------------------------------------------- | ------------------------------------------------------------------ |\n| person with disability                                          | the disabled, handicapped, differently abled, challenged, abnormal |\n| person without disability                                       | normal person, healthy person, able-bodied                         |\n| has \\[disability]                                               | victim of, suffering from, affected by, stricken with              |\n| unable to speak, uses synthetic speech                          | dumb, mute                                                         |\n| deaf, low-hearing                                               | hearing-impaired                                                   |\n| blind, low-vision                                               | vision-impaired, visually-challenged                               |\n| cognitive or developmental disabilities                         | mentally-challenged, slow-learner                                  |\n| person with limited mobility, person with a physical disability | crippled, handicapped                                              |\n\n## Code Samples\n\nChoose meaningful code samples that cover the basics as well as gotchas. Only use advanced syntax if it is necessary to explain how a feature works. Don't draw five circles to explain something when one circle will convey the idea. The code samples themselves should follow the guidelines below.\n\n**[⬆ back to top](#table-of-contents)**\n\n## Comments\n\n* Use `//` for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.\n\n```javascript\n// Bad.\nlet magicWord = 'Please';  // Remember this.\n\n// Good.\n// Remember this.\nlet magicWord = 'Please';\n\n// Bad.\nif (keyIsPressed === true) {\n  thing1();\n  // This is an important note.\n  thing2();\n}\n\n// Good.\nif (keyIsPressed === true) {\n  thing1();\n\n  // This is an important note.\n  thing2();\n}\n```\n\n* Start all comments with a space to make it easier to read.\n\n```javascript\n// Bad.\n//Remember this.\nlet magicWord = 'Please';\n\n// Good.\n// Remember this.\nlet magicWord = 'Please';\n```\n\n* Use `//` for multiline comments.\n\n```javascript\n\n// Bad.\n/**\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n * I will use // for multiline comments.\n */\n\n//Bad.\n/*\n I will use // for multiline comments.\n I will use // for multiline comments.\n I will use // for multiline comments.\n I will use // for multiline comments.\n I will use // for multiline comments.\n */\n\n// Good.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n// I will use // for multiline comments.\n\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Whitespace\n\n* Indent blocks 2 spaces.\n\n```javascript\n// Bad.\nfunction setup() {\n∙∙∙∙createCanvas(400, 400);\n}\n\n// Bad.\nfunction setup() {\n∙createCanvas(400, 400);\n}\n\n// Good.\nfunction setup() {\n∙∙createCanvas(400, 400);\n}\n```\n\n* Place 1 space before the leading brace.\n\n```javascript\n// Bad.\nfunction setup(){\n  createCanvas(400, 400);\n}\n\n// Good.\nfunction setup() {\n  createCanvas(400, 400);\n}\n```\n\n* Place 1 space before the opening parenthesis in control statements such as `if` and `for`. Place no space between the argument list and the function name.\n\n```javascript\n// Bad.\nif(keyIsPressed === true) {\n  doStuff ();\n}\n\n// Good.\nif (keyIsPressed === true) {\n  doStuff();\n}\n\n// Bad.\nfunction setup () {\n  createCanvas (400, 400);\n}\n\n// Good.\nfunction setup() {\n  createCanvas(400, 400);\n}\n```\n\n* Place spaces between operators.\n\n```javascript\n// Bad.\nlet y=x+5;\n\n// Good.\nlet y = x + 5;\n```\n\n## Semicolons\n\n* Yep.\n\n> Why? JavaScript's [automatic semicolon insertion](https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion) can lead to subtle bugs.\n\n```javascript\n// Bad.\nlet x = 0\n\n// Good.\nlet x = 0;\n```\n\n## Naming Conventions\n\n* Avoid single letter names. Be descriptive.\n\n```javascript\n// Bad.\nfunction f(x, y) {\n  // ...\n}\n\n// Good.\nfunction vectorField(x, y) {\n  // ...\n}\n```\n\n* Name objects, functions, and instances using camelCase.\n\n```javascript\n// Bad.\nlet OBJEcttsssss = {};\n\n// Bad.\nlet this_is_my_object = {};\n\n// Good.\nlet thisIsMyObject = {};\n```\n\n* Name classes using PascalCase.\n\n```javascript\n// Bad.\nclass player {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// Good.\nclass Player {\n  constructor(name) {\n    this.name = name;\n  }\n}\n```\n\n* Don't use trailing or leading underscores.\n\n> Why? JavaScript doesn't have private properties or methods.\n\n```javascript\n// Bad.\nclass Spy {\n  constructor(secret) {\n    this._secret = secret;\n  }\n}\n\n// Good.\nclass Spy {\n  constructor(secret) {\n    this.secret = secret;\n  }\n}\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Variables\n\n* Avoid using `var` to declare variables.\n\n> Why? Variables declared with `var` have confusing scoping rules. These lead to subtle bugs.\n\n```javascript\n// Bad, because it looks reasonable.\ncircle(x, y, 50);\nvar x = 200;\nvar y = 200;\n\n// Good, because it throws a ReferenceError.\ncircle(x, y, 50);\nlet x = 200;\nlet y = 200;\n```\n\n* Always use `let` to declare variables. Avoid using `const`.\n\n> Why? Variables declared with `let` are easier to reason about than those declared with `var`. Variables are often reassigned in sketches, so it's helpful to default to `let`.\n\n```javascript\n// Bad.\nflower = '🌸';\nvar flower = '🌸';\nconst flower = '🌸';\n\n// Good.\nlet flower = '🌸';\n```\n\n* Use one `let` declaration per variable or assignment.\n\n> Why? It’s easier to read and to add new variable declarations.\n\n```javascript\n// Bad.\nlet positions = getPositions(),\n  startSearch = true,\n  dragonball = 'z';\n\n// Good.\nlet positions = getPositions();\nlet startSearch = true;\nlet dragonball = 'z';\n```\n\n* Assign variables where needed and place them in a reasonable place.\n\n> Why? `let` is block scoped and not function scoped.\n\n```javascript\n// Bad - unnecessary search.\nfunction getCharacter(name = 'default') {\n  let character = characters.find((c) => c.name === name);\n\n  if (name === 'default') {\n    return false;\n  }\n\n  if (character) {\n    return character;\n  }\n  \n  return false;\n}\n\n// Good.\nfunction getCharacter(name = 'default') {\n  if (name === 'default') {\n    return false;\n  }\n\n  let character = characters.find((c) => c.name === name);\n\n  if (character) {\n    return character;\n  }\n  \n  return false;\n}\n```\n\n* Avoid using unary increments and decrements (`++`, `--`).\n\n> Why? Unary increment and decrement statements are subject to [automatic semicolon insertion](https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion). This can cause silent errors with incrementing or decrementing values. It's also more expressive to update variables with statements like num `+= 1` instead of `num++`.\n\n```javascript\n// Bad.\nlet num = 1;\nnum++;\n--num;\n\n// Good.\nlet num = 1;\nnum += 1;\nnum -= 1;\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Strings\n\n* Use single quotes `''` for strings.\n\n```javascript\n// Bad.\nlet name = \"Hilma af Klint\";\n\n// Bad - template literals should contain interpolation or newlines.\nlet name = `Hilma af Klint`;\n\n// Good.\nlet name = 'Hilma af Klint';\n```\n\n* Don't concatenate strings that cause the line to go over 80 characters.\n\n> Why? Broken strings are hard to read and make code less searchable.\n\n```javascript\n// Bad.\nlet essay = 'You see us as you want to see us: \\\nin the simplest terms, in the most convenient definitions.';\n\n// Bad.\nlet essay = 'You see us as you want to see us: ' +\n  'in the simplest terms, in the most convenient definitions.';\n\n// Good.\nlet essay = 'You see us as you want to see us: in the simplest terms, in the most convenient definitions.';\n```\n\n* Use template strings instead of concatenation when needed.\n\n> Why? Template strings have a concise syntax. They also provide proper newlines and string interpolation features.\n\n```javascript\nlet name = 'Dave';\n\n// Bad.\ntext(name + ', this conversation can serve no purpose anymore. Goodbye.' + name, 0, 0);\n\n// Good.\ntext(`${name}, this conversation can serve no purpose anymore. Goodbye.`, 0, 0);\n```\n\n* Do not unnecessarily escape characters in strings.\n\n> Why? Backslashes harm readability.\n\n```javascript\n// Bad.\nlet bad = '\\'this\\' \\i\\s \\\"quoted\\\"';\n\n// Good.\nlet good = 'Air quotes make you look \"cool\".';\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Boolean Operators\n\n* Use `===` and `!==` over `==` and `!=`.\n\n* Don't use shortcuts for booleans.\n\n> Why? It's easier to understand for beginners.\n\n```javascript\n// Bad.\nif (mouseIsPressed) {\n  // ...\n}\n\n// Good.\nif (mouseIsPressed === true) {\n  // ...\n}\n\n// Bad.\nif (name) {\n  // ...\n}\n\n// Good.\nif (name !== '') {\n  // ...\n}\n\n// Bad.\nif (collection.length) {\n  // ...\n}\n\n// Good.\nif (collection.length > 0) {\n  // ...\n}\n```\n\n* Don't use `switch` statements unless it's necessary.\n\n* Use parentheses when mixing operators. The only exceptions are the arithmetic operators `+`, `-`, and `**`.\n\n> Why? It's easier to read and avoids subtle bugs.\n\n```javascript\n// Bad.\nlet huh = a && b < 0 || c > 0 || d + 1 === 0;\n\n// Good.\nlet huh = (a && b < 0) || c > 0 || (d + 1 === 0);\n\n// Bad.\nif (a || b && c) {\n  return d;\n}\n\n// Good.\nif (a || (b && c)) {\n  return d;\n}\n\n// Bad.\nlet what = a + b / c * d;\n\n// Good.\nlet what = a + (b / c) * d;\n```\n\n## Conditionals\n\n* Use braces with all multiline blocks.\n\n```javascript\n// Bad.\nif (mouseIsPressed === true)\n  circle(mouseX, mouseY, 50);\n\n// Better.\nif (mouseIsPressed === true) circle(mouseX, mouseY, 50);\n\n// Best.\nif (mouseIsPressed === true) {\n  circle(mouseX, mouseY, 50);\n}\n```\n\n* Put `else` on the same line as the preceding `if` block’s closing brace.\n\n```javascript\n// Bad.\nif (mouseIsPressed === true) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// Good.\nif (mouseIsPressed === true) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n```\n\n* Don't use an `else` block after an `if` block that always executes a `return` statement.\n\n```javascript\n// Bad.\nfunction mouseIsOnLeft() {\n  if (mouseX < width * 0.5) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Good.\nfunction mouseIsOnLeft() {\n  if (mouseX < width * 0.5) {\n    return true;\n  }\n\n  return false;\n}\n```\n\n* If a condition gets too long, place each (grouped) condition on a new line. The logical operator should begin the line.\n\n> Why? It's easier to read.\n\n```javascript\n// Bad.\nif ((number === 123 || letters === 'abc') && mouseIsPressed === true && keyIsPressed === true) {\n  doStuff();\n}\n\n// Good.\nif (\n  (number === 123 || letters === 'abc')\n  && mouseIsPressed === true\n  && keyIsPressed === true\n) {\n  doStuff();\n}\n```\n\n* Don't use selection operators in place of conditionals.\n\n  ```javascript\n  // Bad.\n  refrigeratorIsRunning && goCatchIt();\n\n  // Good.\n  if (refrigeratorIsRunning === true) {\n    goCatchIt();\n  }\n  ```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Iteration\n\n* Don’t use a `while` or `do-while` loops unless it's necessary. Use `for` loops to iterate a fixed number of times.\n\n```javascript\nlet numPetals = 7;\n\n// Bad.\nlet i = 0;\nwhile (i < numPetals) {\n  ellipse(0, 0, 20, 80);\n  rotate(PI / numPetals);\n  i += 1;\n}\n\n// Good.\nfor (let i = 0; i < numPetals; i += 1) {\n  ellipse(0, 0, 20, 80);\n  rotate(PI / numPetals);\n}\n```\n\n* Don’t use `for` loops to iterate over arrays.\n\n> Why? Pure functions are easier to reason about than side effects.\n\n> Use `forEach()` / `map()` / `every()` / `filter()` / `find()` / `findIndex()` / `reduce()` / `some()` / `...` to iterate over arrays. Use `Object.keys()` / `Object.values()` / `Object.entries()` to produce arrays for iterating over objects.\n\n```javascript\nlet diameters = [50, 40, 30, 20, 10];\n\n// Bad.\nfor (let i = 0; i < diameters.length; i += 1) {\n  circle(0, 0, diameters[i]);\n}\n\n// Bad.\nfor (let d of diameters) {\n  circle(0, 0, d);\n}\n\n// Good.\ndiameters.forEach((d) => circle(0, 0, d));\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Objects\n\n* Use the literal syntax for object creation.\n\n```javascript\n// Bad.\nlet ball = new Object();\n\n// Good.\nlet ball = {};\n```\n\n* Only quote properties that are invalid identifiers.\n\n> Why? It's easier to read and improves syntax highlighting. JavaScript engines also have an easier time optimizing for performance.\n\n```javascript\n// Bad.\nlet secretObject = {\n  'x': 100,\n  'y': 200,\n  'top-secret': 'classified',\n};\n\n// Good.\nlet secretObject = {\n  x: 3,\n  y: 4,\n  'top-secret': 'classified',\n};\n```\n\n* Use dot notation to access properties.\n\n```javascript\nlet turtle = {\n  name: 'Leonardo',\n  color: 'dodgerblue',\n  weapon: '🗡️',\n  food: '🍕',\n};\n\n// Bad.\nlet turtleName = turtle['name'];\n\n// Good.\nlet turtleName = turtle.name;\n```\n\n* Use bracket notation `[]` to access properties with a variable.\n\n```javascript\nlet turtle = {\n  name: 'Leonardo',\n  color: 'dodgerblue',\n  weapon: '🗡️',\n  food: '🍕',\n};\n\nfunction getProp(prop) {\n  return turtle[prop];\n}\n\nlet turtleName = getProp('name');\n```\n\n* Don't use leading commas.\n\n```javascript\n// Bad.\nlet mathematician = {\n    firstName: 'Ada'\n  , lastName: 'Lovelace'\n};\n\n// Good.\nlet mathematician = {\n  firstName: 'Ada',\n  lastName: 'Lovelace',\n};\n```\n\n* Add a trailing comma.\n\n```javascript\n// Bad.\nlet artist = {\n  firstName: 'Lauren',\n  lastName: 'McCarthy'\n};\n\n// Good.\nlet artist = {\n  firstName: 'Lauren',\n  lastName: 'McCarthy',\n};\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Arrays\n\n* Use the literal syntax for array creation.\n\n```javascript\n// Bad.\nlet images = new Array();\n\n// Good.\nlet images = [];\n```\n\n* Use [Array#push](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push) instead of direct assignment to add items to an array.\n\n```javascript\nlet lyrics = [];\n\n// Bad.\nlyrics[lyrics.length] = 'Little rough around the edges, but I keep it smooth';\n\n// Good.\nlyrics.push('Little rough around the edges, but I keep it smooth');\n```\n\n* Use the `slice()` method to copy arrays.\n\n```javascript\n// Bad.\nlet numbersCopy = [];\n\nfor (let i = 0; i < numbers.length; i += 1) {\n  numbersCopy[i] = numbers[i];\n}\n\n// Good.\nlet numbersCopy = numbers.slice();\n```\n\n* Write arrays on multiple lines when it improves readibility. Use line breaks after the opening bracket and before the closing bracket. Add a trailing comma.\n\n```javascript\n// Bad.\nlet matrix = [[1, 0, 0],\n                [0, 1, 0],\n                [0, 0, 1]];\n\n// Good.\nlet matrix = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\n// Also good.\nlet matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Functions\n\n* Use function declarations instead of named function expressions.\n\n> Why? Function declarations have some gotchas, but they are easier to understand for beginners.\n\n```javascript\n// Bad.\nlet foo = function () {\n  // ...\n};\n\n// Bad.\nlet foo = () => {\n  // ...\n};\n\n// Good.\nfunction foo() {\n  // ...\n}\n```\n\n* Use default parameter syntax. Don't mutate function arguments.\n\n```javascript\n// Bad.\nfunction createBall(diameter) {\n  diameter = diameter || 50;\n  // ...\n}\n\n// Good.\nfunction createBall(diameter = 50) {\n  // ...\n}\n```\n\n* Always put default parameters last.\n\n```javascript\n// Bad.\nfunction drawSpiral(angle = 90, length) {\n  // ...\n}\n\n// Good.\nfunction drawSpiral(length, angle = 90) {\n  // ...\n}\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Arrow Functions\n\n* Use arrow function notation for anonymous functions. Callbacks are a common case for this syntax.\n\n> Why? The syntax is more concise. It also creates a version of the function that executes in the context of `this`, which is often helpful.\n\n> Why not? If the anonymous function is complex, rewrite it as a declared function.\n\n```javascript\n// Bad.\nfunction setup() {\n  loadImage('assets/moonwalk.jpg', function (img) {\n    image(img, 0, 0);\n  });\n}\n\n\n// Good.\nfunction setup() {\n  loadImage('assets/moonwalk.jpg', (img) => {\n    image(img, 0, 0);\n  });\n}\n\n// Bad.\nfunction preload() {\n  loadImage('assets/moonwalk.jpg', (img) => {\n    // Complex preprocessing...\n  });\n}\n\n// Good.\nfunction preload() {\n  loadImage('assets/moonwalk.jpg', processImage);\n}\n\nfunction processImage(img) {\n  // Complex preprocessing...\n}\n```\n\n* Use the implicit return when possible. Omit braces if the function body returns a single statement without side effects. Otherwise, keep the braces and use a `return` statement.\n\n> Why? It's easier to read.\n\n```javascript\n// Bad.\n[1, 2, 3].map((number) => {\n  let squared = number ** 2;\n  `${number} squared is ${squared}.`;\n});\n\n// Bad.\n[1, 2, 3].map((number) => {\n  let squared = number ** 2;\n  return `${number} squared is ${squared}.`;\n});\n\n// Good.\n[1, 2, 3].map((number) => `${number} squared is ${number ** 2}.`);\n```\n\n* Always include parentheses around arguments.\n\n> Why? Doing so reduces bugs when changing parameters.\n\n```javascript\n// Bad.\n[1, 2, 3].map(number => number * number);\n\n// Good.\n[1, 2, 3].map((number) => number * number);\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Chaining\n\n* Use individual function calls instead of function chaining.\n\n> Why? To accommodate users who may not be familiar with the concept of function chaining.\n\n```javascript\n// Bad.\nfill(0)\n  .strokeWeight(6)\n  .textSize(20);\n\n// Bad.\nfill(0).strokeWeight(6).textSize(20);\n\n// Good.\nfill(0);\nstrokeWeight(6);\ntextSize(20);\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Classes\n\n* Always use `class`. Avoid manipulating `prototype` directly. The only exception is explaining how to [create libraries](./creating_libraries/).\n\n> Why? `class` syntax is more concise and easier to reason about.\n\n```javascript\n// Bad.\nfunction Mover(x, y, radius) {\n  this.x = x;\n  this.y = y;\n  this.radius = radius;\n}\n\nMover.prototype.update = function () {\n  this.x += 1;\n  this.y += 1;\n};\n\nMover.prototype.render = function () {\n  circle(this.x, this.y, 2 * this.radius);\n};\n\n// Good.\nclass Mover {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n\n  update() {\n    this.x += 1;\n    this.y += 1;\n  }\n\n  render() {\n    circle(this.x, this.y, 2 * this.radius);\n  }\n}\n```\n\n* Use `extends` for inheritance.\n\n```javascript\nclass RandomMover extends Mover {\n  update() {\n    this.x += random(-1, 1);\n    this.y += random(-1, 1);\n  }\n}\n```\n\n* Make sure that custom `toString()` methods don't cause side effects.\n\n```javascript\n// Bad.\nclass Mover {\n  // ...\n\n  toString() {\n    this.x += 1;\n    return `Mover at (${this.x}, ${this.y})`;\n  }\n}\n\n// Good.\nclass Mover {\n  // ...\n\n  toString() {\n    return `Mover at (${this.x}, ${this.y})`;\n  }\n}\n```\n\n* Don't write an empty constructor or one that only delegates to a parent class.\n\n> Why? Classes have a default constructor if one isn't specified.\n\n```javascript\n// Bad.\nclass Dot {\n  constructor() {}\n\n  render() {\n    circle(mouseX, mouseY, 50);\n  }\n}\n\n// Good.\nclass Dot {\n  render() {\n    circle(mouseX, mouseY, 50);\n  }\n}\n\n// Bad.\nclass DragonBall extends Ball {\n  constructor(x, y, d) {\n    super(x, y, d);\n  }\n}\n\n// Good.\nclass DragonBall extends Ball {\n  constructor(x, y, d, numStars) {\n    super(x, y, d);\n    this.numStars = numStars;\n  }\n}\n```\n\n* Avoid duplicate class members.\n\n> Why? Duplicate class member declarations prefer the last one. Having duplicates often means there's a bug.\n\n```javascript\n// Bad.\nclass Mover {\n  // ...\n\n  update() {\n    this.x += this.xspeed;\n    this.y += this.yspeed;\n  }\n\n  update() {\n    this.x = 0;\n    this.y = 0;\n  }\n}\n\n// Good.\nclass Mover {\n  // ...\n  \n  update() {\n    this.x += this.xspeed;\n    this.y += this.yspeed;\n  }\n\n  reset() {\n    this.x = 0;\n    this.y = 0;\n  }\n}\n```\n\n**[⬆ back to top](#table-of-contents)**\n\n## Assets\n\n* Always load assets from a folder called \"assets\".\n\n> Why? It models good project organization. It's also required for assets to load on the p5.js website. Place assets in the following folders to include them in our online documentation:\n\n* Examples: [src/data/examples/assets](https://github.com/processing/p5.js-website/tree/main/src/data/examples)\n* Reference Pages: [src/templates/pages/reference/assets](https://github.com/processing/p5.js-website/tree/main/src/templates/pages/reference/assets)\n* Learn Pages: [src/assets/learn](https://github.com/processing/p5.js-website/tree/main/src/assets/learn)\n\n```javascript\nlet img;\n\n// Bad.\nfunction preload() {\n  img = loadImage('moonwalk.jpg');\n}\n\n// Good.\nfunction preload() {\n  img = loadImage('assets/moonwalk.jpg');\n}\n```\n\n**[⬆ back to top](#table-of-contents)**\n"},"Friendly Errors System Contribution Guide\n":{"relativeUrl":"/contribute/fes_contribution_guide","description":"{/* An overview of the Friendly Error System codebase and a reference for developers. */}\n\n\n\nThe `core/friendly_errors` folder contains the code for the p5js’ Friendly Error Systems (FES) responsible for generating Friendly Error messages or Friendly Errors. You may have seen Friendly Error messages starting with “`🌸 p5.js says:`” in your console, supplementing default, browser-generated error messages.\n\nFES houses several functions responsible for generating Friendly Error messages for different types of errors. These functions gather errors from various locations, including error handling at file load errors and autoplay errors, parameter checking within the library, and other custom error handling implemented by the p5.js contributors.\n\nThis document starts with an overview of FES's main functions and their locations. In the following reference section, you will find full information (description, syntax, parameters, location) about these individual functions. In the last part of the document, you will find notes from our previous contributors (Development Notes) outlining known limitations of FES and possible future directions. Please take a look at the [Development Notes](#-development-notes) if you are considering contributing to FES!\n\n## Overview\n\nThe main functions for generating the Friendly Error messages are:\n\n* `p5._friendlyError()`: formats and prints (through `_report()`) an input message into Friendly Errors\n* `p5._validateParameters()`: validate received input values for the wrong type or missing value(s)\n* `p5._friendlyFileLoadError()`: guide users about errors related to file load functions\n* `p5._friendlyAutoplayError()`: guide users about errors related to the browser's autoplay policy\n\nHere is a diagram that outlines the location of all functions in FES and how they connect to others:\n\n![A diagram of the files used in FES and their uses](src/content/contributor-docs/images/fes.svg)\n\nIndividual files contain the following main FES functions:\n\n* `fes_core.js`: contains `_report()`, `_friendlyError()`, and `_friendlyAutoplayError(),` along with other helper functions for formatting and testing Friendly Errors.\n* `validate_params.js`: contains `_validateParameters()` along with other helper functions for parameter validation.\n* `file_errors.js`: contains `_friendlyFileLoadError() `and other helper functions for file load errors.\n* `browser_errors.js`: contains a list of browser errors that will be generated with the global error class of FES (`fes.globalErrors`).\n* `stacktrace.js`: contains the code to parse the error stack (borrowed from [stacktrace.js](https://github.com/stacktracejs/stacktrace.js)).\n\n## 📚 Reference: FES Functions\n\n### `_report()`\n\n#### Description\n\n`_report()` is the primary function that prints directly to the console with the output of the error helper message.\n\n**Note:** If `p5._fesLogger` is set ( i.e., we are running tests ), it will be used instead of `console.log`. This can be useful when we are running tests via Mocha. In this case, `_fesLogger` will let `_report` to pass an error message to Mocha as a string, which will be tested against the asserted string.\n\n#### Syntax\n\n```js\n_report(message);\n\n_report(message, func);\n\n_report(message, func, color);\n```\n\n#### Parameters\n\n```\n@param  {String}        message   Message to be printed\n@param  {String}        [func]    Name of function\n@param  {Number|String} [color]   CSS color code\n```\n\nThe `[func]` input is used to append a reference link to the end of the error message.\n\nThe `[color]` input is used to set the color property of the error message. This is not used in the current version of Friendly Error messages.\n\n#### Location\n\ncore/friendly\\_errors/fes\\_core.js\n\n### `_friendlyError()`\n\n#### Description\n\n`_friendlyError()` creates and prints a Friendly Error message. Any p5 function can call this function to offer a Friendly Error message.\n\n`_friendlyFileLoadError()` is inside the following functions:\n\n* `image/loading_displaying/loadImage()`\n* `io/files/loadFont()`\n* `io/files/loadTable()`\n* `io/files/loadJSON()`\n* `io/files/loadStrings()`\n* `io/files/loadXML()`\n* `io/files/loadBytes()`.\n\nThe call sequence to `_friendlyFileLoadError` looks something like this:\n\n```\n_friendlyFileLoadError\n  _report\n```\n\n#### Syntax\n\n```js\n_friendlyFileLoadError(errorType, filePath);\n```\n\n#### Parameters\n\n```\n@param  {Number}  errorType   Number of file load error type\n@param  {String}  filePath    Path to file caused the error\n```\n\nThe `errorType` input refers to the specific type of file load error as enumerated in `core/friendly_errors/file_errors.js`. File load errors in p5.js are categorized into various distinct cases. This categorization is designed to facilitate the delivery of precise and informative error messages corresponding to different error scenarios. For example, when it can't read the data in a font file, it can show a different error than it would when it tries to load a file that is too large to read.\n\n#### Examples\n\nFile Loading Error Example:\n\n```js\n/// missing font file\nlet myFont;\nfunction preload() {\n  myFont = loadFont('assets/OpenSans-Regular.ttf');\n}\nfunction setup() {\n  fill('#ED225D');\n  textFont(myFont);\n  textSize(36);\n  text('p5*js', 10, 50);\n}\nfunction draw() {}\n```\n\nFES will generate the following message in the console in addition to browser’s “unsupported” error:\n\n```\n🌸 p5.js says: It looks like there was a problem loading your font. Try checking if the file path (assets/OpenSans-Regular.ttf) is correct, hosting the file online, or running a local server.\n\n+ More info: https://github.com/processing/p5.js/wiki/Local-server\n```\n\n#### Location\n\n/friendly\\_errors/file\\_errors.js\n\n### `_friendlyAutoplayError()`\n\n#### Description\n\n`_friendlyAutoplayError()` is called internally if there is an error linked to playing a media (for example, a video), most likely due to the browser's autoplay policy.\n\nIt calls `translator()` to generate and print a Friendly Error message using key `fes.autoplay`. You can see all the available keys at `translations/en/translation.json`.\n\n#### Location\n\ncore/friendly\\_errors/fes\\_core.js\n\n### `_validateParameters()`\n\n#### Description\n\n`_validateParameters()` runs parameter validation by matching the input parameters with information from `docs/reference/data.json`, which is created from the function's inline documentation. It checks that a function call contains the correct number and the correct types of parameters.\n\nIt calls `translator()` to generate and print a Friendly Error message using key `fes.friendlyParamError.*`. You can see all the available keys at `translations/en/translation.json`.\n\nThis function can be called through `p5._validateParameters(FUNCT_NAME, ARGUMENTS)` or, `p5.prototype._validateParameters(FUNCT_NAME, ARGUMENTS)` inside the function that requires parameter validation. It is recommended to use the static version `p5._validateParameters`, for general purposes. `p5.prototype._validateParameters(FUNCT_NAME, ARGUMENTS)` mainly remained for debugging and unit testing.\n\n`_validateParameters()` function is inside these functions:\n\n* `accessibility/outputs`\n* `color/creating_reading`\n* `color/setting`\n* `core/environment`\n* `core/rendering`\n* `core/shape/2d_primitives`\n* `core/shape/attributes`\n* `core/shape/curves`\n* `core/shape/vertex`\n* `core/transform`\n* `data/p5.TypedDict`\n* `dom/dom`\n* `events/acceleration`\n* `events/keyboard`\n* `image/image`\n* `image/loading_displaying`\n* `image/p5.Image`\n* `image/pixel`\n* `io/files`\n* `math/calculation`\n* `math/random`\n* `typography/attributes`\n* `typography/loading_displaying`\n* `utilities/string_functions`\n* `webgl/3d_primitives`\n* `webgl/interaction`\n* `webgl/light`\n* `webgl/loading`\n* `webgl/material`\n* `webgl/p5.Camera`\n\nThe call sequence from `_validateParameters` looks something like this:\n\n```\nvalidateParameters\n   buildArgTypeCache\n      addType\n    lookupParamDoc\n    scoreOverload\n      testParamTypes\n      testParamType\n    getOverloadErrors\n    _friendlyParamError\n      ValidationError\n      report\n        friendlyWelcome\n```\n\n#### Syntax\n\n```js\n_validateParameters(func, args);\n```\n\n#### Parameters\n\n```\n@param  {String}  func    Name of the function being called\n@param  {Array}   args    User input arguments\n```\n\n#### Examples\n\nExample of a Missing Parameter:\n\n```js\narc(1, 1, 10.5, 10);\n```\n\nFES will generate the following message in the console:\n\n```\n🌸 p5.js says: [sketch.js, line 13] arc() was expecting at least 6 arguments, but received only 4. (http://p5js.org/reference/#/p5/arc)\n```\n\nExample of a type mismatch\n\n```js\narc(1, ',1', 10.5, 10, 0, Math.PI);\n```\n\nFES will generate the following message in the console:\n\n```\n🌸 p5.js says: [sketch.js, line 14] arc() was expecting Number for the first parameter, received string instead. (http://p5js.org/reference/#/p5/arc)\n```\n\n#### Location\n\ncore/friendly\\_errors/validate\\_params.js\n\n### `fesErrorMonitor()`\n\n#### Description\n\n`fesErrorMonitor()` monitors browser error messages to guess the source of the error and provide additional guidance to the users. This includes the stack trace,  which is a sequential list of the functions called in a program leading up to the point of the thrown error. Stack traces are useful for determining if an error is internal or caused by something the user called directly.\n\nIt calls `translator()` to generate and print a Friendly Error message using key `fes.globalErrors.*`. You can see all the available keys at `translations/en/translation.json`.\n\nHere is a comprehensive list of error messages generated through `fesErrorMonitor()`:\n\n* a Friendly Error message using key: `fes.globalErrors.syntax.*`, `fes.globalErrors.reference.*`, `fes.globalErrors.type.*`.\n* an \"internal library\" error message via `processStack()` using key: `fes.wrongPreload`, `fes.libraryError`.\n* a stacktrace message via `printFriendlyStack()` using key: `fes.globalErrors.stackTop`, `fes.globalErrors.stackSubseq`.\n* a spell-check message (from a reference error) via `handleMisspelling()` using key: `fes.misspelling`.\n\n`_fesErrorMonitor()` is automatically triggered by `error` events and unhandled promise rejections (`unhandledrejection` events) at `window`. However, it can be manually called in a catch block as follows:\n\n```js\ntry { someCode(); } catch(err) { p5._fesErrorMonitor(err); }\n```\n\nThe function currently works with a subset of `ReferenceError`, `SyntaxError`, and `TypeError`. You can find the complete list of supported errors in `browser_errors.js`.\n\nThe call sequence for `_fesErrorMonitor` roughly looks something like this:\n\n```\n _fesErrorMonitor\n     processStack\n       printFriendlyError\n     (if type of error is ReferenceError)\n       _handleMisspelling\n         computeEditDistance\n         _report\n       _report\n       printFriendlyStack\n     (if type of error is SyntaxError, TypeError, etc)\n       _report\n       printFriendlyStack\n```\n\n#### Syntax\n\n```js\nfesErrorMonitor(event);\n```\n\n#### Parameters\n\n```\n@param {*}  e     Error event\n```\n\n#### Examples\n\nInternal Error Example 1:\n\n```js\nfunction preload() {\n  // error in background() due to it being called in\n  // preload\n  background(200);\n}\n```\n\nFES will generate the following message in the console:\n\n```\n🌸 p5.js says: [sketch.js, line 8] An error with message \"Cannot read properties of undefined (reading 'background')\" occurred inside the p5js library when \"background\" was called. If not stated otherwise, it might be due to \"background\" being called from preload. Nothing besides load calls (loadImage, loadJSON, loadFont, loadStrings, etc.) should be inside the preload function. (http://p5js.org/reference/#/p5/preload)\n```\n\nInternal Error Example 2:\n\n```js\nfunction setup() {\n  cnv = createCanvas(200, 200);\n  cnv.mouseClicked();\n}\n```\n\nFES will generate the following message in the console:\n\n```js\n🌸 p5.js says: [sketch.js, line 12] An error with message \"Cannot read properties of undefined (reading 'bind')\" occurred inside the p5js library when mouseClicked was called. If not stated otherwise, it might be an issue with the arguments passed to mouseClicked. (http://p5js.org/reference/#/p5/mouseClicked)\n```\n\nExample of an Error (Scope):\n\n```js\nfunction setup() {\n  let b = 1;\n}\nfunction draw() {\n  b += 1;\n}\n```\n\nFES will generate the following message in the console:\n\n```\n🌸 p5.js says:\n\n[sketch.js, line 5] \"b\" is not defined in the current scope. If you have defined it in your code, you should check its scope, spelling, and letter-casing (JavaScript is case-sensitive).\n\n+ More info: https://p5js.org/examples/data-variable-scope.html\n```\n\nExample of an Error (Spelling):\n\n```js\nfunction setup() {\n  xolor(1, 2, 3);\n}\n```\n\nFES will generate the following message in the console:\n\n```\n🌸 p5.js says: [sketch.js, line 2] It seems that you may have accidentally written \"xolor\" instead of \"color\". Please correct it to color if you wish to use the function from p5.js. (http://p5js.org/reference/#/p5/color)\n```\n\n#### Location\n\ncore/friendly\\_errors/fes\\_core.js\n\n### `checkForUserDefinedFunctions()`\n\n#### Description\n\nChecks if any user-defined function (`setup()`, `draw()`, `mouseMoved()`, etc.) has been used with a capitalization mistake.\n\nIt calls `translator()` to generate and print a Friendly Error message using key `fes.checkUserDefinedFns`. You can see all the available keys at `translations/en/translation.json`.\n\n#### Syntax\n\n```js\ncheckForUserDefinedFunctions(context);\n```\n\n#### Parameters\n\n```\n@param {*} context  Current default context.\n                    Set to window in \"global mode\" and\n                    to a p5 instance in \"instance mode\"\n```\n\n#### Examples\n\n```js\nfunction preload() {\n  loadImage('myimage.png');\n}\n```\n\nFES will generate the following message in the console:\n\n```\n🌸 p5.js says: It seems that you may have accidentally written preLoad instead of preload. Please correct it if it's not intentional. (http://p5js.org/reference/#/p5/preload)\n```\n\n#### Location\n\n/friendly\\_errors/fes\\_core.js\n\n### `helpForMisusedAtTopLevelCode()`\n\n#### Description\n\n`helpForMisusedAtTopLevelCode()` is called by `fes_core.js` on window load to check for use of p5.js functions outside of `setup()` or `draw()`.\n\nIt calls `translator()` to generate and print a Friendly Error message using the key `fes.misusedTopLevel`. You can see all the available keys at `translations/en/translation.json`.\n\n#### Parameters\n\n```\n@param {*}        err    Error event\n@param {Boolean}  log    false\n```\n\n#### Location\n\n/friendly\\_errors/fes\\_core.js\n\n## 💌 Development Notes\n\n### Known Limitations\n\n#### False Positive versus False Negative Cases\n\nIn FES, you might encounter two types of errors: false positives and false negatives. Think of a false positive like a false alarm. It’s when FES warns you of an error, but your code is actually fine. On the other hand, a false negative is like missing a mistake. This happens when there’s an error in your code, but FES doesn’t alert you about it.\n\nIt's important to identify and fix these errors because they can save debugging time, make things less confusing, and make fixing real problems easier.\n\nIn certain less-than-ideal situations, the design of error handling may need to be chosen to eliminate either false positives or false negatives. If you have to choose, it’s usually better to eliminate false positives. This way, you avoid generating incorrect warnings that could distract or mislead our users.\n\n#### Limitations Related to `fes.GlobalErrors`\n\nFES can only detect overwritten global variables if they are declared using `const` or `var`. Variables declared with let go undetected. This limitation is due to the specific way `let` handles variable instantiation, and it currently cannot be resolved.\n\nThe functionality described under `fesErrorMonitor()` currently only works on the web editor or if running on a local server. For more details, see pull request \\[[#4730](https://github.com/processing/p5.js/pull/4730)].\n\n### Performance Issue with the FES\n\nBy default, FES is enabled for p5.js and disabled in `p5.min.js` to prevent FES functions from slowing down the process. The error-checking system can significantly slow down your code (up to \\~10x in some cases). See the [Friendly Error performance test](https://github.com/processing/p5.js-website/tree/main/src/assets/learn/performance/code/friendly-error-system).\n\nYou can disable the FES with one line of code at the top of your sketch:\n\n```js\np5.disableFriendlyErrors = true; // disables FES\nfunction setup() {\n  // Do setup stuff\n}\nfunction draw() {\n  // Do drawing stuff\n}\n```\n\nPlease note that this action will disable certain features of the FES that are known to reduce performance, such as argument checking. However, Friendly Error messages that do not impact performance will still be enabled. This includes providing detailed error messages if a file fails to load or warnings if you attempt to override p5.js functions in the global space.\n\n### Thoughts for Future Work\n\n* Decouple FES \\[[#5629](https://github.com/processing/p5.js/issues/5629)]\n* Eliminate false positive cases\n* Identify false negative cases\n* Add more unit tests for comprehensive test coverage\n\n- More intuitive, clear, and translatable messages. For more discussion about the internationalization of Friendly Errors, please take a look at [Friendly Errors i18n Book](https://almchung.github.io/p5-fes-i18n-book/en/).\n\n* Identify more common error types and generalize with FES (e.g. `bezierVertex()`, `quadraticVertex()` - required object not initiated; checking Number parameters positive for `nf()`, `nfc()`, `nfp()`, `nfs()`)\n\n## Conclusion\n\nIn the README document, we have outlined the structure of the `core/friendly_errors` folder. This section explains the organization and purpose of this folder, making it easier to navigate and understand. Additionally, for each function within this folder, we have provided a reference guide.\n\nIn the latter part of this documentation, we have included notes from previous contributors that discuss the current limitations of FES and potential areas for improvement in future development.\n\nAdditionally, we are excited to share insights from our community through the FES Survey conducted in 2021-2022. The findings are available in two formats:\n\n* [21-22 FES Survey Report Comic](https://almchung.github.io/p5jsFESsurvey/)\n* [21-22 FES Survey Full Report](https://observablehq.com/@almchung/p5-fes-21-survey).\n\n{/* TODO: uncomment when we publish the article below */}\n\n{/* If you're looking for ways to add Friendly Error messages to your methods, we recommend looking at the [How to add Friendly Error Messages](#). It takes you through the process of adding these error messages to your methods step-by-step. */}\n"},"🌸 p5.js Friendly Error System (FES)\n":{"relativeUrl":"/contribute/friendly_error_system","description":"{/* An overview of the system used by p5.js to provide errors in friendly language. */}\n\n\n\n## Overview\n\nThe Friendly Error System (FES, 🌸) aims to help new programmers by providing error messages in simple, friendly language. It supplements your browser's console error messages by adding an alternative description of the error and links to helpful references.\n\nThe FES prints messages in the console window, as seen in the [p5.js Web Editor] and your browser JavaScript console. The single minified file of p5 (p5.min.js) omits the FES.\n\n[p5.js Web Editor]: https://editor.p5js.org/\n\n## Lowering the Barriers to Debugging\n\nThe design of a tool should match the need of the people who will use it. As a tool that aims to lower the barriers to debugging, the design of FES is no exception.\n\nThe best way to evaluate our existing design is to hear directly from people using p5.js. We ran a community survey in 2021 to gather feedback and future wishes for Friendly Errors.\n\nWe believe the insights from our community members will be helpful for our contributors. You can see the results through the summary comic or the full report:\n\n* [21-22 FES Survey Report Comic]\n* [21-22 FES Survey Full Report]\n\n[21-22 FES Survey Report Comic]: https://almchung.github.io/p5jsFESsurvey/\n\n[21-22 FES Survey Full Report]: https://observablehq.com/@almchung/p5-fes-21-survey\n\n## Writing Friendly Error Messages\n\nHow to contribute to the p5.js library by writing and translating error messages?\n\nThe FES is a part of the p5.js' [internationalization] effort. We generate all FES messages' content through [i18next]-based `translator()` function. This dynamic error message generation happens for all languages, including English - the default language of the p5.js.\n\nWe welcome contributions from all around the world! 🌐\n\n[internationalization]: https://github.com/processing/p5.js/blob/main/contributor_docs/internationalization.md\n\n[i18next]: https://www.i18next.com/\n\n#### Writing Best Practices\n\nFES message writers should prioritize lowering the barrier of understanding error messages and increasing the accessibility of debugging process.\n\n[Friendly Errors i18n Book] discusses challenges and best practices for writing friendly error messages within the cross-cultural i18n context. Here are some points from the book:\n\n* Understand your audience: do not make assumptions about the audience of our error messages. Try to learn who is using our library and how they use it.\n* Keep language inclusive. We strive to make error messages \"friendly,\" what does it mean for you? Look for possible bias and harm in your language. Adhere to [p5.js Code of Conduct].\n* Use simple sentences whenever possible. Consider breaking your sentence into smaller blocks for best utilizing i18next's [interpolation] feature.\n* Prioritize cross-cultural communication and provide a great experience across languages. Avoid using figures of speech.\n* Introduce one technical concept or technical term at a time. Keep consistency in technical writing. Try to link one external resource written in a beginner-friendly language with plenty of short, practical examples.\n\n[Friendly Errors i18n Book]: https://almchung.github.io/p5-fes-i18n-book/\n\n[interpolation]: https://www.i18next.com/translation-function/interpolation\n\n[p5.js Code of Conduct]: https://github.com/processing/p5.js/blob/main/CODE_OF_CONDUCT.md#p5js-code-of-conduct\n\n[expert blind spots]: https://tilt.colostate.edu/TipsAndGuides/Tip/181\n\n[Friendly Errors i18n Book] is a public project, and you can contribute to the book through this separate [repo].\n\n[repo]: https://github.com/almchung/p5-fes-i18n-book\n\n#### Location of Translation Files\n\n`translator()` is based on i18next and imported from `src/core/internationalization.js`. It generates messages by looking up text data from a JSON translation file:\n\n```\ntranslations/{{detected locale code, default=en}}/translation.json\n```\n\nExample:\nIf the detected browser locale is Korean (language designator: `ko`), the `translator()` will read in translated text blocks from `translations/ko/translation.json`. Then `translator()` will assemble the text blocks into the final message.\n\nThe language designator can also include regional information, such as `es-PE` (Spanish from Peru).\n\n#### Structure of Translation Files\n\n`translation.json` has a [format used by i18next](https://www.i18next.com/misc/json-format).\n\nThe basic format of a translation file's item has a key and a value (message) in double quotation marks `\"\"`, closed by the curly brackets `{}`:\n\n```json\n{ \"key\": \"value\" }\n```\n\nFor example, we have a ASCII logo saved in this format:\n\n```json\n\"logo\": \"    _ \\n /\\\\| |/\\\\ \\n \\\\ ` ' /  \\n / , . \\\\  \\n \\\\/|_|\\\\/ \\n\\n\"\n```\n\ni18next supports interpolation, which allows us to pass a variable to generate a message dynamically. We use curly brackets twice `{{}}` to set a placeholder of the variable:\n\n```json\n\"greeting\": \"Hello, {{who}}!\"\n```\n\nHere, the key is `greeting`, and the variable name is `who`.\n\nTo dynamically generate this message, we will need to pass a value:\n\n```JavaScript\ntranslator('greeting', { who: 'everyone' } );\n```\n\nThe result generated by `translator` will look like this:\n\n```\nHello, everyone!\n```\n\nHere is an item from `fes`'s `fileLoadError` that demonstrates interpolation:\n\n```json\n\"image\": \"It looks like there was a problem loading your image. {{suggestion}}\"\n```\n\nTo dynamically generate the final message, the FES will call `translator()` with the key and a pre-generated `suggestion` value.\n\n```JavaScript\ntranslator('fes.fileLoadError.image', { suggestion });\n```\n\n#### How to Add or Modify Translation\n\nThe [internationalization doc] has a step-by-step guide on adding and modifying translation files.\n\n[internationalization doc]: https://github.com/processing/p5.js/blob/main/contributor_docs/internationalization.md\n\n## Understanding How FES Works\n\nIn this section, we will give an overview of how FES generates and displays messages. For more detailed information on the FES functions, please see our [FES Reference + Dev Notes].\n\n[FES Reference + Dev Notes]: https://github.com/processing/p5.js/tree/main/src/core/friendly_errors#fes-reference-and-notes-from-developers\n\n#### Overview\n\np5.js calls the FES from multiple locations for different situations, when:\n\n* The browser throws an error.\n* The user code calls a function from the p5.js API.\n* Other custom cases where the user would benefit from a help message.\n\n#### FES Code Location\n\nYou can find the core components of the FES inside:\n`src/core/friendly_errors`.\nYou can find the translation files used by the `translator()` inside:\n`translations/`.\n\n#### FES Message Generators\n\nThese functions are mainly responsible for catching errors and generating FES messages:\n\n* [`_friendlyFileLoadError()`] catches file loading errors.\n* [`_validateParameters()`] checks a p5.js function’s input parameters based on inline documents.\n* \\[`_fesErrorMonitor()`] handles global errors.\n\nFor full reference, please see our [Dev Notes].\n\n[`_friendlyFileLoadError()`]: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_friendlyerror\n\n[`_validateParameters()`]: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#_validateparameters\n\n[`_fesErrorMontitor()`]: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#feserrormonitor\n\n[Dev Notes]: https://github.com/processing/p5.js/blob/main/contributor_docs/fes_contribution_guide.md#-development-notes\n\n#### FES Message Displayer\n\n`fes_core.js/_friendlyError()` prints generated friendly error messages in the console. For example:\n\n```JavaScript\np5._friendlyError(\n  translator('fes.globalErrors.type.notfunc', translationObj)\n);\n```\n\nThis function can be called anywhere in p5.\n\n## Turning Off the FES\n\nThere may be cases where you want to [disable the FES for performance].\n\n`p5.disableFriendlyErrors` allows you to turn off the FES when set to `true`.\n\nExample:\n\n```JavaScript\np5.disableFriendlyErrors = true;\n\nfunction setup() {\n  createCanvas(100, 50);\n}\n```\n\nThe single minified file of p5 (i.e., p5.min.js) automatically omits the FES.\n\n[disable the FES for performance]: https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes\n"},"How to add Friendly Error Messages\n":{"relativeUrl":"/contribute/how-to-add-friendly-error-messages","description":"{/* Looking for a way to support Friendly Errors in your new method? Follow this step-by-step guide! */}\n\n\n\nThis guide walks you through the steps to write Friendly Error (FE) messages using the Friendly Error System (FES, 🌸). If your new method supports custom error handling or outputs custom logs for the user, you may want to write FE messages for it. All these messages are dynamically generated through the [i18next](https://www.i18next.com/)-based `translator()` method, which allows p5.js to provide translations of the error messages matching the user environment.\n\n## ❗️No translations in `p5.min.js`\n\n* We've integrated \\[i18next] into our codebase. However, its usage is limited to the unminified build of p5.js. The minified version, `p5.min.js`, includes only the basic framework of our internationalization code without actual implementation.\n* In both the Browserify build task and `src/core/init.js`, there is specific logic to avoid loading or setting up translations in the minified build. As a result, adding translations does not affect the size of `p5.min.js`.\n\n## Prerequisites\n\nBefore we begin, identify which one of the following cases describes your case best:\n\n* You are adding a new method that requires a specific number and types of arguments.\n  * Go to [✅Adding Parameter Validation Using FES](#-adding-parameter-validation-using-fes).\n* Your method involves loading a type of file and you need to catch errors specific to loading files.\n  * Go to [📥 Adding File Loading Errors Using FES](#-handling-file-loading-error-messages-with-fes).\n* You have written code that detects when an error has occurred and you want to show a Friendly Error.\n  * Go to [🐈 Adding Library Error Messages Using FES](#-adding-library-error-messages-using-fes).\n\n## ✅ Adding parameter validation using FES\n\n### Step 1 – Double-check your inline documentation\n\nFirst, ensure your method has [inline documentation](https://github.com/processing/p5.js/blob/main/contributor_docs/contributing_to_the_p5.js_reference/) with the full list of your parameters.\n\nFor example, the `circle()` method has the following inline documentation that starts with a description of the method, followed by a parameter list, and then code for an example:\n\n```\n/**\n * Draws a circle on the canvas. A circle is a round shape. Every point on the\n * edge of a circle is the same distance from its center. By default, the first\n * two parameters set the location of the center of the circle. The third\n * parameter sets the shape's width and height (diameter). The origin may be\n * changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.\n *\n * @method circle\n * @param  {Number} x  x-coordinate of the center of the circle.\n * @param  {Number} y  y-coordinate of the center of the circle.\n * @param  {Number} d  diameter of the circle.\n * @chainable\n * @example\n * <div>\n * <code>\n * circle(30, 30, 20);\n * describe('A white circle with black outline in the middle of a gray canvas.');\n * </code>\n * </div>\n *\n */\n```\n\nFrom the above example, FES will look for the parameter list to validate arguments:\n\n```\n * @method circle\n * @param  {Number} x  x-coordinate of the center of the circle.\n * @param  {Number} y  y-coordinate of the center of the circle.\n * @param  {Number} d  diameter of the circle.\n```\n\n### Step 2 – Call `p5._validateParameters()`\n\nNow go back to the implementation of your method and call `validate_params()` following the format: `p5._validateParameters('[name of your method]', arguments);`. \n\nFor example, the following code will validate arguments and produce a FE message for `circle()`:\n\n```js\np5._validateParameters('circle', arguments);\n```\n\nThis is usually called before anything else happens in the method to avoid going any further if the provided arguments don't match our expectations. For example, it is called on the first line of the `circle()` method:\n\n```js\np5.prototype.circle = function() {\n  p5._validateParameters('circle', arguments);\n  const args = Array.prototype.slice.call(arguments, 0, 2);\n  args.push(arguments[2]);\n  args.push(arguments[2]);\n  return this._renderEllipse(...args);\n};\n```\n\n### Step 3 – Build and test your code for typical cases\n\nTo see parameter validation in action, rebuild `p5.js` using `npm run build`.  \n\nTo test your code, find `/lib/empty-example/index.html` and replace the script `../p5.min.js` with `../p5.js`, as seen in the below example:\n\n```js\n<script src=\"../p5.js\"></script>\n```\n\nNote that  `lib/p5.min.js` doesn’t support FE messages, so test using `lib/p5.js` instead.\n\nThen, edit `/lib/empty-example/sketch.js` to test typical parameter error cases:\n\n1. Missing argument(s)\n2. Wrong number of argument(s)\n3. Wrong type(s) of arguments\n\nHere is an example to test expressions for the `circle()` method:\n\n```js\n// Missing arguments\ncircle(100);\n// Wrong number of arguments (more than required)\n// Notice this code still successfully draws a circle.\ncircle(100, 100, 100, 1000);\n// Wrong type(s) of argument(s)\ncircle(100, 100, 'hello');\n```\n\nThe code above should generate the following FE messages:\n\n```\n🌸 p5.js says: [sketch.js, line 9] circle() was expecting at least 3 arguments, but received only 1. (http://p5js.org/reference/#/p5/circle)\n🌸 p5.js says: [sketch.js, line 14] circle() was expecting no more than 3 arguments, but received 4. (http://p5js.org/reference/#/p5/circle)\n🌸 p5.js says: [sketch.js, line 12] circle() was expecting Number for the third parameter, received string instead. (http://p5js.org/reference/#/p5/circle)\n```\n\nCongratulations 🎈! You are now done adding parameter validation for your new method.\n\n## 📥 Handling file loading error messages with FES\n\n### Step 1 – Check the list of file loading error cases<a id=\"step-1\" />\n\nFile load errors are divided into a number of distinct cases to provide as helpful a message as possible when the error occurs. This lets p5.js show separate errors in different situations. For example, when it can't read the data in a font file, it will show a different error than it would when it tries to load a file that is too large to read.\n\nThese cases are each given their own number and can be found at the top of the `core/friendly_errors/file_errors.js` file.\n\nWhen you are looking to add a file loading error, first, look at `fileLoadErrorCases` from `core/friendly_errors/file_errors.js` to see if there is an existing case that can be applied to your case.\n\n \n\nFor example, you may be loading a string-based file. This corresponds to `case 3` from `fileLoadErrorCases`:\n\n```js\ncase 3:\n  return {\n    message: translator('fes.fileLoadError.strings', {\n      suggestion\n    }),\n    method: 'loadStrings'\n  };\n```\n\nIf there is already a number associated with the scenario you are handling, remember the case number, and skip ahead to [**Step 4**](#step-4). If you can’t find a matching case from `fileLoadErrorCases`,  please go to [**Step 2**](#step-2) to create a new case.\n\n### Step 2 – Discuss adding a new error case on the issue board<a id=\"step-2\" />\n\nNext, you will file an issue ticket to discuss creating a new case or confirm your case is not a duplicate of the existing cases. Write a short paragraph describing your new method and the scenario where a user will run into this particular file load error. Then write another short paragraph describing error handling in your method and what type of file it loads.\n\nGo to the [issue board](https://github.com/processing/p5.js/issues), press the \"New Issue\" button, and then choose the \"Issue: 💡 Existing Feature Enhancement\" option. An empty form should appear.\n\nAdd a title along the lines of “Adding a new case to `fileLoadErrrorCases`: \\[a high-level description of your file load error case].” For the “Increasing access” section, enter a short paragraph on the typical scenario you prepared at the beginning of this step.\n\nThen, check the “Friendly Errors” box for the “Most appropriate sub-area of p5.js?” question. Lastly, for the “Feature enhancement details” section, enter your paragraph detailing your error handling and what file types it loads.\n\n### Step 3 – Add a new case to `fileLoadErrorCases`<a id=\"step-3\" />\n\nAfter confirming with the maintainers, you are ready to add a new case to `fileLoadErrorCases`. Inside `fileLoadErrorCases`’s `switch` statement, go to the end of the case list and add your new case following the below format:\n\n```\ncase {{next available case number}}:\n  return {\n    message: translator('fes.fileLoadError.{{tag name}}', {\n      suggestion\n    }),\n    method: '{{name of your method}}'\n  };\n```\n\nIn the example above, anything in double angle brackets (`{{}}`) is something that you should replace. For instance, if the previous case number was 11, your code should start with `case 12:` with no double braces in your final code. \n\n### Step 4 – Call `p5._friendlyFileLoadError()`<a id=\"step-4\" />\n\nAfter adding your case, you can now call `p5._friendlyFileLoadError([case number], [file path])` inside your error handling statements.\n\nFor example, please take a look at `loadStrings()` method loading a string-based file (which corresponds to `case 3` from `fileLoadErrorCases`). The  `loadStrings()` method uses [`httpDo.call()`](https://p5js.org/reference/#/p5/httpDo) with a custom callback method that is executed in the case of a file error:\n\n```js\np5.prototype.httpDo.call(\n  this,\n  args[0],\n  'GET',\n  'text',\n  data => {\n    // [... code omitted ...]\n  },\n  function(err) {\n    // Error handling\n    p5._friendlyFileLoadError(3, args[0]);\n    // [... code omitted ...]\n  }\n );\n```\n\nWe can see how the error callback function calls `p5._friendlyFileLoadError(3, [the first argument, which is a file path])` to generate the following FE message:\n\n```\n🌸 p5.js says: It looks like there was a problem loading your text file. Try checking if the file path (assets/wrongname.txt) is correct, hosting the file online, or running a local server.\n+ More info: https://github.com/processing/p5.js/wiki/Local-server\n```\n\nCongratulations 🎈! You are now done implementing FE for your method with file loading.\n\n## 🐈 Adding Library Error Messages Using FES\n\n### Step 1 – Write code to detect when an error has occurred\n\nFirst, look for typical error cases that users may run into using your method and create a logic to catch these cases. Also, if applicable, consider providing fail-safes such as using default values for missing parameters. Identify the cases where FE messages would be helpful for the users.\n\n[This guide from MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling) provides a good overview of options for control flow and JavaScript’s native error handling constructs.\n\n\\\\\n\n### Step 2 – Call `p5._friendlyError()`\n\nTo generate FE messages, all you need to do is call `p5._friendlyError()` inside your error handling statements following the format: `p5._friendlyError('[custom message]', '[method name]');`. Replace everything inside (and including) the square brackets with your own values.\n\nFor example, the following code will produce a FE message for `bezierVertex()`:\n\n```js\np5._friendlyError(\n  'vertex() must be used once before calling bezierVertex()',\n  'bezierVertex'\n);\n```\n\nThis should generate the following FE messages:\n\n```\n🌸 p5.js says: [sketch.js, line 19] An error with the message \"vertex() must be used once before calling bezierVertex()\" occurred inside the p5js library when bezierVertex was called. If not stated otherwise, it might be an issue with the arguments passed to bezierVertex. (http://p5js.org/reference/#/p5/bezierVertex) \n```\n\nCongratulations 🎈! You are now done adding library error messages for your method.\n\n## ✏️ Writing Friendly Error Messages for international audiences\n\nFES message writers should prioritize lowering the barrier of understanding error messages and increasing the accessibility of the debugging process. Here is one example:\n\n```\n🌸 p5.js says: [sketch.js, line 7] circle() was expecting at least 3 arguments, but received only 1. (http://p5js.org/reference/#/p5/circle) \n```\n\nThe above parameter validation message will be shown in Korean if the browser is set to `ko-KR` (Korean) locale:\n\n```\n🌸 p5.js says: [sketch.js, 줄7] 최소 3개의 인수(argument)를 받는 함수 circle()에 인수가 1개만 입력되었습니다. (http://p5js.org/reference/#/p5/circle) \n```\n\n[Friendly Errors i18n Book](https://almchung.github.io/p5-fes-i18n-book/) discusses challenges and best practices for writing Friendly Error messages within the cross-cultural i18n context. Here are the main points from the book:\n\n* Understand your audience: do not make assumptions about the audience of our error messages. Try to learn who is using our library and how they use it.\n* Keep language inclusive. We strive to make error messages \"friendly,\" what does it mean for you? Look for possible bias and harm in your language.\n* Use simple sentences whenever possible. Consider breaking your sentence into smaller blocks to best utilize [i18next's interpolation feature.](https://www.i18next.com/translation-function/interpolation)\n* Prioritize cross-cultural communication and provide a great experience across languages. Avoid using figures of speech.\n* Introduce one technical concept or technical term at a time. Keep consistency in technical writing. Try to link one external resource written in a beginner-friendly language with plenty of short, practical examples.\n\n[Friendly Errors i18n Book](https://almchung.github.io/p5-fes-i18n-book/) is a public project, and you can contribute to the book through [this separate repo.](https://github.com/almchung/p5-fes-i18n-book)\n\n## 🔍 Optional: Unit tests\n\nPlease consider adding unit tests for your new FE messages to detect bugs early and to ensure your code is delivering intended messages to our users. Also, unit tests are a good way to make sure other contributor’s new code does not accidentally break or interfere with the functionality of your code. Here are a few good guides on unit testing:\n\n* [Unit Testing and Test Driven Development](https://docs.google.com/document/d/1iw60L1abRJZDn1zUViO9A0j6Fco4yFoQ9LXIlEEroN8/edit?usp=sharing) by Andy Timmons\n* [Contributors Doc: Unit Testing](https://github.com/processing/p5.js/blob/main/contributor_docs/unit_testing/)\n\nExample:\n\n```js\nsuite('validateParameters: multi-format', function() {\n  test('color(): optional parameter, incorrect type', function() {\n    assert.validationError(function() {\n      p5._validateParameters('color', [0, 0, 0, 'A']);\n    });\n  });\n}\n```\n\n## Conclusion\n\nIn this guide, we have provided step-by-step instructions for adding FE messages for several different cases, which include: \n\n* adding parameter validation, \n* handling file loading errors, and \n* adding library error messages to a method.\n\nAdditionally, we are excited to share insights from our community through the FES Survey conducted in 2021-2022. The findings are available in two formats:\n\n* [21-22 FES Survey Report Comic](https://almchung.github.io/p5jsFESsurvey/)\n* [21-22 FES Survey Full Report](https://observablehq.com/@almchung/p5-fes-21-survey)\n\nFor more in-depth information about the design and technical aspects of FES, please refer to the [FES README document](https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system/). This document provides detailed explanations and development notes, which are beneficial for those seeking a deeper understanding of FES.\n"},"Release process\n":{"relativeUrl":"/contribute/release_process","description":"{/* How all the updates on GitHub get turned into a new version of the library. */}\n\n\n\n## Approach\n\n* We follow the [semver](https://semver.org/) versioning pattern, which means we follow this versioning pattern: `MAJOR:MINOR:PATCH`.\n\n## Requirements\n\n* Git, node.js and NPM installed on your system\n* You are able to build the library and have push access to the remote repository\n* Secret `NPM_TOKEN` value is set on the remote repository\n* Secret `ACCESS_TOKEN` value is set on the remote repository\n\n## Security tokens\n\nFor the release steps to run fully, two [repository secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository) must be set as below.\n\n* `NPM_TOKEN` can be created by following the steps [here](https://docs.npmjs.com/creating-and-viewing-access-tokens) to create a read and publish token. The user the token belongs to must have publish access to the project on NPM.\n* `ACCESS_TOKEN` is a personal access token for a user that has access to `p5.js`, `p5.js-website`, and `p5.js-release` repositories. The token can be generated using the steps [here](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) and for scopes, choose only `repo` and `workflow`. It is recommended to use an organization specific account for this (ie. not from a personal account) and limit the account's write access to only the required repositories.\n\n## Usage\n\n```sh\n$ git checkout main\n$ npm version [major|minor|patch] # Choose the appropriate version tag\n$ git push origin main\n$ git push origin v1.4.2 # Replace the version number with the one just created above\n```\n\nThe actual release steps are all run on GitHub Actions CI.\n\n## Monitor and check results\n\nOnce the above commands have been executed, the build and release action can be monitored from the [\"Actions\" tab](https://github.com/processing/p5.js/actions) on the p5.js GitHub repo page (look for a job that says \"New p5.js release\"), clicking into the job can give a more detailed job log of what's running.\n\n![Screenshot of GitHub action running the \"New p5.js release\" job](src/content/contributor-docs/images/release-action.png)\n\nOnce the job has completed, the library will have been released on GitHub and NPM. Check the [release](https://github.com/processing/p5.js/releases) and [NPM](https://www.npmjs.com/package/p5) pages to see that the latest version is released. You should view the draft release on GitHub, make changes to changelog if necessary, then publish the release.\n\nThe website will be updated as soon as its own build and deploy job is completed, this can also be monitored in the relevant [\"Actions\" page](https://github.com/processing/p5.js-website/actions) if desired, and after that check the [\"Downloads\" page](https://p5js.org/download/) on the website for the latest version number.\n\nCDNs will take a bit more time (a day or two) to update but they will automatically pull from NPM upon release so no specific action is required.\n\n***\n\n## What's actually happening\n\nThe GitHub Action [\"New p5.js release\"](../.github/workflows/release.yml) is triggered on a tag that matches the pattern `v*.*.*` which is created by the `npm version ___` command.\n\nOnce triggered, it will run the following steps:\n\n1. Clone the repository, setup node.js, extract version number, install dependencies with `npm`, and run test with `npm test`.\n2. Create the release files that will be uploaded to GitHub releases.\n3. Create a release on GitHub and publish latest version on NPM.\n4. Update website files\n   1. Clone the website repository\n   2. Copy `data.json` and `data.min.json` to the right location\n   3. Copy `p5.min.js` and `p5.sound.min.js` to the right location\n   4. Update `data.yml` file with latest version number\n   5. Update `en.json` file based on `data.min.json`\n   6. Commit and push the changes back to the website repository\n5. Update Bower files\n   1. Clone the Bower release repository\n   2. Copy all libraries files to the right location\n   3. Commit and push the changes back to the website repository\n\nIn principle, we try to concentrate as many steps as possible to be run in one place, ie. in the CI environment. If a new step that is only run on release is required, it should probably be defined in the CI workflow and not as part of the build configuration.\n\n## Testing\n\nAs the release steps are run in CI, testing them can be difficult. Using [act](https://github.com/nektos/act) to test running of the steps locally is possible (and was how they were tested while being developed) but require some temporary modifications to the workflow definition, we'll roughly document here as the precise steps will likely change over time.\n\nThe test steps will not run because not all system requirements are present to run the mocha Chrome tests. Some system dependencies will likely be needed to be installed with `apt` before setting up the rest of the environment. Keep an eye on the error messages which should give some information on what packages are missing.\n\nThe steps concerning pushing changes to remote repositories should be commented out to avoid accidentally pushing unintended changes.\n"},"Steward Guidelines\n":{"relativeUrl":"/contribute/steward_guidelines","description":"{/* Learn about how to manage and review contributions to p5.js. */}\n\n\n\nWhether you have just joined us as a steward, are a seasoned maintainer of p5.js, or are somewhere in between, this guide contains information as well as tips and tricks that will help you effectively contribute to p5.js. Most of what is written here are guidelines unless otherwise stated, which means you can adapt the practices shown here to suit your workflow.\n\n## Table of Contents\n\n* [Issues](steward_guidelines.md#issues)\n  * [Bug report](steward_guidelines.md#bug-report)\n  * [Feature request](steward_guidelines.md#feature-request)\n  * [Feature enhancement](steward_guidelines.md#feature-enhancement)\n  * [Discussion](steward_guidelines.md#discussion)\n* [Pull Requests](steward_guidelines.md#pull-requests)\n  * [Simple fix](steward_guidelines.md#simple-fix)\n  * [Bug fix](steward_guidelines.md#bug-fix)\n  * [New feature/feature enhancement](steward_guidelines.md#new-feature-feature-enhancement)\n  * [Dependabot](steward_guidelines.md#dependabot)\n* [Build Process](steward_guidelines.md#build-process)\n  * [Main build task](steward_guidelines.md#main-build-task)\n  * [Miscellaneous tasks](steward_guidelines.md#miscellaneous-tasks)\n* [Release Process](steward_guidelines.md#release-process)\n* [Tips & Tricks](steward_guidelines.md#tips--tricks)\n  * [Reply templates](steward_guidelines.md#reply-templates)\n  * [GitHub CLI](steward_guidelines.md#github-cli)\n  * [Managing notifications](steward_guidelines.md#managing-notifications)\n\n***\n\n## Issues\n\nWe encourage most source code contributions to start with an issue, and as such, issues are the place where most of the discussions will take place. The steps to take when reviewing an issue will depend on what kind of issue it is. The repo uses [GitHub issue templates](https://github.com/processing/p5.js/blob/main/.github/ISSUE_TEMPLATE) in order to better organize different kinds of issues and encourage issue authors to provide all relevant information about their problems. The first step in reviewing the issue will often be looking through the filled-out template and determining if you need additional information (e.g., because some fields weren't filled in or the incorrect template was used).\n\n### Bug report\n\nBug report issues should use the \"Found a bug\" issue template. The following workflow is typical for addressing bug reports:\n\n1. Replicate the bug\n   * The goal of the template is to provide enough information for a reviewer to attempt to replicate the bug in question.\n   * If the reported bug is not relevant to the repo it is opened in (p5.js, p5.js-website, or otherwise):\n     * Transfer the issue to the relevant repo if you have access to it.\n     * Otherwise, leave a comment about where the bug report should be filed (with a direct link provided) and close the issue.\n   * The first step in reviewing a bug report is to see if enough information is provided for a bug replication, and if so, attempt to replicate the bug as described.\n2. If the bug can be replicated:\n   * Some discussion may be required to determine the best way to fix a particular bug. Sometimes, it may be straightforward; sometimes, it may be tricky. Please refer to [p5.js' design principles](./contributor_guidelines.md#software-design-principles) when making this decision on a case-by-case basis.\n   * If the issue author indicated in the issue they are willing to contribute a fix:\n     * Approve the issue for fixing by the issue author by leaving a comment and assigning them to the issue. Use the cog button on the right side next to \"Assignee\".\n   * If the issue author does not wish to contribute a fix:\n     * Leave a comment recognizing the bug is replicable.\n     * Attempt to fix yourself or add the `help wanted` label to signal an issue needing a fix.\n3. If the bug cannot be replicated:\n   * Ask for additional info if not already provided in the template (p5.js version, browser version, OS version, etc.).\n   * If your testing environment differs from what is reported in the issue (e.g., a different browser or OS):\n     * Leave a comment saying you are not able to replicate in your specific environment.\n     * Add a `help wanted` label to the issue and ask for someone else with the setup specified in the issue to try to replicate the bug.\n   * Sometimes, bugs only occur when using the web editor and not when testing locally. In this case, the issue should be redirected to the [web editor repo](https://github.com/processing/p5.js-web-editor).\n   * If replication is possible later, go back to step 2.\n4. If the bug stems from the code the user provided in the bug report and not p5.js' behavior:\n   * Determine if p5.js' documentation, code implementation, or friendly error system can be improved to prevent the same mistake from being made.\n   * Kindly redirect any further questions to the [forum](https://discourse.processing.org/) or [Discord](https://discord.com/invite/SHQ8dH25r9) and close the issue if no further changes are to be made to p5.js.\n\n### Feature request\n\nFeature request issues should use the \"New Feature Request\" issue template. The following workflow is typical for addressing feature requests:\n\n1. As part of p5.js' commitment to increase access, a feature request must make a case for how it increases access of p5.js to communities that are historically marginalized in the field. More details are available [here](access/).\n   * If a feature request does not have the \"Increasing Access\" field sufficiently filled out, you can ask the issue author how the feature increases access.\n   * The access statement of a feature can be provided by a different member of the community, including the issue reviewers.\n2. The new feature request can be assessed for inclusion based on the following criteria.\n   * Does the feature fit into the project scope and [design principles](design_principles/) of p5.js?\n     * For example, a request to add a new drawing primitive shape may be considered, but a request to adopt a browser-based IOT protocol will likely be out of scope.\n     * Overall, the scope of p5.js should be relatively narrow in order to avoid excessive bloat from rarely used features.\n     * If a feature does not fit into the scope of p5.js, suggest that the issue author implement the feature as as an addon library.\n     * If it is unclear whether or not it fits, it can be a good idea to suggest making an addon library as a proof-of-concept. This helps give users a way to use the feature, provides a much more concrete example of its usage and importance, and does not necessarily need to be as complete of a solution as a fully integrated feature. It can be integrated into the core of p5.js later if appropriate.\n   * Is the feature likely to cause a breaking change?\n     * Will it conflict with existing p5.js functions and variables?\n     * Will it conflict with typical sketches already written for p5.js?\n     * Features that are likely to cause conflicts such as  the ones above  are  considered breaking changes. Without a [major version release](https://docs.npmjs.com/about-semantic-versioning), we should not make breaking changes to p5.js.\n   * Can the proposed new feature be achieved using existing functionalities already in p5.js, relatively simple native JavaScript code, or existing easy-to-use libraries?\n     * For example, instead of providing a p5.js function to join an array of strings such as `join([\"Hello\", \"world!\"])`, the native JavaScript `[\"Hello\", \"world!\"].join()` should be preferred instead.\n3. If the access requirement and other considerations have been fulfilled, at least two stewards or maintainers must approve the new feature request before work should begin toward a PR. The PR review process for new features is documented below.\n\n### Feature enhancement\n\nFeature enhancement issues should use the \"Existing Feature Enhancement\" issue template. The process is very similar to new feature requests. The difference between a new feature request and feature enhancement can be blurry sometimes. Feature enhancement mainly deals with existing functions of p5.js while a new feature request could be requesting entirely new functions to be added.\n\n1. Similar to new feature requests, feature enhancement should only be accepted if they increase access to p5.js. Please see point 1 of [section above](steward_guidelines.md#feature-request).\n2. Inclusion criteria for feature enhancements are similar to those for feature requests, but particular attention should be paid to potential breaking changes.\n   * If modifying existing functions, all previous valid and documented function signatures must behave in the same way.\n3. Feature enhancements must be approved by at least one steward or maintainer before work should begin toward a PR. The PR review process for feature enhancement is documented below.\n\n### Discussion\n\nThis type of issue has a minimal template (\"Discussion\") and should be used to gather feedback around a topic in general before coalescing it into something more specific, like a feature request. These sorts of discussion issues can be closed when the conversation finishes and the resulting more specific issues have been created:\n\n* If an issue is opened as a discussion but should be, for example, a bug report, the correct label should be applied and the \"discussion\" label removed. Additional info about the bug should also be requested from the author if not already included.\n* If an issue is opened as a discussion but isn't relevant to source code contribution or otherwise relevant to the GitHub repositories/contribution process/contribution community, they should be redirected to the forum or Discord and the issue closed.\n* If relevant, additional labels should be added to discussion issues to further signal what type of discussion it is at a glance.\n\n***\n\n## Pull Requests\n\nAlmost all code contributions to the p5.js repositories happen through pull requests. Stewards and maintainers may have push access to the repositories but are still encouraged to follow the same issue > PR > review process when contributing code. Here are the steps to review a PR:\n\n* Pull request template can be found [here](https://github.com/processing/p5.js/blob/main/.github/PULL_REQUEST_TEMPLATE/).\n* Almost all pull requests must have associated issues opened and discussed first, meaning the relevant [issue workflow](steward_guidelines.md#issues) must have been followed first before a PR should be reviewed by any steward or maintainer.\n  * The only instances where this does not apply are very minor typo fixes, which do not require an open issue and can be merged by anyone with merge access to the repo, even if they are not stewards of a particular area.\n  * While this exception exists, we will apply it in practice only while contributors are still encouraged to open new issues first. In other words, if in doubt about whether this exception applies, just open an issue anyway.\n* If a pull request does not fully solve the referenced issue, you can edit the original post and change \"Resolves #OOOO\" to \"Addresses #OOOO\" so that it does not automatically close the original issue when the PR is merged.\n\n### Simple fix\n\nSimple fixes, such as a small typo fix, can be merged directly by anyone with merge access.  Check on the PR \"Files Changed\" tab to ensure  that the automated CI test passes.\n\n![The \"files changed\" tab when viewing a pull request on GitHub](src/content/contributor-docs/images/files-changed.png)\n\n![The \"All checks have passed\" indicator on a GitHub pull request, highlighted above the merge button](src/content/contributor-docs/images/all-checks-passed.png)\n\n### Bug fix\n\n1. Bug fixes should be reviewed by the relevant area steward, ideally the same one that approved the referenced issue for fixing.\n\n2. The PR \"Files Changed\" tab can be used to initially review whether the fix is implemented as described in the issue discussion.\n\n3. The PR should be tested locally whenever possible and relevant. The GitHub CLI can help streamline some of the process. (See more below in [Tips & Tricks](steward_guidelines.md#tips-tricks)).\n   * [ ] The fix should address the original issue sufficiently.\n   * [ ] The fix should not change any existing behaviors unless agreed upon in the original issue.\n   * [ ] The fix should not have a significant performance impact on p5.js.\n   * [ ] The fix should not have any impact on p5.js' accessibility.\n   * [ ] The fix should use the modern standard of JavaScript coding.\n   * [ ] The fix should pass all automated tests and include new tests if relevant.\n\n4. If any additional changes are required, line comments should be added to the relevant lines as described [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\n   * A suggestion block can also be used to suggest specific changes:\\\n     ![The Suggest Change button while writing a comment on code in a GitHub pull request](src/content/contributor-docs/images/suggest-change.png)\\\n     ![A suggested change appearing within code fences with the \"suggestion\" tag](src/content/contributor-docs/images/suggested-value-change.png)\\\n     ![A suggested change previewed as a diff](src/content/contributor-docs/images/suggestion-preview.png)\n   * If multiple changes are required, don’t add single-line comments many times. Instead, follow the procedure documented [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-proposed-changes-in-a-pull-request) to make multiple-line comments and a single request for changes.\n   * If line comments are just for clarification or discussion, choose “Comment” instead of \"Request changes\":\\\n     ![The \"comment\" option circled within the GitHub Finish Review menu](src/content/contributor-docs/images/comment-review.png)\n\n5. Once the PR has been reviewed and no additional changes are required, a steward can mark the PR as \"Approved\" by choosing the \"Approve\" option in the previous step, with or without additional comments. The steward can then either request additional review by another steward or maintainer if desired, merge the PR if they have merge access, or request a merge from a maintainer.\n\n6. @[all-contributors](https://allcontributors.org/docs/en/emoji-key) bot should be called to add any new contributors to the list of contributors in the README.md file. Each type of contribution can be indicated in place of `[contribution` `type]` below, the full list of available types of contributions can be found in the link above.\n\n`@all-contributors` `please` `add` `@[GitHub` `handle]` `for` `[contribution` `type]`\n\n### New feature/feature enhancement\n\nThe process for new feature or feature enhancement PR is similar to bug fixes with just one notable difference:\n\n* A new feature/feature enhancement PR must be reviewed and approved by at least two stewards or maintainers before it can be merged.\n\n### Dependabot\n\nDependabot PRs are usually only visible to repo admins so if this does not apply to you, please skip this section.\n\n* Dependabot PRs can be merged directly if the version update is a [semver](https://semver.org/) patch version and the automated CI test has passed.\n* Dependabot PRs with semver minor version changes can usually be merged directly as long as automated CI test passes. A quick check on the changelog of the updated dependency is recommended.\n* Dependabot PRs with semver major version changes may likely affect either the build process or p5.js functionalities. The reviewer, in this case, is encouraged to review the changelog from the current version to the target version if possible and test the PR locally to ensure all processes are functioning and make any required changes due to potential breaking changes in the dependencies.\n  * Many dependencies bump major version numbers only because they drop official support for very old versions of Node.js. In many cases, major version changes don't necessarily mean breaking changes resulting from dependency API changes.\n\n***\n\n## Build process\n\nThis section will not cover the general build setup nor commands but rather details about what's happening behind the scenes. Please see the [contributor’s guidelines](contributor_guidelines.md#working-on-p5js-codebase) for more detailed build info.\n\nThe Gruntfile.js file contains the main build definitions for p5.js. Among the different tools used to build the library and documentation includes but not limited to Grunt, Browserify, YUIDoc, ESLint, Babel, Uglify, and Mocha. It may be helpful for us to start with the `default` task and work backward from there. It may be helpful at this point to open up the Gruntfile.js document while going through the explainer below.\n\n### Main build task\n\n```\ngrunt.registerTask('default', ['lint', 'test']);\n```\n\nWhen we run `grunt` or the npm script `npm test`, we run the default task consisting of `lint` then `test`.\n\n#### `lint` Task\n\n```\ngrunt.registerTask('lint', ['lint:source', 'lint:samples']);\n```\n\nThe `lint` task consists of two sub tasks: `lint:source` and `lint:samples`. `lint:source` is further subdivided into three more sub tasks `eslint:build`, `eslint:source`, and `eslint:test`, which uses ESLint to check the build scripts, the source code, and the test scripts.\n\nThe `lint:samples` task will first run the `yui` task which itself consists of `yuidoc:prod`, `clean:reference`, and `minjson`, which extract the documentation from the source code into a JSON document, remove unused files from the previous step, and minify the generated JSON file into `data.min.json` respectively.\n\nNext in `lint:samples` is `eslint-samples:source`, which is a custom written task whose definition is in [./tasks/build/eslint-samples.js](tasks/build/eslint-samples.js); it will run ESLint to check the documentation example code to make sure they follow the same coding convention as the rest of p5.js (`yui` is run first here because we need the JSON file to be built first before we can lint the examples).\n\n#### `test` Task\n\n```js\ngrunt.registerTask('test', [\n  'build',\n  'connect:server',\n  'mochaChrome',\n  'mochaTest',\n  'nyc:report'\n]);\n```\n\nFirst let's look at the `build` task under `test`.\n\n```js\ngrunt.registerTask('build', [\n  'browserify',\n  'browserify:min',\n  'uglify',\n  'browserify:test'\n]);\n```\n\nTasks that start with `browserify` are defined in [./tasks/build/browserify.js](tasks/build/browserify.js). They all  similar steps with minor differences. These are the main steps to build the full p5.js library from its many source code files into one:\n\n* `browserify` builds p5.js while `browserify:min` builds an intermediate file to be minified in the next step. The difference between `browserify` and `browserify:min` is that `browserify:min` does not contain data needed for FES to function.\n* `uglify` takes the output file of `browserify:min` and minify it into the final p5.min.js (configuration of this step is in the main Gruntfile.js).\n* `browserify:test` is building a version identical to the full p5.js except for added code that is used for test code coverage reporting (using [Istanbul](https://istanbul.js.org/)).\n\nFirst, use of the `fs.readFileSync()` node.js specific code is replaced with the file's actual content using `brfs-babel`. This is used mainly by WebGL code to inline shader code from source code written as separate files.\n\nNext, the source code, including all dependencies from node\\_modules, is transpiled using Babel to match the [Browserslist](https://browsersl.ist/) requirement defined in package.json as well as to make the ES6 import statements into CommonJS `require()` that browserify understands. This also enables us to use newer syntax available in ES6 and beyond without worrying about browser compatibility.\n\nAfter bundling but before the bundled code is written to file, the code is passed through `pretty-fast`, if it is not meant to be minified, it should be cleaned up so the final formatting is a bit more consistent (we anticipate the p5.js source code can be read and inspected if desired).\n\nA few small detailed steps are left out here; you can check out the browserify build definition file linked above to have a closer look at everything.\n\n```\nconnect:server\n```\n\nThis step spins up a local server hosting the test files and built source code files so that automated tests can be run in Chrome.\n\n```\nmochaChrome\n```\n\nThis step is defined in [./tasks/test/mocha-chrome.js](tasks/test/mocha-chrome.js). It uses Puppeteer to spin up a headless version of Chrome that can be remote controlled and runs the tests associated with the HTML files in the `./test` folder, which includes testing the unminified and minified version of the library against the unit test suites as well as testing all reference examples.\n\n```\nmochaTest\n```\n\nThis step differs from `mochaChrome` in that it is run in node.js instead of in Chrome and only tests a small subset of features in the library. Most features in p5.js will require a browser environment, so this set of tests should only be expanded if the new tests really don't need a browser environment.\n\n```\nnyc:report\n```\n\nFinally, after all builds and tests are complete, this step will gather the test coverage report while `mochaChrome` was testing the full version of the library and print the test coverage data to the console. Test coverage for p5.js is mainly for monitoring and having some additional data points; having 100% test coverage is not a goal.\n\nAnd that covers the default task in the Gruntfile.js configuration!\n\n### Miscellaneous tasks\n\nAll of the steps can be run directly with `npx grunt [step]`. There are also a few tasks that are not covered above but could be useful in certain cases.\n\n```\ngrunt yui:dev\n```\n\nThis task will run the documentation and library builds described above, followed by spinning up a web server that serves a functionally similar version of the reference page you will find on the website on [http://localhost:9001/docs/reference/](http://localhost:9001/docs/reference/). It will then monitor the source code for changes and rebuild the documentation and library.\n\n`grunt` `yui:dev` is useful when you are working on the reference in the inline documentation because you don't have to move built files from the p5.js repository to a local p5.js-website repository and rebuild the website each time you make a change, and you can just preview your changes with this slightly simplified version of the reference in your browser. This way, you can also be more confident that the changes you made are likely to show up correctly on the website. Note that this is only meant for modifications to the inline documentation; changes to the reference page itself, including styling and layout, should be made and tested on the website repository.\n\n```\ngrunt watch\ngrunt watch:main\ngrunt watch:quick\n```\n\nThe watch tasks will watch a series of files for changes and run associated tasks to build the reference or the library according to what files have changed. These tasks all do the same thing, with the only difference being the scope.\n\nThe `watch` task will run all builds and tests similar to running the full default task on detecting changes in the source code.\n\nThe `watch:main` task will run the library build and tests but not rebuild the reference on detecting changes in the source code.\n\nThe `watch:quick` task will run the library build only on detecting changes in the source code.\n\nDepending on what you are working on, choosing the most minimal watch task here can save you from having to manually run a rebuild whenever you want to make some changes.\n\n***\n\n## Release process\n\nPlease see [release\\_process.md](release_process/).\n\n***\n\n## Tips & tricks\n\nSometimes, the number of issues and PR that require review can get a bit overwhelming.  While we try to put in place processes that make things easier, there are some tips and tricks that you can utilize to help with reviewing issues and PRs.\n\n### Reply templates\n\nA handy GitHub feature that you can use is the [Saved Replies](https://docs.github.com/en/get-started/writing-on-github/working-with-saved-replies/about-saved-replies) feature, which is available to use when authoring a reply to issues or pull requests. Some of the workflow described above may require responding to issues or PRs with identical or very similar replies (redirecting questions to the forum, accepting an issue for fixing, etc.), and using Saved Replies can just ever so slightly make this more efficient.\n\nBelow are some of the Saved Replies that are being used by p5.js maintainers. You can use them yourself or create your own!\n\n##### Closing: Can’t Reproduce\n\n> We're not able to reproduce this, but please feel free to reopen if you can provide a code sample that demonstrates the issue. Thanks!\n\n##### Closing: Need Snippet\n\n> I'm closing this for organizational purposes. Please reopen if you can provide a code snippet that illustrates the issue. Thanks!\n\n##### Closing: Use the Forum\n\n> The GitHub issues here are a good place for bugs and issues with the p5.js library itself. For questions about writing your own code, tests, or following tutorials, the [forum](https://discourse.processing.org/) is the best place to post. Thanks!\n\n##### Closing: GSOC\n\n> Thanks! The best place to discuss GSOC proposals is on our [forum](https://discourse.processing.org/c/summer-of-code).\n\n##### Closing: Access\n\n> I'm not seeing a lot of interest in this feature, and we don't have a clear explanation of how it [expands access](access/), so I will close this for now. If an access statement can be added to the issue request, please feel welcome to reopen.\n\n> We do not see a further explanation of how this issue [expands access](access/), so I will close this issue for now. If a more detailed access statement can be added to the feature request, please feel welcome to reopen it. Thank you!\n\n##### Closing: Addon\n\n> I think this function is beyond the scope of the p5.js API (we try to keep it as minimal as possible), but it could be a great starting point for an addon library. See the docs here for how to create an addon: [https://github.com/processing/p5.js/blob/main/contributor\\_docs/creating\\_libraries.md](creating_libraries/)\n\n##### Closing PR: Need Issue First\n\n> Thank you. As a reminder, issues need to be opened before pull requests are opened and tagged with the issue. This is necessary for tracking development and keeping discussion clear. Thanks!\n\n##### Approve issue for fixing\n\n> You can go ahead with a fix. Thanks.\n\n##### Merged PR\n\n> Looks good. Thanks!\n\n### GitHub CLI\n\nReviewing a complex PR can be difficult with complex git commands required to get the PR's version of code locally for you to test. Fortunately, the [GitHub CLI](https://cli.github.com/) tool can help greatly with this process and more.\n\nAfter installing the CLI and logging in, reviewing a PR locally can be done by running the command `gh pr checkout [pull_request_id]`, and the process of fetching a remote fork, creating a branch, and checking out the branch are all done automatically for you. Going back to the main branch will be the same as switching a branch by running `git checkout main`. You can even leave a comment in the PR from the CLI without needing to visit the webpage at all!\n\nThere are many other commands available in the GitHub CLI as well that you may or may not find useful, but it is a good tool to have around in any case.\n\n### Managing notifications\n\nInstead of manually monitoring the \"Issues\" or \"Pull Requests\" tabs of the repo for new issues or PRs, you can \"watch\" the repo by clicking on the \"Watch\" button with an eye icon on the top of the repo page opposite the repo name.\n\n![Cropped screenshot of the top right corner of a GitHub repository page showing a series of buttons in the center from left to right: Sponsor, Watch, Fork, Starred.](src/content/contributor-docs/images/github-repo-metrics.png)\n\nBy watching a repo, events such as new issues, new pull requests, mentions of your user handle, and other activities you subscribed to on the repo will be sent as notifications to your [notification page](https://github.com/notifications), where they can be marked as read or dismissed much like an email inbox.\n\nIn some cases, you may receive emails from GitHub about events in the repo you are watching as well, and you can customize these (including unsubscribing from them completely) from your [notifications settings page](https://github.com/settings/notifications).\n\nSetting these up to fit the way you work can be the difference between having to find relevant issues/PRs to review manually and being overwhelmed by endless notifications from GitHub. A good balance is required here. As a starting suggestion, stewards should watch this repo for \"Issues\" and \"Pull Requests\" and set it to only receive emails on \"Participating, @mentions and custom.\"\n"},"Unit Testing\n":{"relativeUrl":"/contribute/unit_testing","description":"{/* Guide to writing tests for p5.js source code.  */}\n\n\n\nUnit testing is an essential part of how a large codebase can stay relatively bug-free. Unit tests are small pieces of code that aim to test individual components of a larger code base for correctness. For example, making sure a function is doing what it should be doing or a class is creating its object instances correctly.\n\np5.js uses unit tests to ensure the correctness of its various functions. Unit tests also ensure that any new changes to the library’s code do not introduce bugs or unexpected behavior elsewhere, called regression. Tests for p5.js are run whenever we use the `npm test` command in the terminal.\n\nThis guide will walk you through the process of writing unit tests for p5.js. If you are implementing a new function, adding a new feature to an existing function, or changing the behavior of a function, you should implement the relevant unit tests.\n\n## Prerequisites\n\n* p5.js foundation\n* Contributor guidelines with local development setup\n* Looking inside p5.js\n\n## Files and folders\n\nAll test-related files for p5.js are located in the `test` folder. We won’t go through everything in this folder for this guide; we will instead focus on the `unit` subfolder, which contains all the unit tests for p5.js.\n\nAs you can see, the subfolders in the `unit` subfolder roughly correspond to the subfolders in the `src` folder containing the source code of p5.js. At the same time, the files in each subfolder also have a counterpart in the subfolders in the `src` folder. p5.js is composed of many different modules with many different functions in each module. The aim is to have relevant unit tests for every public function that p5.js provides.\n\n## Testing frameworks\n\np5.js uses [Mocha](https://mochajs.org) as a test runner. It is responsible for running the test code as well as providing a solid framework for reporting test results (i.e., the very long output you see in the terminal when you run the tests!)\n\nHowever, Mocha by itself doesn’t do any testing; for that, we need an assertion library. An assertion library is a collection of handy functions that lets us test various properties of our code, such as whether two values are equal, two values are of the same type, whether a function throws an error, and many more. p5.js uses [Chai's `assert` (and `expect`)](https://www.chaijs.com/api/assert/) to write individual statements about how the code should behave.\n\n## Writing unit tests\n\nTo start writing unit tests, first pick a unit. A unit can be a function or a variable in p5.js. Let’s use `p5.prototype.keyIsPressed` as an example. Before beginning to write tests, we need to understand the expected behavior of this variable. The *expected behavior* is that the `keyIsPressed` variable should be `true` if any key is pressed and `false` if no keys are pressed. Now, you can think of various tests against this expected behavior. Possible test cases could be:\n\n* the variable is a boolean\n* it should be `true` if a key is pressed\n* it should be `true` if any key is pressed - alphabet keys, number keys, special keys, etc.\n* it should be `true` if multiple keys are pressed\n* it should be `false` if no keys are pressed\n\nIn the example below, `suite()` and `test()` are both built-in functions provided by Mocha as part of the test environment. If you look into the test file (eg. `test/unit/events/keyboard.js`) you may find additional built-in functions such as `setup()` and `teardown()` as well. Each `suite()` describes a unit of p5.js that you are writing a test for (a function, a variable, etc). Each `test()` in a `suite()` is an individual test case that checks a single feature/behavior of the unit being tested. The first argument passed to `suite()` and `test()` is a description of the suite/test, and its purpose is to give clear output in the terminal for the test case.\n\n* `p5.prototype.keyIsPressed` is the unit being tested in this suite.\n* There are three tests in this suite:\n  * The first test checks if `keyIsPressed` is a boolean value.\n  * The second test checks if `keyIsPressed` is `true` on key press.\n  * The third test checks if `keyIsPressed` is `false` when no keys are pressed\n\n```js\nsuite('p5.prototype.keyIsPressed', function() {\n  test('keyIsPressed is a boolean', function() {\n    //write test here\n  });\n\n  test('keyIsPressed is true on key press', function() {\n    //write test here\n  });\n\n  test('keyIsPressed is false when no keys are pressed', function() {\n    //write test here\n  });\n});\n```\n\nWe have structured our tests above but we haven't written the tests yet. We will be using Chai's `assert` for that. In the test file (`test/unit/events/keyboard.js`), you should see a variable called `myp5` defined near the top, and the `setup()` section contains a callback function that creates a new instance mode sketch.\n\n```js\nlet myp5;\n\nsetup(function(done) {\n  new p5(function(p) {\n    p.setup = function() {\n      myp5 = p;\n      done();\n    };\n  });\n});\n```\n\nThe `p` parameter, which is used in instance mode to access various p5.js variables and functions, is then assigned to `myp5`. This setup allows you to use `myp5` to access p5.js variables and functions anywhere in the testing code to test their functionalities.\n\nRemember that, as previously mentioned, Mocha is a test runner but by itself doesn’t do any testing; we need Chai for that. Consider the following:\n\n```js\ntest('keyIsPressed is a boolean', function() {\n  //Asserts that value is a boolean.\n  assert.isBoolean(myp5.keyIsPressed);\n});\n```\n\nChai provides many different assertion functions that you can use to create the actual test code, assertion here in practice means functions that checks for a condition, similar to an if statement, and if the condition is `false`, it will throw an error. In the example above, we use Chai’s `assert.isBoolean()` function to check that the type of the value of `myp5.keyIsPressed` is indeed a boolean value. You can look at Chai’s [documentation](https://www.chaijs.com/api/assert/) for all the available assertion functions that you can use to test all kinds of things.\n\nNow that you have written the tests, run them and see if the method behaves as expected. If not, consider whether the tested source code is correct or the test code is not testing the behavior of the code correctly.\n\n## Adding unit tests\n\nIf you want to add more unit tests, look and see if there's already a test file for the component you want to add tests for. Generally, tests for a given file in `src` are at the same path under `test/unit`. For example, the tests for `src/color/p5.Color.js` are in `test/unit/color/p5.Color.js`.\n\nIf you have added a new source code file in the `src` folder and would like to add the corresponding test file in `test/unit`, you can make a copy of an existing test file and then rename it to match the file name of your source file. In the new test file, you should delete the old test code before inserting your own, keeping the test setup and teardown code.\n\n```js\nsuite('module_name', function() {\n  let myp5;\n  let myID = 'myCanvasID';\n\n  setup(function(done) {\n    new p5(function(p) {\n      p.setup = function() {\n        let cnv = p.createCanvas(100, 100);\n        cnv.id(myID);\n        myp5 = p;\n        done();\n      };\n    });\n  });\n\n  teardown(function() {\n    myp5.remove();\n  });\n});\n```\n\nAfter adding a test file for a module to `test/unit`, you'll also need to add the module under test to the `spec` object in `test/unit/spec.js`. This will make sure the necessary modules are loaded for your test to run.\n\n```js\n// test/unit/spec.js\nvar spec = {\n  // ...\n  typography: ['attributes', 'loadFont', 'p5.Font', 'yourModule'],\n  // ...\n};\n```\n\nTo add actual tests, which are grouped into what is called a “suite” (representing a function/variable that is being tested), we expand on the test code with the following:\n\n```js\nsuite('module_name', function() {\n  let myp5;\n  let myID = 'myCanvasID';\n\n  setup(function(done) {\n    new p5(function(p) {\n      p.setup = function() {\n        let cnv = p.createCanvas(100, 100);\n        cnv.id(myID);\n        myp5 = p;\n        done();\n      };\n    });\n  });\n\n  teardown(function() {\n    myp5.remove();\n  });\n\n  suite('p5.prototype.yourFunction', function() {\n    test('should [test something]', function() {\n      // Your test code and Chai assertions\n    });\n  });\n\n  // More test suites as needed\n});\n```\n\nThis is also how you will add tests for existing modules for which you didn’t need to create a new test file.\n\n## Conventions\n\nHere are the conventions and best practices that p5.js uses for unit tests which you should follow when writing your own tests:\n\n* Use a single `suite` for each p5.js function/variable being tested.\n* Each `suite` representing a function/variable can contain as many `test`s as needed.\n* Each `test` should be self-contained and not rely on any other modules in p5.js.\n* Test code should be as minimal as possible and only test one thing at a time. Do not test if a value is a function while also testing if it accepts the correct arguments in a single `test`; use two `test`s instead.\n* Prefer Chai `assert` when possible instead of `expect`.\n\n## Running tests\n\nThe most straightforward way to run the tests is by using the `npm test` command in your terminal. However, `npm test` usually takes a long time to run simply because of the large number of test cases p5.js has. It can also sometimes be a bit repetitive to make some changes, run `npm test`, make some more changes, and run `npm test` again. Here are some tricks that can help streamline this process:\n\n* Use the `npx grunt watch:main` command to automatically build and test p5.js whenever you save changes to p5.js source files. This will save you from having to manually run tests whenever you are making frequent changes to the codebase.\n\n* You can mark certain test suites to be skipped or be the only suite that is run with the `.skip` and `.only` syntax.\n\n  ```js\n  // This test suite will not run\n  suite.skip('p5.prototype.yourFunction', function() {\n\n  });\n\n  // Only this test suite will be run, all other suites will be ignored\n  suite.only('p5.prototype.yourFunction', function() {\n\n  });\n  ```\n\n* You can also run `grunt yui:dev` to launch a local server with the reference and a test runner. Once live, you can go to [`http://127.0.0.1:9001/test/test.html`](http://127.0.0.1:9001/test/test.html) to run tests live in your browser. This can be useful if you want to use a debugger in the middle of a test case or if you want to log complex objects. If you want to filter tests by the name of the test case, you can add a search term after a `?grep=` URL parameter, e.g.: [`http://127.0.0.1:9001/test/test.html?grep=framebuffer`](http://127.0.0.1:9001/test/test.html?grep=framebuffer)\n\n## Visual tests\n\nVisual tests are a way to make sure sketches do not unexpectedly change when we change the implementation of p5.js features. Each visual test file lives in the `test/unit/visual/cases` folder. Inside each file there are multiple visual test cases. Each case creates a sample sketch, and then calls `screenshot()` to check how the sketch looks.\n\n```js\nvisualTest('2D objects maintain correct size', function(p5, screenshot) {\n  p5.createCanvas(50, 50, p5.WEBGL);\n  p5.noStroke();\n  p5.fill('red');\n  p5.rectMode(p5.CENTER);\n  p5.rect(0, 0, p5.width/2, p5.height/2);\n  screenshot();\n});\n```\n\nIf you need to add a new test file, add it to that folder, then add the filename to the list in `test/visual/visualTestList.js`. Additionally, if you want that file to be run automatically as part of continuous integration on every pull request, add the filename to the `visual` list in `test/unit/spec.js`.\n\nWhen you add a new test, running `npm test` will generate new screenshots for any visual tests that do not yet have them. Those screenshots will then be used as a reference the next time tests run to make sure the sketch looks the same. If a test intentionally needs to look different, you can delete the folder matching the test name in the `test/unit/visual/screenshots` folder, and then re-run `npm test` to generate a new one.\n\nTo manually inspect all visual tests, run `grunt yui:dev` to launch a local server, then go to [http://127.0.0.1:9001/test/visual.html](http://127.0.0.1:9001/test/visual.html) to see a list of all test cases.\n\nIn a continuous integration (CI) environment, optimizing test speed is essential. It is advantageous to keep the code concise, avoid unnecessary frames, minimize canvas size, and load assets only when essential for the specific functionality under test.\nTo address scenarios involving operations like asynchronous 3D model rendering, consider returning a promise that resolves upon completing all the necessary tests, ensuring efficiency in your visual testing approach. Here's an example of how you can asynchronous 3D model rendering in your visual tests:\n\n```js\nvisualSuite('3D Model rendering', function() {\n  visualTest('OBJ model is displayed correctly', function(p5, screenshot) {\n    // Return a Promise to ensure the test runner waits for the asynchronous operation to complete\n    return new Promise(resolve => {\n      p5.createCanvas(50, 50, p5.WEBGL);\n      // Load the model asynchronously\n      p5.loadModel('unit/assets/teapot.obj', model => {\n        p5.background(200);\n        p5.rotateX(10 * 0.01);\n        p5.rotateY(10 * 0.01);\n        p5.model(model);\n        // Take a screenshot for visual comparison\n        screenshot();\n        // Resolve the Promise to indicate completion\n        resolve();\n      });\n    });\n  });\n});\n```\n"},"p5.js Web Accessibility\n":{"relativeUrl":"/contribute/web_accessibility","description":"{/* Understand and use p5.js’ Web Accessibility features to make your sketch accessible. */}\n\n\n\nThis document describes the structure of p5.js’ web accessibility features for contributors.\n\nIf you want to make your sketches [screen reader](https://en.wikipedia.org/wiki/Screen_reader)-accessible, visit the How to label your p5.js code tutorial.\n\nIf you want to use p5.js with a screen reader, visit the [Using p5.js with a Screen Reader tutorial](https://p5js.org/learn/p5-screen-reader.html).\n\nThe canvas HTML element is a grid of pixels. It doesn’t provide any screen reader-accessible information about the shapes drawn on it. p5.js has several functions that make the canvas more accessible to screen readers by providing [fallback text](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage#accessible_content) descriptions. I’ll describe some of the details around the implementation of these functions.\n\n## Prerequisites\n\n* p5.js foundation\n* Contributor guidelines with local development setup\n* Looking inside p5.js\n* How to label your p5.js code\n\n## Library-generated accessible outputs for basic shapes\n\np5.js supports library-generated screen reader-accessible outputs for basic shapes on the canvas with `textOutput()` and `gridOutput()`. It also supports user-generated screen reader-accessible descriptions of the canvas with `describe()` and `describeElement()`. All descriptions are inserted as child elements to the `<canvas>` element.\n\nWe’ll look at how the library-generated outputs work first. The following code snippet will serve as an example.\n\n```js\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(\"#ccccff\");\n  textOutput();\n  fill(\"orange\");\n  ellipse(100, 100, 50);\n  fill(\"fuchsia\");\n  rect(300, 300, 50, 50);\n}\n```\n\n![An orange circle and pink square on a light purple canvas](src/content/contributor-docs/images/sketch-with-shapes.png)\n\n`textOutput()` creates a screen reader-accessible output that describes the shapes present on the canvas. The general description of the canvas includes the canvas size, canvas color, and number of elements in the canvas:\n\n> Your output is a, 400 by 400 pixels, lavender blue canvas containing the following 2 shapes:\n\nThis description is followed by a list of shapes where the color, position, and area of each shape are described:\n\n> orange circle at top left covering 1% of the canvas.\\\n> fuchsia square, at bottom right, covering 2% of the canvas.\n\nEach element can be selected to get more details. A table of elements is also provided. In this table, each element’s  shape, color, location, coordinates, and area are described:\n\n> orange circle location=top left area=1%\\\n> fuchsia square    location = bottom right    area = 2%\n\n<details>\n  <summary>This generates the following HTML:</summary>\n\n  ```html\n  <canvas id=\"defaultCanvas0\" class=\"p5Canvas\" style=\"width: 400px; height: 400px;\" width=\"400\" height=\"400\">\n    <div id=\"defaultCanvas0accessibleOutput\" role=\"region\" aria-label=\"Canvas Outputs\">\n      <div id=\"defaultCanvas0textOutput\">\n        Text Output\n        <div id=\"defaultCanvas0textOutputSummary\" aria-label=\"text output summary\">\n          <p id=\"defaultCanvas0textOutput_summary\">\n            Your output is a, 400 by 400 pixels, white canvas containing the following 2 shapes:\n          </p>\n          <ul id=\"defaultCanvas0textOutput_list\">\n            <li>\n              <a href=\"#defaultCanvas0textOutputshape0\">orange circle</a>, at top left, covering 1% of the canvas.\n            </li>\n            <li>\n              <a href=\"#defaultCanvas0textOutputshape1\">fuchsia square</a>, at bottom right, covering 2% of the canvas.\n            </li>\n          </ul>\n        </div>\n        <table id=\"defaultCanvas0textOutput_shapeDetails\" summary=\"text output shape details\">\n          <tbody>\n            <tr id=\"defaultCanvas0textOutputshape0\">\n              <th>orange circle</th>\n              <td>location = top left</td>\n              <td> area = 1%</td>\n            </tr>\n            <tr id=\"defaultCanvas0textOutputshape1\">\n              <th>fuchsia square</th>\n              <td>location = bottom right</td>\n              <td> area = 2%</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </canvas>\n  ```\n</details>\n\n`gridOutput()` lays out the content of the canvas in the form of a grid using an HTML table element. Each shape’s location in the grid is based on its spatial location on the canvas. A brief description of the canvas is available before the table output. This description includes the color of the background, size of the canvas, number of objects, and object types:\n\n> lavender blue canvas, 400 by 400 pixels, contains 2 shapes:  1 circle 1 square\n\nEach shape’s description is placed in a cell of the table depending on its location on the canvas. Each description includes the color and type of shape:\n\n> orange circle\\\n> fuchsia square\n\nThese descriptions can be selected individually to get more details. A list of elements where shape, color, location, and area are described is also available:\n\n* *orange circle, location = top left, area = 1 %*\n* *fuchsia square, location = bottom right, area = 2 %*\n\n<details>\n  <summary>\n    The generated HTML is as follows:\n  </summary>\n\n  ```html\n  <canvas id=\"defaultCanvas0\" class=\"p5Canvas\" style=\"width: 400px; height: 400px;\" width=\"400\" height=\"400\">\n    <div id=\"defaultCanvas0accessibleOutput\" role=\"region\" aria-label=\"Canvas Outputs\">\n      <div id=\"defaultCanvas0gridOutput\">\n        Grid Output\n        <p id=\"defaultCanvas0gridOutput_summary\" aria-label=\"grid output summary\">\n       white canvas, 400 by 400 pixels, contains 2 shapes:  1 circle 1 square\n     </p>\n        <table id=\"defaultCanvas0gridOutput_map\" summary=\"grid output content\">\n          <tbody>\n            <tr></tr>\n            <tr></tr>\n            <tr>\n              <td><a href=\"#defaultCanvas0gridOutputshape0\">orange circle</a></td>\n            </tr>\n            <tr></tr>\n            <tr></tr>\n            <tr></tr>\n            <tr></tr>\n            <tr></tr>\n            <tr>\n              <td><a href=\"#defaultCanvas0gridOutputshape1\">fuchsia square</a></td>\n            </tr>\n            <tr></tr>\n          </tbody>\n        </table>\n        <ul id=\"defaultCanvas0gridOutput_shapeDetails\" aria-label=\"grid output shape details\">\n          <li id=\"defaultCanvas0gridOutputshape0\">orange circle, location = top left, area = 1 %</li>\n          <li id=\"defaultCanvas0gridOutputshape1\">fuchsia square, location = bottom right, area = 2 %</li>\n        </ul>\n      </div>\n    </div>\n  </canvas>\n  ```\n</details>\n\nIf a user passes `LABEL` as an argument to either of these functions, an additional `<div>` element is created next to the `<canvas>` element. The new \\<div> contains a visible version of the same screen reader-accessible description embedded in the `<canvas>` element. This is useful for non-screen reader users who might want to display the output as they code. However, using `LABEL` will create unnecessary redundancy for screen reader users. We recommend using `LABEL` only as part of the development process of a sketch and removing it before publishing or sharing your sketch with screen reader users.\n\n![A p5.js canvas, with the text descriptions described earlier present below it](src/content/contributor-docs/images/sketch-text-output.png)\n\n### Outputs structure\n\nAlthough `textOutput()` and `gridOutput()` are located in [src/accessibility/outputs.js](https://github.com/processing/p5.js/blob/main/src/accessibility/outputs.js), the outputs are created and updated using functions distributed across the library. This section details the different functions that support the accessible outputs.\n\n#### outputs.js\n\n[src/accessibility/outputs.js](https://github.com/processing/p5.js/blob/main/src/accessibility/outputs.js) includes two public methods:\n\n* `textOutput()`\n* `gridOutput()`\n\nBoth methods activate the accessible output by setting `this._accessibleOutputs.text` or `this._accessibleOutputs.grid `to `true` and calling `this._createOutput('textOutput', 'Fallback')` or `this._createOutput('gridOutput', 'Fallback')` respectively.\n\nIf `LABEL` is passed as a parameter to the method, it also activates the visible text output label by setting `this._accessibleOutputs.textLabel` as `true` and calls `this._createOutput('textOutput', 'Label')` or `this._createOutput('gridOutput', 'Label')`.\n\nIn the same file, there are the following private methods as well:\n\n* `_createOutput()`: This method creates the HTML structure for all accessible outputs. Depending on the type and display of the outputs, the HTML structure created will vary. The function also initializes `this.ingredients` which stores all the data for the outputs including: `shapes`, `colors`, and `pShapes` (which stores a string of the previous shapes of the canvas). It also creates `this.dummyDOM` if it doesn't exist. `this.dummyDOM` stores the HTMLCollection of DOM elements inside of `<body>`.\n* `_updateAccsOutput()`: Is called at the end of `setup()` and `draw()` if using accessibleOutputs. If `this.ingredients` differs from the current outputs, this function calls the update methods of the accessible outputs (eg. `_updateTextOutput` and `_updateGridOutput`). Calling this function only at the end of `setup()` and `draw()` as well as only calling `_updateGridOutput` and `_updateTextOutput` only when the ingredients are different helps avoid overwhelming the screen reader. Otherwise, a screen reader user would not be able to access the descriptions of the canvas as the content of the divs will be constantly updating.\n* `_addAccsOutput()`: This method initializes `this._accessibleOutputs` and returns true when `this._accessibleOutputs.grid` or `this._accessibleOutputs.text` is true.\n* `_accsBackground()`: Is called at the end of `background()`. It resets `this.ingredients.shapes` and if the color of the background is different than before it calls `this._rgbColorName()` to get the name of the color and store it in `this.ingredients.colors.background`\n* `_accsCanvasColors()`: Is called at the end of fill() and stroke(). This function updates the fill and stroke colors by saving them in `this.ingredients.colors.fill` and `this.ingredients.colors.stroke`. It also calls `this._rgbColorName()` to get the names of the colors.\n* `_accsOutput()`: Builds `this.ingredients.shapes` which includes all the shapes that are used for creating the outputs. This function is called at the end of the basic shape functions (see accessible output beyond src/accessibility). Depending on the shape that calls it, `_accsOutput()` may call helper functions to gather all the information about that shape that will be needed to create the outputs. These functions include:\n  * `_getMiddle()`: Returns the middle point or centroid of rectangles, arcs, ellipses, triangles, and quadrilaterals.\n  * `_getPos()`: Returns the position of a shape on the canvas (e.g.: 'top left', 'mid right').\n  * `_canvasLocator()`: Returns location of the shape on a 10\\*10 grid mapped to the canvas.\n  * `_getArea()`: Returns the area of the shape as a percentage of the canvas' total area.\n\nWhen `this._accessibleOutputs.text` or `this._accessibleOutputs.text` are `true` several functions across the p5.js library call functions in output.js:\n\n* `_accsOutput()` is called in:\n  * `p5.prototype.triangle()`\n  * `p5.prototype._renderRect()`\n  * `p5.prototype.quad()`\n  * `p5.prototype.point()`\n  * `p5.prototype.line()`\n  * `p5.prototype._renderEllipse()`\n  * `p5.prototype.arc()`\n* `_updateAccsOutput()` is called in:\n  * `p5.prototype.redraw()`\n  * `p5.prototype.resizeCanvas()`\n  * `this._setup`\n* `_accsCanvasColors()` is called in:\n  * `p5.Renderer2D.prototype.stroke()`\n  * `p5.Renderer2D.prototype.fill()`\n* `_accsBackground()` is called in:\n  * `p5.Renderer2D.prototype.background()`\n\n#### textOutput.js\n\n[src/accessibility/textOutput.js](https://github.com/processing/p5.js/blob/main/src/accessibility/textOutput.js) contains all the methods that update the text output. The main method in this file is `_updateTextOutput()` which is called by `_updateAccsOutput()` in [src/accessibility/outputs.js](https://github.com/processing/p5.js/blob/main/src/accessibility/outputs.js) when `this._accessibleOutputs.text` or `this._accessibleOutputs.textLabel` are `true.`\n\n`_updateTextOutput()` uses `this.ingredients` to build the content of the text output and text output label which include a summary, a list of shapes, and a table of shapes details. If these are different from the current outputs it updates them. Building the output content is supported by several helper functions in the file that are not part of the `p5` prototype:\n\n* `_textSummary()`: Builds the content of the text output summary.\n* `_shapeDetails()`: Builds the text output table that contains shape details.\n* `_shapeList()`: Builds the list of shapes of the text output.\n\n#### gridOutput.js\n\n[src/accessibility/gridOutput.js](https://github.com/processing/p5.js/blob/main/src/accessibility/gridOutput.js) contains all methods that update the grid output. The main method in this file is `_updateGridOutput()`, which is called by `_updateAccsOutput()` in [src/accessibility/outputs.js](https://github.com/processing/p5.js/blob/main/src/accessibility/outputs.js) when `this._accessibleOutputs.grid` or `this._accessibleOutputs.gridLabel` are `true.`\n\n`_updateGridOutput()` uses `this.ingredients` to build the content of the grid output and grid output label, which include a summary, a grid that maps the location of shapes, and a list of shapes. If these are different from the current outputs, it updates them. Building the output content is supported by several helper functions in the file that are not part of the `p5` prototype:\n\n* `_gridSummary()`: Builds the content of the grid output summary.\n* `_gridMap()`: Builds a grid that maps the location of shapes on the canvas.\n* `_gridShapeDetails()`: Builds the list of shapes of the grid output, each line of the list includes details about the shape.\n\n#### color\\_namer.js\n\nWhen creating screen reader-accessible outputs, naming the colors used in the canvas is important. [src/accessibility/color\\_namer.js](https://github.com/processing/p5.js/blob/main/src/accessibility/color_namer.js) contains `_rgbColorName()` a method that receives RGBA values and returns a color name. This function is called by `_accsBackground()` and `_accsCanvasColors` in [src/accessibility/outputs.js](https://github.com/processing/p5.js/blob/main/src/accessibility/outputs.js).\n\n`_rgbColorName()` uses `p5.color_conversion._rgbaToHSBA()` to get the HSV values of the color and then uses `_calculateColor()` to get the color name. The function `_calculateColor()` in this file comes from [colorNamer.js](https://github.com/MathuraMG/color-namer), which was developed as part of a [2018 Processing Foundation fellowship](https://medium.com/processing-foundation/making-p5-js-accessible-e2ce366e05a0) and in consultation with blind screen reader expert users. This function returns color names by comparing HSV values to those stored in the `colorLookUp` array, returning the closest color name as a string.\n\n## User-generated accessible canvas descriptions\n\n### describe()\n\nThe `describe()` function creates a sketch author-defined screen reader accessible description for the canvas. The first parameter should be a string with a description of the canvas. The second parameter is optional. If specified, it determines how the description is displayed. If a user passes `LABEL` as a second parameter, an additional `<div>` element is created next to the `<canvas>` element. The new `<div>` element contains a visible version of the same screen reader-accessible description embedded in the `<canvas>` element.\n\n`describe()` is supported by several methods in [src/accessibility/describe.js](https://github.com/processing/p5.js/blob/main/src/accessibility/describe.js):\n\n* `_descriptionText()`: Checks that text is not `LABEL` or `FALLBACK` and ensures text ends with a punctuation mark. If the text does not end with '.', ',', ';', '?', '!', this function adds a '.' at the end of the string to improve screen reader readability. This function then returns the text as a string.\n* `_describeHTML()`: Creates fallback HTML structure for the canvas. If the second parameter of `describe()` is `LABEL`, this function creates a `<div>` tag adjacent to the `<canvas>` element for the description text.\n\nWith example code:\n\n```js\nfunction setup() {\n  background('pink');\n\n  fill('red');\n  noStroke();\n  circle(67, 67, 20);\n  circle(83, 67, 20);\n  triangle(91, 73, 75, 95, 59, 73);\n\n  describe('A pink square with a red heart in the bottom-right corner.', LABEL);\n}\n```\n\nThe page will output:\n\n![A p5.js canvas, with a description below reading, \"A pink square with a red heart in the bottom-right corner.\"](src/content/contributor-docs/images/sketch-text-output2.png)\n\n### describeElement()\n\nThe `describeElement()` function creates a screen reader-accessible description for groups of shapes that create meaning together. For example, a custom-drawn “heart” shape made out of multiple lines of code. The first parameter should be a string with the name of the element, for example, “Heart”. The second parameter should be a string with the description of the element, for example, “A red heart in the bottom-right corner.” The third parameter is optional. If a user passes `LABEL` as a third parameter, an additional `<div>` element is inserted next to the `<canvas>` element. The new \\<div> will contain a visible version of the same  description embedded in the `<canvas>` element.\n\n`describeElement()` is supported by several functions in [src/accessibility/describe.js](https://github.com/processing/p5.js/blob/main/src/accessibility/describe.js):\n\n* `_elementName()`: First checks that the element name is not `LABEL` or `FALLBACK` and ensures the name ends with a colon character ‘:’. It then returns the name as a string.\n* `_descriptionText()`: Checks that text is not `LABEL` or `FALLBACK` and ensures the text ends with a punctuation mark. If the text does not end with '.', ',', ';', '?', '!', this function adds a '.' at the end of the string. It then returns the text as a string.\n* `_describeElementHTML()`: Creates fallback HTML structure for the canvas. When the second parameter of `describeElement()` is `LABEL`, this function creates a div adjacent to the canvas element for the descriptions.\n\nWith example code:\n\n```js\nfunction setup() {\n  background('pink');\n  noStroke();\n\n  describeElement('Heart', 'A red heart in the bottom-right corner.', LABEL);\n  fill('red');\n  circle(66.6, 66.6, 20);\n  circle(83.2, 66.6, 20);\n  triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n\n  describe('A red heart and yellow circle over a pink background.', LABEL);\n}\n```\n\nThe page will output:\n\n![A p5.js canvas, followed by two lines of description: \"A red heart and yellow circle over a pink background,\" and \"Heart: A red heart in the bottom-right corner.\"](src/content/contributor-docs/images/sketch-text-output3.png)\n"},"WebGL Contribution Guide\n":{"relativeUrl":"/contribute/webgl_contribution_guide","description":"{/* How to get started working on the p5.js WebGL mode source code. */}\n\n\n\nIf you're reading this page, you're probably interested in helping work on WebGL mode. Thank you, we're grateful for your help! This page exists to help explain how we structure WebGL contributions and to offer some tips for making changes.\n\n## Resources\n\n* Read our [p5.js WebGL architecture overview](webgl_mode_architecture/) to understand how WebGL mode differs from 2D mode. This will be a valuable reference for some implementation specifics for shaders, strokes, and more.\n* Read our [contributor guidelines](https://p5js.org/contributor-docs/#/./contributor_guidelines) for information on how to create issues, set up the codebase, and test changes.\n* It can be helpful to know a bit about the browser's WebGL API, which is what p5.js's WebGL mode is built on top of:\n  * [WebGL fundamentals](https://webglfundamentals.org/) goes over many core rendering concepts\n  * [The Book of Shaders](https://thebookofshaders.com/) explains many techniques used in WebGL shaders\n\n## Planning\n\nWe organize open issues [in a GitHub Project](https://github.com/orgs/processing/projects/5), where we divide them up into a few types:\n\n* **System-level changes** are longer-term goals with far-reaching implications in the code. These require the most discussion and planning before jumping into implementation.\n* **Bugs with no solution yet** are bug reports that need some debugging to narrow down the cause. These are not yet ready to be fixed: once the cause is found, then we can discuss the best way to fix it.\n* **Bugs with solutions but no PR** are bugs where we have decided how to fix it and are free for someone to write code for.\n* **Minor enhancements** are issues for new features that have an obvious spot within the current architecture without needing to discuss how to fit them in. Once agreed that these are worth doing, they are free to write code for.\n* **2D features** are ones that already exist in p5.js but not within WebGL mode. The expected behavior of the feature, once implemented, is to match 2D mode. We may need to discuss the best implementation, but the user requirements for these are clear.\n* **Features that don't work in all contexts** are ones that exist in WebGL mode but do not work in all the ways one can use WebGL mode. For example, some p5.js methods work with both 2D coordinates and 3D coordinates, but others break if you use 3D coordinates. These are generally free to begin working on.\n* **Feature requests** are all other code change requests. These need a bit of discussion to make sure they are things that fit into WebGL mode's roadmap.\n* **Documentation** issues are ones that don't need a code change but instead need better documentation of p5.js's behavior.\n\n## Where to Put Code\n\nEverything related to WebGL is in the `src/webgl` subdirectory. Within that directory, top-level p5.js functions are split into files based on subject area: commands to set light go in `lighting.js`; commands to set materials go in `materials.js`.\n\nWhen implementing user-facing classes, we generally try to have one file per class. These files may occasionally have a few other internal utility classes. For example, `p5.Framebuffer.js` includes the class `p5.Framebuffer`, and also additionally consists of a few framebuffer-specific subclasses of other main classes. Further framebuffer-specific subclasses can go in this file, too.\n\n`p5.RendererGL` is a large class that handles a lot of behavior. For this reason, rather than having one large class file, its functionality is split into many files based on what subject area it is. Here is a description of the files we split `p5.RendererGL` across, and what to put in each one:\n\n#### `p5.RendererGL.js`\n\nInitialization and core functionality.\n\n#### `p5.RendererGL.Immediate.js`\n\nFunctionality related to **immediate mode** drawing (shapes that will not get stored and reused, such as `beginShape()` and `endShape()`)\n\n#### `p5.RendererGL.Retained.js`\n\nFunctionality related to **retained mode** drawing (shapes that have been stored for reuse, such as `sphere()`)\n\n#### `material.js`\n\nManagement of blend modes\n\n#### `3d_primitives.js`\n\nUser-facing functions that draw shapes, such as `triangle()`. These define the geometry of the shapes. The rendering of those shapes then happens in `p5.RendererGL.Retained.js` or `p5.RendererGL.Immediate.js`, treating the geometry input as a generic shape.\n\n#### `Text.js`\n\nFunctionality and utility classes for text rendering.\n\n## Testing WebGL Changes\n\n### Testing Consistency\n\nThere are a lot of ways one can use the functions in p5.js. It's hard to manually verify all of it, so we add unit tests where we can. That way, when we make new changes, we can be more confident that we didn't break anything if all the unit tests still pass.\n\nWhen adding a new test, if the feature is something that also works in 2D mode, one of the best ways to check for consistency is to check that the resulting pixels are the same in both modes. Here's one example of that in a unit test:\n\n```js\ntest('coplanar strokes match 2D', function() {\n  const getColors = function(mode) {\n    myp5.createCanvas(20, 20, mode);\n    myp5.pixelDensity(1);\n    myp5.background(255);\n    myp5.strokeCap(myp5.SQUARE);\n    myp5.strokeJoin(myp5.MITER);\n    if (mode === myp5.WEBGL) {\n      myp5.translate(-myp5.width/2, -myp5.height/2);\n    }\n    myp5.stroke('black');\n    myp5.strokeWeight(4);\n    myp5.fill('red');\n    myp5.rect(10, 10, 15, 15);\n    myp5.fill('blue');\n    myp5.rect(0, 0, 15, 15);\n    myp5.loadPixels();\n    return [...myp5.pixels];\n  };\n  assert.deepEqual(getColors(myp5.P2D), getColors(myp5.WEBGL));\n});\n```\n\nThis doesn't always work because you can't turn off antialiasing in 2D mode, and antialiasing in WebGL mode will often be slightly different. It can work for straight lines in the x and y axes, though!\n\nIf a feature is WebGL-only, rather than comparing pixels to 2D mode, we often check a few pixels to ensure their color is what we expect. One day, we might turn this into a more robust system that compares against full image snapshots of our expected results rather than a few pixels, but for now, here is an example of a pixel color check:\n\n```js\ntest('color interpolation', function() {\n  const renderer = myp5.createCanvas(256, 256, myp5.WEBGL);\n  // upper color: (200, 0, 0, 255);\n  // lower color: (0, 0, 200, 255);\n  // expected center color: (100, 0, 100, 255);\n  myp5.beginShape();\n  myp5.fill(200, 0, 0);\n  myp5.vertex(-128, -128);\n  myp5.fill(200, 0, 0);\n  myp5.vertex(128, -128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(128, 128);\n  myp5.fill(0, 0, 200);\n  myp5.vertex(-128, 128);\n  myp5.endShape(myp5.CLOSE);\n  assert.equal(renderer._useVertexColor, true);\n  assert.deepEqual(myp5.get(128, 128), [100, 0, 100, 255]);\n});\n```\n\n### Performance Testing\n\nWhile not the #1 concern of p5.js, we try to make sure changes don't cause a large hit to performance. Typically, this is done by creating two test sketches: one with your change and one without the change. We then compare the frame rates of both.\n\nSome advice on how to measure performance:\n\n* Disable friendly errors with `p5.disableFriendlyErrors = true` at the top of your sketch (or just test `p5.min.js`, which does not include the friendly error system)\n* Display the average frame rate to get a clear sense of the steady state frame rate:\n\n```js\nlet frameRateP;\nlet avgFrameRates = [];\nlet frameRateSum = 0;\nconst numSamples = 30;\nfunction setup() {\n  // ...\n  frameRateP = createP();\n  frameRateP.position(0, 0);\n}\nfunction draw() {\n  // ...\n  const rate = frameRate() / numSamples;\n  avgFrameRates.push(rate);\n  frameRateSum += rate;\n  if (avgFrameRates.length > numSamples) {\n    frameRateSum -= avgFrameRates.shift();\n  }\n\n  frameRateP.html(round(frameRateSum) + ' avg fps');\n}\n```\n\nHere are cases we try to test since they stress different parts of the rendering pipeline:\n\n* A few very complicated shapes (e.g., a large 3D model or a long curve)\n* Many simple shapes (e.g., `line()` called many times in a for loop)\n"},"p5.js WebGL Mode Architecture\n":{"relativeUrl":"/contribute/webgl_mode_architecture","description":"{/* An overview of the design decisions that make up WebGL mode and their motivation. */}\n\n\n\nThis document is intended for contributors and library makers who want to extend the WebGL codebase. If you are looking for help using WebGL mode in your sketches, consider reading the WebGL tutorials [on the p5.js Learn page](https://p5js.org/learn/) instead.\n\n## What is WebGL mode?\n\nThere are two renderers that p5.js can run in, 2D and WebGL mode. WebGL mode in p5.js allows the user to make use of the [WebGL API](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) built into the web browser for rendering high-performance 2D and 3D graphics. The key difference between 2D mode and WebGL mode is that the latter provides more direct access to the computer's GPU, allowing it to performantly render shapes in 3D or perform other graphics and image processing tasks. \n\nWe keep track of the progress of WebGL issues in [a GitHub Project.](https://github.com/orgs/processing/projects/20)\n\n## Goals of WebGL mode\n\nWhen evaluating a new feature, we consider whether it aligns with the goals of p5.js and WebGL mode:\n\n1. **Features should be beginner-friendly:** It should provide a beginner-friendly introduction to WebGL and the features it offers. This means that we should offer simple APIs for 3D shapes, cameras, lighting, and shaders. We can still support advanced features, but only if they do not interfere with the simplicity of core features.\n2. **Improving feature parity with 2D mode:** It should be a frictionless transition from 2D mode, making 3D and WebGL \"click\" more easily for users. This means that we try to create features that work in 2D mode and also in WebGL mode. Since WebGL also has 3D and shader features, this means WebGL mode aims to have a superset of 2D mode's features.\n3. **Simplicity and extensibility are paramount:** It should have a small core and be extensible for libraries. Keeping WebGL mode small makes it easier to optimize core features and reduce bug surface area. Extension provides an avenue to include more advanced features via libraries.\n4. **Improve p5.js performance:** It should run as fast as possible without interfering with the previous goals. Good performance keeps sketches accessible to a wide variety of viewers and devices. When designing new APIs, we try to ensure the design has a performant implementation. However, we give preference to simplicity and parity with 2D mode.\n\n## Design differences with 2D mode\n\nThe browser's 2D and WebGL canvas context APIs offer very different levels of abstraction, with WebGL being generally lower-level and 2D being higher-level. This motivates some fundamental design differences between p5.js's WebGL and 2D modes.\n\n* **WebGL mode creates more deeply nested data structures.** 2D mode generally passes commands to the browser, leading to relatively shallow call stacks. In contrast, WebGL mode is responsible for breaking down shapes into triangles, rendering them, and often caching them for future reuse. The more complicated rendering logic necessitates splitting code into a number of classes like `p5.Texture`, `p5.RenderBuffer`, and `p5.DataArray` to keep implementations readable and maintainable.\n* **WebGL mode offers more customization.** For example, while 2D mode does not control how curves get rendered, WebGL is responsible for converting them into triangles. While it picks a sensible default, the `curveDetail()` API lets users control how many line segments to use, as we cannot predict the best balance of quality and performance for every use case.\n* **WebGL mode must balance high- and low-level APIs.** Since finer-grained control is available with the browser WebGL API, p5.js's WebGL mode is able to offer users some of that control where 2D mode cannot. We then are faced with the task of picking the right level of abstraction for users. Too high, and they are unable to take advantage of some of what the browser has to offer; too low, and we pass too much of the work of managing complexity and performance onto the user.\n\n## Drawing shapes\n\n### Creating shapes: fills, strokes, and 3D geometry\n\nEverything drawn by p5.js, both in 2D and WebGL, consists of fills and strokes. Sometimes, we only draw one or the other, but every shape must be ready to draw either component.\n\nAll shapes in WebGL are composed of triangles. When a user calls a function like `circle()`, `beginShape(),` or `vertex()`, the renderer must [break the shape down into a series of points](https://github.com/processing/p5.js/blob/main/src/webgl/3d_primitives.js). The points are connected into lines, and the lines into triangles. For example, `circle()` uses trigonometry to figure out where to place points along a circle. `curveVertex()` and `bezierVertex()` create look-up tables to turn any Bézier curve into points.\n\n#### Fills\n\nTo create fills, the outline of a shape needs to be filled in with triangles. Some drawing functions like `beginShape(TRIANGLE_STRIP)` already provide triangles for fills. If the shape being drawn is not already made using triangles, we use the library [libtess](https://github.com/brendankenny/libtess.js/) to break it down: in [p5.RendererGL.Immediate.js](https://github.com/processing/p5.js/blob/main/src/webgl/p5.RendererGL.Immediate.js), we run polygon outlines through `_processVertices()`. After libtess turns them into triangles, they are in a format where a shader can draw them to the screen.\n\n#### Strokes\n\nDespite their name, strokes also need to be filled in to support strokes of varying widths and styles. The lines along the outline of a shape need to expand out from their centers to form shapes with area. The expansion of strokes creates three types of shapes: joins, caps, and segments, illustrated below.\n\n<img alt=\"Illustration of the segment, join, and cap shapes created by a stroke.\" src=\"images/line-diagram.svg\" width=\"600\" />\n\n{/* Generated via https://codepen.io/davepvm/pen/ZEVdppQ */}\n\nWhere two line segments connect, we add a join. \n\n* A miter join extends the edges of the rectangles until they intersect at a point. \n* A bevel join connects the corners of the rectangles with a straight line. \n* A round join connects the corners with a circular arc. \n\nWe support switching join styles without having to recompute line triangles. To do this, we make each line join a quad, composed of two triangles. The quad extent bounds all possible join styles. We use a shader to only display pixels within the quad that are present in the selected join style. We illustrate how each style fits into the quad below.\n\n<img alt=\"The bounding quad of a stroke join and how each join style fits into it. The bounding quad is a square. Miter joins fill the whole square. Round joins round off one corner of the square. Bevel joins cut the square in half in a straight line.\" src=\"images/joins.svg\" width=\"600\" />\n\nWe use a similar strategy for stroke caps, present at the disconnected ends of lines. Each cap is a quad that bounds round, square, and extended cap styles. The line shader determines which pixels it needs to draw within those bounds. Below, we illustrate how each style fits into the quad.\n\n<img alt=\"The bounding quad of a stroke cap and how each style fits into it. The bounding quad is a rectangle. The extend cap fills the whole rectangle. The round cap places a semicircle inside the rectangle. The square cap leaves the rectangle empty.\" src=\"images/caps.svg\" width=\"600\" />\n\n3D shapes can also have strokes, but stroke shapes are calculated in 2D. This means they can change based on the camera's perspective. We want to avoid as much recalculation as possible, so we store all the information about the line that is not camera-dependent:\n\n* We include the **center points of the line** in model space, shown below in red.\n* We include the **direction of the line** using its tangent at the start and end of each shape, shown in blue and pink, respectively. This helps us compute the shape of joins where two lines connect.\n* We include **a flag that uniquely identifies each corner of the shape.** Combined with the tangent and the normal (a 90-degree rotation of the tangent), it helps determine in what direction to expand the line to give it thickness.\n\nTo draw the line, we combine that information with camera intrinsics in a shader to produce the final line positions in screen space.\n\n<img alt=\"The information stored about lines, and the final shapes that they turn into.\" src=\"images/flags.svg\" width=\"600\" />\n\n### Rendering shapes: immediate and retained modes\n\nThere are two modes that p5.js uses to draw shapes onto the screen: **immediate mode** and **retained mode.**\n\n**Immediate mode** is optimized for shapes that change every frame. If you were drawing a curve that changes each frame, its shape data would be different every time you drew it. Because of this, immediate mode fits it best. It indicates to p5.js that it does not need to spend time storing the shape for reuse, and it saves graphics memory from being filled up with all the shape variations over time. The following functions use this mode:\n\n* `vertex()`, `curveVertex()`, `bezierVertex()`, and `quadraticVertex()`, called between `beginShape()` and `endShape()`\n* `rect()` when using rounded corners\n* `bezier()`\n* `curve()`\n* `line()`\n* `image()`\n\nRetained mode is optimized for shapes that you will need to keep redrawing and don’t change shape. Once a shape is made of triangles and has been sent to the GPU to draw, retained mode keeps it there. It can then be drawn again without having to spend time re-triangulating it or sending it to the GPU again. The saved shape data is kept in a `p5.Geometry` object. `p5.Geometry` stores triangle data and keeps track of its uploaded buffers on the GPU. Calling `freeGeometry()` clears the GPU data to make space. Drawing it again after that will re-upload the data. Many 3D shape drawing functions in p5.js, such as `sphere()` or `cone()`, use this internally.\n\nYou can use `buildGeometry()` to make a `p5.Geometry` out of immediate mode commands. You call it with a function that runs a series of any p5.js shape drawing functions. It runs the function, collects the shapes into a new p5.Geometry, and returns it. The p5.Geometry can then be drawn and redrawn efficiently in the future.\n\n## Materials, lights, and shaders\n\nEvery shape we draw uses a single shader for its fills and a single shader for its strokes. There are a few default shaders that one can pick from in p5.js. You can also write and use your own shader instead of the default ones.\n\nThe default shaders work with p5.js's lighting and materials system. The user can specify what lights are in the scene with a shape and how each object reacts to light, including color and shininess. This information is given to the shader for each object being drawn. Custom shaders can also access the same lighting and material information, allowing users and library makers to extend the default rendering behavior.\n\n### Shaders\n\np5.js has a few shaders built in:\n\n* **Color Shader:** for drawing flat colors, activated by using `fill()` or `stroke()`.\n* **Lighting Shader:** for drawing 2D and 3D shapes with complex lighting and textures. Activated by calling `lights()`, `ambientLight()`, `directionalLight()`, `pointLight()`, and `spotLight()`. Each adds a light to the lighting list. All added lights contribute to the shading of the shape. If you do not use lights, the shape will be drawn using the color shader, which only uses the fill color.\n* **Normal/Debug Shader:** for drawing 2D and 3D shapes using the surface normal as a color. It is activated by calling `normalMaterial()`.\n\n### Lights\n\nUsers can set `ambientLight()`, `directionalLight()`, `pointLight()`, and `spotLight()`. Each adds a light to the lighting list. All added lights contribute to the shading of the shape. They all have a color, and some have a few other parameters, such as position or direction.\n\nFor all but `ambientLight()`, each light added contributes to the view-independent lighting of shapes and the view-dependent reflections. The reflection of each light, by default, matches the color of that light. If desired, one can change the color of all reflections by setting `specularColor()`.\n\nIf you do not use lights, the shape will be drawn using the **color shader,** which only uses the fill color.\n\n### Materials\n\nEach 3D object has a few material properties that can be set by the user:\n\n* **Fill color:** This is the color you see when there are no lights. Set it with `fill()`. If done before drawing the shape, it applies to the whole shape. If called before a `vertex()` between `beginShape()`/`endShape()`, it will apply only to that vertex. A texture, if present from a call to `texture()`, will override the fill. When there are lights, this color will be mixed with the diffuse component of the light. The diffuse component describes the bright and dark areas of the surface due to light being directly cast on it.\n* **Specular material:** This is the color that gets mixed with the specular component of the light. The specular component describes the reflected highlights seen on the shape's surface. Set this parameter with `specularMaterial()`. If unspecified, the shape will have no reflections.\n* **Shininess:** Set with `shininess()`, this is how sharp the specular reflections are.\n* **Ambient material:** This is the color that gets mixed with the ambient light. Ambient light describes constant omnidirectional light on the shape. Set this parameter with `ambientMaterial()`. If unspecified, it will be the same as the fill color.\n* **Emissive material**: Set with `emissiveMaterial()`, this adds a constant color to the lighting of the shape, as if it were producing its own light of that color.\n\n### Shader implementation\n\nThe lighting and material parameters get turned into shader attributes and uniforms. If you reference them in a custom shader, p5.js will supply them automatically.\n\nWhile advanced shader writers can take advantage of these properties, it can be unclear for new users. In the <a href=\"#future-goals\">Future Goals section</a>, we describe some plans for improving the API. We may want to improve it before publicly documenting and supporting it.\n\n#### Global\n\nFor all objects in all contexts, the following global uniforms are available:\n\n* `uniform mat4 uModelViewMatrix`: A matrix to convert object-space positions into camera-space\n* `uniform mat4 uProjectionMatrix`: A matrix to convert camera-space positions into screen space\n* `uniform mat3 uNormalMatrix`: A matrix to convert object-space normals into camera-space\n\nAdditionally, these per-vertex properties are available as attributes:\n\n* `attribute vec3 aPosition`: The position of the vertex in object space\n* `attribute vec3 aNormal`: For fills, a direction pointing outward from the surface\n* `attribute vec2 aTexCoord`: For fills, a coordinate between 0 and 1 in x and y referring to a location on a texture image\n* `attribute vec3 aVertexColor`: For fills, an optional per-vertex color\n\n#### Lights\n\n* `uniform bool uUseLighting`: Whether or not lights have been provided\n\nIf `uUseLighting` has been set, further lighting information will be passed in:\n\n##### Ambient lights\n\n* `uniform int uAmbientLightCount`: How many ambient lights are present, up to a maximum of 5\n* `uniform vec3 uAmbientColor[5]`: Ambient light colors\n\n##### Directional lights\n\n* `uniform int uDirectionalLightCount`: How many directional lights are present, up to a maximum of 5\n* `uniform vec3 uLightingDirection[5]`: Light directions\n* `uniform vec3 uDirectionalDiffuseColors[5]`: Light diffuse colors\n* `uniform vec3 uDirectionalSpecularColors[5]`: Light specular colors\n\n##### Point lights\n\n* `uniform int uPointLightCount`: How many point lights are present, up to a maximum of 5\n* `uniform vec3 uPointLightLocation[5]`: Locations of point lights\n* `uniform vec3 uPointLightDiffuseColors[5]`: Diffuse colors of point lights\n* `uniform vec3 uPointLightSpecularColors[5]`: Specular colors of point lights\n\n##### Spot lights\n\n* `uniform int uSpotLightCount`: How many spot lights are present, up to a maximum of 5\n* `uniform float uSpotLightAngle[5]`: Spot light cone radii\n* `uniform float uSpotLightConc[5]`: Concentration (focus) of each spot light\n* `uniform vec3 uSpotLightDiffuseColors[5]`: Light diffuse colors\n* `uniform vec3 uSpotLightSpecularColors[5]`: Light specular colors\n* `uniform vec3 uSpotLightLocation[5]`: Spot light locations\n* `uniform vec3 uSpotLightDirection[5]`: Spot light directions\n\n#### Materials\n\n##### Fill color\n\n* `uniform vec4 uMaterialColor`: shape fill color\n* `uniform bool uUseVertexColor`: Whether there are per-vertex colors that override the shape fill color\n* `attribute vec4 aVertexColor`: Per-vertex fill color\n* `uniform bool isTexture`: Whether a texture is specified\n* `uniform sampler2D uSampler`: A texture\n* `uniform vec4 uTint`: A tint multiplier for the texture\n\n##### Specular reflections\n\n* `uniform bool uSpecular`: Whether to show reflections\n* `uniform float uShininess`: The shininess of the material\n* `uniform vec4 uSpecularMatColor`: The material color to blend with specular light\n\n##### Ambient color\n\n* `uniform bool uHasSetAmbient`: Whether an ambient color has been set or if it should default to the fill color\n* `uniform vec4 uAmbientMatColor`: The material color to blend with ambient light\n\n#### Other shader inputs\n\n##### Lines\n\nThe default line shader is automatically supplied with these global properties in uniforms:\n\n* `uniform vec4 uViewport`: A vector containing `[minX, minY, maxX, maxY]` of the screen rectangle\n* `uniform int uPerspective`: A boolean specifying whether to apply perspective projection to line thickness\n* `uniform int uStrokeJoin`: An enum representing the join style. 0, 1, and 2 represent `ROUND`, `MITER`, `BEVEL`.\n* `uniform int uStrokeCap`: An enum representing the cap style. 0, 1, and 2 represent `ROUND`, `PROJECT`, `SQUARE`.\n\nIt also has the following per-vertex attributes:\n\n* `attribute vec3 aTangentIn`: The 3D direction at the start of the line segment\n* `attribute vec3 aTangentOut`: The 3D direction at the end of the line segment\n* `attribute float aSide`: An enum representing what part of the stroke shape the point is on. See the Strokes section for details.\n\n##### Points\n\n* `uniform float uPointSize`: The radius of the point being drawn\n\n## Classes\n\n```mermaid\n---\ntitle: p5.js WebGL Classes\n---\nclassDiagram\n    class Base[\"p5.Renderer\"] {\n    }\n    class P2D[\"p5.Renderer2D\"] {\n    }\n    class WebGL[\"p5.RendererGL\"] {\n    }\n    class Geometry[\"p5.Geometry\"] {\n    }\n    class Shader[\"p5.Shader\"] {\n    }\n    class Texture[\"p5.Texture\"] {\n    }\n    class Framebuffer[\"p5.Framebuffer\"] {\n    }\n    Base <|-- P2D\n    Base <|-- WebGL\n    WebGL \"*\" o-- \"*\" Geometry\n    WebGL \"1\" *-- \"*\" Shader\n    WebGL \"1\" *-- \"*\" Texture\n    WebGL \"1\" *-- \"*\" Framebuffer\n```\n\nThe entry point to most WebGL code is through **p5.RendererGL**. Top-level p5.js functions are passed to the current renderer. Both 2D and WebGL modes have renderer classes that conform to a common `p5.Renderer` interface. Immediate mode and retained mode functions are split up into `p5.RendererGL.Immediate.js` and `p5.RendererGL.Retained.js`.\n\nWithin the renderer, references to models are stored in the `retainedMode.geometry` map. Each value is an object storing the buffers of a `p5.Geometry` When calling `model(yourGeometry)` for the first time, the renderer adds an entry in the map. It then stores references to the geometry's GPU resources there. If you draw a `p5.Geometry` to the main canvas and also to a WebGL `p5.Graphics`, it will have entries in two renderers.\n\nEach material is represented by a `p5.Shader` You set the current shader in the renderer via the `shader(yourShader)` function. This class handles compiling shader source code and setting shader uniforms.\n\nWhen setting a shader uniform, if the uniform type is an image, then the renderer creates a `p5.Texture` for it. Each `p5.Image`, `p5.Graphics`, `p5.MediaElement`, or `p5.Framebuffer` asset will get one. It is what keeps track of the image data's representation on the GPU. Before using the asset in a shader, p5.js will send new data to the GPU if necessary. For images, this happens when a user has manually updated the pixels of an image. This happens every frame for assets with data that may have changed each frame, such as a video or a `p5.Graphics`.\n\nTextures corresponding to `p5.Framebuffer` objects are unique. Framebuffers are like graphics: they represent surfaces that can be drawn to. Unlike `p5.Graphics`, `p5.Framebuffer`s live entirely on the GPU. If one uses a `p5.Graphics` as a texture in a shader, the data needs to be transferred to and from the CPU. This can often be a performance bottleneck. In contrast, when drawing to a `p5.Framebuffer`, you draw directly to its GPU texture. Because of this, no extra data transfer is necessary. WebGL mode tries to use `p5.Framebuffer`s over `p5.Graphics` where possible for this reason.\n\n## Future goals\n\nCurrently, WebGL mode is functional for a variety of tasks, but many users and library makers want to extend it in new directions. We aim to create a set of building blocks from which users and library makers can craft extensions. A block can be considered \"done\" when it has an extensible API we can confidently commit to supporting. A major milestone for WebGL mode will be when we have a sufficient set of such blocks for an ecosystem of libraries. The main areas currently lacking in extension support are geometry and materials.\n\n* **Extend p5.Geometry to support richer content.** Creating geometry is possible, but many tasks a user might want to accomplish are not yet supported with a stable API. One might want to efficiently update geometry, which is necessary to support animated gltf models. One might want to group multiple materials in one object, if they are present in an imported model. One might want to add custom vertex attributes for a shader to work with. These tasks are currently unsupported.\n* **Enable less brittle custom shaders.** To create a shader that integrates p5.js's lighting and materials system, a user is currently forced to create shaders from scratch. These shaders often copy and paste parts of default shaders. This may break between versions if internal naming or structure changes. To be less brittle, libraries should be able to import and reuse default pieces. This lets libraries reuse positioning logic or augment positioning logic but reuse shading logic. There is currently [an issue open for this task.](https://github.com/processing/p5.js/issues/6144)\n* **Improve performance.** WebGL mode tries to strike a balance between features and performance. One method is to introduce APIs to tune output quality, like how `curveDetail()` allows faster but lower-quality curves. Line rendering is one of the common performance bottlenecks in its present state, and it could benefit from having lower fidelity but higher performance options. Another method is to introduce new types of objects and rendering methods that are optimized for different usage patterns, like how `endShape(shouldClose, count)` now supports WebGL 2 instanced rendering for more efficient drawing of many shapes.\n"}},"examples":{"Shape Primitives":{"relativeUrl":"/examples/shapes-and-color-shape-primitives","description":"\nThis program demonstrates the use of the basic shape\nprimitive functions\n<a href=\"https://p5js.org/reference/#/p5/square\" target=\"_blank\">square()</a>,\n<a href=\"https://p5js.org/reference/#/p5/rect\" target=\"_blank\">rect()</a>,\n<a href=\"https://p5js.org/reference/#/p5/ellipse\" target=\"_blank\">ellipse()</a>,\n<a href=\"https://p5js.org/reference/#/p5/circle\" target=\"_blank\">circle()</a>,\n<a href=\"https://p5js.org/reference/#/p5/arc\" target=\"_blank\">arc()</a>,\n<a href=\"https://p5js.org/reference/#/p5/line\" target=\"_blank\">line()</a>,\n<a href=\"https://p5js.org/reference/#/p5/triangle\" target=\"_blank\">triangle()</a>,\nand <a href=\"https://p5js.org/reference/#/p5/quad\" target=\"_blank\">quad()</a>."},"Color":{"relativeUrl":"/examples/shapes-and-color-color","description":"\r\nThis expands on the Shape Primitives example by adding\r\ncolor.\r\n<a href=\"https://p5js.org/reference/#/p5/background\" target=\"_blank\">background()</a>\r\nfills the canvas with one color,\r\n<a href=\"https://p5js.org/reference/#/p5/stroke\" target=\"_blank\">stroke()</a>\r\nsets the color for drawing lines, and\r\n<a href=\"https://p5js.org/reference/#/p5/fill\" target=\"_blank\">fill()</a>\r\nsets the color for the inside of shapes.\r\n<a href=\"https://p5js.org/reference/#/p5/noFill\" target=\"_blank\">noStroke()</a> and\r\n<a href=\"https://p5js.org/reference/#/p5/noFill\" target=\"_blank\">noFill()</a>\r\nturn off line color and inner color, respectively.\r\n\r\nColors can be represented in many different ways. This example demonstrates several options."},"Drawing Lines":{"relativeUrl":"/examples/animation-and-variables-drawing-lines","description":"\r\nClick and drag the mouse to draw a line.\r\n\r\nThis example demonstrates the use of several built-in\r\nvariables.\r\n<a href=\"https://p5js.org/reference/#/p5/mouseX\">mouseX</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/mouseY\">mouseY</a>\r\nstore the current mouse position, while the\r\nprevious mouse position is represented by\r\n<a href=\"https://p5js.org/reference/#/p5/pmouseX\">pmouseX</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/pmouseY\">pmouseY</a>.\r\n *\r\nThis example also shows the use of\r\n<a href=\"https://p5js.org/reference/#/p5/colorMode\">colorMode</a> with HSB\r\n(hue-saturation-brightness), so that the first variable sets the hue."},"Animation with Events":{"relativeUrl":"/examples/animation-and-variables-animation-with-events","description":"\r\nThis example demonstrates the use of\r\n<a href=\"https://p5js.org/reference/#/p5/loop\">loop()</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/noLoop\">noLoop()</a>\r\nto pause and resume the animation.\r\n\r\nClicking the mouse toggles the animation loop. If the animation\r\nloop is stopped, the user can press any key to advance one frame.\r\nNote: the user must click to set the focus on the canvas for\r\nkey presses to be registered.\r\n\r\nAdvancing a single frame is accomplished by calling the\r\n<a href=\"https://p5js.org/reference/#/p5/redraw\">redraw()</a>\r\nfunction, which results in a single call to the draw() function."},"Mobile Device Movement":{"relativeUrl":"/examples/animation-and-variables-mobile-device-movement","description":"\r\nThe <a href=\"https://p5js.org/reference/#/p5/deviceMoved\" target=\"_blank\">deviceMoved()</a>\r\nfunction runs when the mobile device displaying the sketch moves.\r\nIn this example, the\r\n<a href=\"https://p5js.org/reference/#/p5/accelerationX\" target=\"_blank\">accelerationX</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/accelerationY\" target=\"_blank\">accelerationY</a>,\r\nand <a href=\"https://p5js.org/reference/#/p5/accelerationZ\" target=\"_blank\">accelerationZ</a>\r\nvalues set the position and size of a circle.\r\nThis only works for mobile devices."},"Conditions":{"relativeUrl":"/examples/animation-and-variables-conditions","description":"\r\nIf and else statements allow a\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\" target=\"_blank\">block of code</a>\r\nto run only when a certain condition is true. This example only\r\nanimates when the mouse is held down. This is because of the if\r\nstatement on line 59. You can read more about if and else statements\r\n<a href=\"https://p5js.org/reference/#/p5/if-else\">in the p5 reference</a>\r\nor <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\" target=\"_blank\">on MDN</a>.\r\n\r\nComparison operators help to form conditions by comparing two\r\nvalues. In this example, the hue of the circle resets to zero when\r\nthe hue is at least 360 because of the if statement on line 69.\r\nYou can read more about comparison operators\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators\" target=\"_blank\">on MDN</a>.\r\n\r\nLogical operators allow conditions to be combined.\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\" target=\"_blank\">&amp;&amp;</a>\r\nchecks that both conditions are true. The circle in this example\r\nhas a black fill when it is toward the horizontal center of the canvas, and it\r\nhas a white fill when it is not. This is because of the if statement on line\r\n45, which checks that the circle's x position is at least 100 and also\r\nno more than 300.\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\" target=\"_blank\">||</a>\r\nchecks that at least one of the conditions is true. The circle reverses horizontal\r\nspeed when it reaches the left or right edge of the canvas because of the if statement\r\non line 75.\r\n"},"Words":{"relativeUrl":"/examples/imported-media-words","description":"\r\nThe <a href=\"https://p5js.org/reference/#/p5/text\" target=\"_blank\">text()</a> function is used for inserting text into the canvas.\r\nYou can change the font and text size using the <a href=\"https://p5js.org/reference/#/p5/loadFont\" target=\"_blank\">loadFont()</a>\r\nand <a href=\"https://p5js.org/reference/#/p5/fontSize\" target=\"_blank\">fontSize()</a> functions.\r\nThe text can be aligned left, center, or right with the <a href=\"https://p5js.org/reference/#/p5/textAlign\" target=\"_blank\">textAlign()</a>\r\nfunction, and, like shapes, text can be colored with <a href=\"https://p5js.org/reference/#/p5/fill\" target=\"_blank\">fill()</a>."},"Copy Image Data":{"relativeUrl":"/examples/imported-media-copy-image-data","description":"\r\nUsing the <a href=\"https://p5js.org/reference/#/p5/copy\" target=\"_blank\">copy()</a> \r\nmethod, you can simulate coloring an image in by copying an image of the colored \r\nimage on top of the black-and-white image wherever the cursor is dragged."},"Alpha Mask":{"relativeUrl":"/examples/imported-media-alpha-mask","description":"\r\nUsing the \r\n<a href=\"https://p5js.org/reference/#/p5/mask\" target=\"_blank\">mask()</a> \r\nmethod, you can create a mask for an image to specify the transparency in\r\ndifferent parts of the image. To run this example locally, you will need two\r\nimage files and a running \r\n<a href=\"https://github.com/processing/p5.js/wiki/Local-server\">local server</a>."},"Image Transparency":{"relativeUrl":"/examples/imported-media-image-transparency","description":"\r\nThis program overlays one image over another by modifying the\r\nalpha value of the image with the\r\n<a href=\"https://p5js.org/reference/#/p5/tint\" target=\"_blank\">tint()</a>\r\nfunction. Move the cursor left and right across the canvas to change the\r\nimage's position. To run this example\r\nlocally, you will need an image file and a running\r\n<a href=\"https://github.com/processing/p5.js/wiki/Local-server\">local server</a>."},"Audio Player":{"relativeUrl":"/examples/imported-media-create-audio","description":"\r\n<a href=\"https://p5js.org/reference/#/p5/createAudio\" target=\"_blank\">createAudio()</a>\r\ncreates an audio player. This example displays the player's controls\r\nand adjusts its speed. The playback speed is normal when the mouse\r\nis on the left edge of the window, and it gets faster as the mouse\r\nmoves to the right. More information on using media elements such as\r\naudio players is on the\r\n<a href=\"https://p5js.org/reference/#/p5.MediaElement\" target=\"_blank\">p5.MediaElement</a>\r\nreference page. The audio file is a\r\n<a href=\"https://freesound.org/people/josefpres/sounds/711156/\" target=\"_blank\">public domain piano loop by Josef Pres</a>."},"Video Player":{"relativeUrl":"/examples/imported-media-video","description":"\r\nUsing the <a href=\"https://p5js.org/reference/#/p5/noCanvas\" target=\"_blank\">noCanvas()</a>\r\nand <a href=\"https://p5js.org/reference/#/p5/createVideo\" target=\"_blank\">createVideo()</a> \r\nfunctions, you can upload a video into the \r\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/DOM\" target=\"_blank\">DOM</a> \r\nwithout embedding the video within a canvas. For building a video embedded within the canvas element,\r\nvisit the \r\n<a href=\"https://p5js.org/examples/dom-video-canvas.html\" target=\"_blank\">Video Canvas</a> example."},"Video on Canvas":{"relativeUrl":"/examples/imported-media-video-canvas","description":"\r\nUsing the \r\n<a href=\"https://p5js.org/reference/#/p5/createVideo\" target=\"_blank\">createVideo()</a>\r\nand <a href=\"https://p5js.org/reference/#/p5/image\" target=\"_blank\">image()</a> \r\nfunctions, you can upload a video into the canvas. Since the video capture is \r\npassed through the\r\n<a href=\"https://p5js.org/reference/#/p5/image\" target=\"_blank\">image()</a> \r\nconstructor, you can add filters to the video capture using the \r\n<a href=\"https://p5js.org/reference/#/p5/filter\" target=\"_blank\">filter()</a> \r\nmethod. To run this example locally, you will need a running \r\n<a href=\"https://github.com/processing/p5.js/wiki/Local-server\">local server</a>.\r\nTo build a video without embedding it within the canvas, visit the \r\n<a href=\"https://p5js.org/examples/dom-video.html\">Video</a> example."},"Video Capture":{"relativeUrl":"/examples/imported-media-video-capture","description":"\r\nUsing the \r\n<a href=\"https://p5js.org/reference/#/p5/createCapture\" target=\"_blank\">createCapture()</a>\r\nand <a href=\"https://p5js.org/reference/#/p5/image\" target=\"_blank\">image()</a> \r\nfunctions, you can take a device's video capture and draw it in the canvas. \r\nSince the video capture is passed through the\r\n<a href=\"https://p5js.org/reference/#/p5/image\" target=\"_blank\">image()</a> \r\nconstructor, you can add filters to the video capture with the \r\n<a href=\"https://p5js.org/reference/#/p5/filter\" target=\"_blank\">filter()</a> \r\nmethod. For different strategies for uploading, presenting, or styling videos, \r\nvisit the\r\n<a href=\"https://p5js.org/examples/dom-video.html\" target=\"_blank\">Video</a> and\r\n<a href=\"https://p5js.org/examples/dom-video-canvas.html\" target=\"_blank\">Video Canvas</a> \r\nexamples."},"Image Drop":{"relativeUrl":"/examples/input-elements-image-drop","description":"\r\n<a href=\"https://p5js.org/reference/#/p5.Element/drop\" target=\"_blank\">drop()</a>\r\nis a p5.js element method that registers a callback every time a file is loaded \r\ninto the element. The uploaded file is created into a \r\n<a href=\"https://p5js.org/reference/#/p5.File\" target=\"_blank\">p5.File</a> \r\nclass. You can use the \r\n<a href=\"https://p5js.org/reference/#/p5.Element/drop\" target=\"_blank\">drop()</a> \r\ncallback to check the file type, then write conditional statements responding to \r\nthe file type."},"Input and Button":{"relativeUrl":"/examples/input-elements-input-button","description":"\r\nUsing the \r\n<a href=\"https://p5js.org/reference/#/p5.Element/createElement\" target=\"_blank\">createElement()</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/createInput\" target=\"_blank\">createInput()</a>,\r\nand <a href=\"https://p5js.org/reference/#/p5.Element/createButton\" target=\"_blank\">createButton()</a> \r\nfunctions, you can take a string of text submitted via text input and display \r\nit on your canvas."},"Form Elements":{"relativeUrl":"/examples/input-elements-dom-form-elements","description":"\r\nThe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\" target=\"_blank\">Document Object Model</a>,\r\nor DOM, represents the resulting structure of the web page. Using p5.js's form elements,\r\nsuch as <a href=\"https://p5js.org/reference/#/p5/createInput\" target=\"_blank\">createInput()</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/createSelect\" target=\"_blank\">createSelect()</a>,\r\nand <a href=\"https://p5js.org/reference/#/p5/createRadio\" target=\"_blank\">createRadio()</a>, you can build different ways to take information submitted through\r\na <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\" target=\"_blank\">select</a>,\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\" target=\"_blank\">input</a>,\r\nor <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\" target=\"_blank\">radio button</a> and update the DOM based on the information.\r\n "},"Translate":{"relativeUrl":"/examples/transformation-translate","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/translate\">translate()</a>\r\nfunction moves the origin of the coordinate system to the specified\r\nlocation.\r\n\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/push\">push()</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/pop\">pop()</a>\r\nfunctions save and restore the coordinate system and various\r\nother drawing settings, such as the fill color.\r\n\r\nNote that in this example, we draw the shapes (rectangle and\r\ncircle) each time in a different coordinate system."},"Rotate":{"relativeUrl":"/examples/transformation-rotate","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/rotate\">rotate()</a>\r\nfunction rotates the current coordinate system around the current\r\norigin.\r\n\r\nNote that by default the origin is the upper left corner of the canvas.\r\nIn order to rotate around the center of the canvas, we must first\r\ntranslate the coordinate system, and then rotate around the new origin.\r\n\r\nThe \r\n<a href=\"https://p5js.org/reference/#/p5/push\">push()</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/pop\">pop()</a>\r\nfunctions save and restore the coordinate system, respectively."},"Scale":{"relativeUrl":"/examples/transformation-scale","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/scale\">scale()</a>\r\nfunction scales the current coordinate system by the specified\r\nfactor.\r\n\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/push\">push()</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/pop\">pop()</a>\r\nfunctions save and restore the coordinate system, respectively.\r\n\r\nIn this example, a square size 200 is drawn at the origin, with\r\nthree different scaling factors."},"Linear Interpolation":{"relativeUrl":"/examples/calculating-values-interpolate","description":"\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Interpolation\" target=\"_blank\">Interpolation</a>\r\ncalculates a value between two other values. For example, the number 5 is\r\nhalfway between 0 and 10. Different types of interpolation use\r\ndifferent rates of change between values. Linear interpolation,\r\nabbreviated as lerp, uses a constant rate of change. The\r\n<a href=\"https://p5js.org/reference/#/p5/lerp\" target=\"_blank\">lerp()</a>\r\nfunction linearly interpolates between two numbers.\r\n\r\nMove the mouse across the screen and the symbol will follow.\r\nBetween drawing each frame of the animation, the ellipse moves part\r\nof the distance from its current position toward the cursor."},"Map":{"relativeUrl":"/examples/calculating-values-map","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/map\" target=\"_blank\">map()</a>\r\nfunction converts a value from one range to another. In this example, map\r\nconverts the cursor's horizontal position from a range of 0-720 to 0-360.\r\nThe resulting value become the circle's hue. Map also converts the cursor's\r\nvertical position from a range of 0-400 to 20-300. The resulting value\r\nbecomes the circle's diameter."},"Random":{"relativeUrl":"/examples/calculating-values-random","description":"\r\nThis example demonstrates the use of the\r\n<a href=\"https://p5js.org/reference/#/p5/random\">random()</a>\r\nfunction.\r\n\r\nWhen the user presses the mouse button, the position and color\r\nof the circle change randomly."},"Constrain":{"relativeUrl":"/examples/calculating-values-constrain","description":"\r\nThis example draws a circle as the cursor's position but\r\nkeeps the circle within a rectangle. It does so by passing the\r\nmouse's coordinates into the\r\n<a href=\"https://p5js.org/reference/#/p5/constrain\" target=\"_blank\">constrain()</a>\r\nfunction."},"Clock":{"relativeUrl":"/examples/calculating-values-clock","description":"\r\nThe current time can be read with the\r\n<a href=\"https://p5js.org/reference/#/p5/second\" target=\"_blank\">second()</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/minute\" target=\"_blank\">minute()</a>,\r\nand <a href=\"https://p5js.org/reference/#/p5/minute\" target=\"_blank\">hour()</a>\r\nfunctions. This example uses\r\n<a href=\"https://p5js.org/reference/#/p5/map\" target=\"_blank\">map()</a>\r\nto calculate the angle of the hands. It then uses\r\n<a href=\"https://p5js.org/reference/#group-Transform\" target=\"_blank\">transformations</a>\r\nto set their position."},"Color Interpolation":{"relativeUrl":"/examples/repetition-color-interpolation","description":"\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Interpolation\" target=\"_blank\">Interpolation</a>\r\ncalculates a value between two other values. For example, the number 5 is\r\nhalfway between 0 and 10. Different types of interpolation use\r\ndifferent rates of change between values. Linear interpolation,\r\nabbreviated as lerp, uses a constant rate of change. The\r\n<a href=\"https://p5js.org/reference/#/p5/lerp\" target=\"_blank\">lerp()</a>\r\nfunction linearly interpolates between two numbers. The\r\n<a href=\"https://p5js.org/reference/#/p5/lerpColor\" target=\"_blank\">lerpColor()</a>\r\nfunction, demonstrated here, linearly interpolates between two colors.\r\nIn this example, the stripeCount variable adjusts how many horizontal\r\nstripes appear. Setting the value to a higher number will look less\r\nlike individual stripes and more like a gradient."},"Color Wheel":{"relativeUrl":"/examples/repetition-color-wheel","description":"\r\nThis example illustrates the appearance of different\r\nhues. It uses a\r\n<a href=\"https://p5js.org/reference/#/p5/for\" target=\"_blank\">for loop</a>\r\nto repeat transformations. The loop initializes\r\na variable called angle, which changes the rotation of a circle as\r\nwell as its hue. Each time the loop repeats, a circle is drawn\r\nrelative to the center of the canvas. The\r\n<a href=\"https://p5js.org/reference/#/p5/push\" target=\"_blank\">push()</a>\r\nand <a href=\"https://p5js.org/reference/#/p5/pop\" target=\"_blank\">pop()</a>\r\nfunctions make these transformations affect only the individual circle."},"Bezier":{"relativeUrl":"/examples/repetition-bezier","description":"\r\n<a href=\"https://p5js.org/reference/#/p5/bezier\" target=\"_blank\">bezier()</a> \r\ncurves are created using control and anchor points.\r\nThe first two parameters for the \r\n<a href=\"https://p5js.org/reference/#/p5/bezier\" target=\"_blank\">bezier()</a>\r\nfunction specify the first point in the curve and the last two parameters \r\nspecify the last point. The middle parameters set the control points that \r\ndefine the shape of the curve."},"Kaleidoscope":{"relativeUrl":"/examples/repetition-kaleidoscope","description":"\r\nA kaleidoscope is an optical instrument with two or more\r\nreflecting surfaces tilted to each other at an angle. Using the\r\n<a href=\"https://p5js.org/reference/#/p5/translate\" target=\"_blank\">translate()</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/rotate\" target=\"_blank\">rotate()</a>,\r\nand <a href=\"https://p5js.org/reference/#/p5/scale\" target=\"_blank\">scale()</a> functions, you can replicate the resulting visual\r\nof a kaleidoscope in a canvas."},"Noise":{"relativeUrl":"/examples/repetition-noise","description":"\r\n<a href=\"https://en.wikipedia.org/wiki/Perlin_noise\" target=\"_blank\">Perlin noise</a>\r\nis an algorithm written by Ken Perlin to produce sequences that appear both\r\nrandom and organic. The\r\n<a href=\"https://p5js.org/reference/#/p5/noise\" target=\"_blank\">noise()</a>\r\nfunction in p5 produces Perlin noise.\r\n\r\nThe dots in this example are sized based on noise values. The slider on the\r\nleft sets the distance between dots. The slider on the right sets an offset\r\nin the noise calculation."},"Recursive Tree":{"relativeUrl":"/examples/repetition-recursive-tree","description":"\r\nThis is an example of rendering a simple tree-like structure via recursion.\r\nThe branching angle is calculated as a function of the horizontal mouse\r\nlocation. Move the mouse left and right to change the angle.\r\nBased on Daniel Shiffman's <a href=\"https://processing.org/examples/tree.html\">Recursive Tree Example</a> for Processing.\r\n"},"Random Poetry":{"relativeUrl":"/examples/listing-data-with-arrays-random-poetry","description":"\r\nUsing the\r\n<a href=\"https://p5js.org/reference/#/p5/floor\" target=\"_blank\">floor()</a>\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/random\" target=\"_blank\">random()</a>\r\nfunctions, you can randomly select a series of items from an array\r\nand draw them at different sizes and positions on the canvas."},"Sine and Cosine":{"relativeUrl":"/examples/angles-and-motion-sine-cosine","description":"\r\nThis example demonstrates the\r\n<a href=\"https://en.wikipedia.org/wiki/Sine_and_cosine\">sine and cosine</a>\r\nmathematical functions.\r\n\r\nThe animation shows uniform circular motion around the unit circle\r\n(circle with radius 1). Any angle measured from the the x-axis\r\ndetermines a point on the circle. The cosine and sine of the angle\r\nare defined to be the x and y coordinates, respectively, of that\r\npoint."},"Aim":{"relativeUrl":"/examples/angles-and-motion-aim","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/atan2\" target=\"_blank\">atan2()</a>\r\nfunction calculates the angle between two positions. The angle it\r\ncalculates can be used to rotate a shape toward something. In this\r\nexample, the eyes rotate to look at the cursor."},"Triangle Strip":{"relativeUrl":"/examples/angles-and-motion-triangle-strip","description":"\r\nThis example demonstrates how to create a shape\r\nby specifying its vertices in TRIANGLE_STRIP mode, using the\r\n<a href=\"https://p5js.org/reference/#/p5/beginShape\">beginShape()</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/endShape\">endShape()</a>,\r\nand\r\n<a href=\"https://p5js.org/reference/#/p5/vertex\">vertex()</a>\r\nfunctions."},"Circle Clicker":{"relativeUrl":"/examples/games-circle-clicker","description":"\r\nThis example demonstrates a game with a time limit and score. The browser's\r\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">local storage</a>\r\nstores the high score so when the game is played again using the same browser,\r\nthe high score remains. Clearing the browser data also clears the high score."},"Ping Pong":{"relativeUrl":"/examples/games-ping-pong","description":"\r\nThis is a game inspired by one of the oldest arcade video\r\ngames: Atari's\r\n<a href=\"https://en.wikipedia.org/wiki/Pong\" target=\"_blank\">Pong</a>.\r\nIn this two-player game, each player controls a paddle, represented by a\r\nwhite rectangle. The W and S keys move the paddle on the left up and down,\r\nand the up and down arrow keys move the paddle on the right up and down.\r\nPlayers score points by bouncing the ball, represented by a white square,\r\npast the edge of the opponent's side of the canvas.`"},"Snake":{"relativeUrl":"/examples/games-snake","description":"\r\nThis is a reproduction of a type of arcade game called\r\n<a href=\"https://en.wikipedia.org/wiki/Snake_(video_game_genre)\" target=\"_blank\">Snake</a>.\r\nThe first Snake game was Blockade, released in 1976, and many\r\ngames use the same structure. In Snake games, the player controls\r\nthe movements of a snake, represented in this example by a green\r\nline. The player's goal is to collide the snake with a fruit,\r\nrepresented by a red dot. Each time the snake collides with a fruit,\r\nthe snake grows longer. The player's goal is grow the snake as long\r\nas possible without colliding the snake into itself or into the edges\r\nof the play area.\r\n\r\nThis example uses an array of\r\n<a href=\"https://p5js.org/reference/#/p5.Vector\" target=\"_blank\">vectors</a>\r\nto store the positions of each of the segments of the snake. The arrow\r\nkeys control the snake's movement."},"Geometries":{"relativeUrl":"/examples/3d-geometries","description":"\r\np5's\r\n<a href=\"https://p5js.org/reference/#/p5/WEBGL\" target=\"_blank\">WEBGL</a>\r\nmode includes 7 primitive shapes. Those shapes are plane, box,\r\ncylinder, cone, torus, sphere, and ellipsoid. Additionally,\r\n<a href=\"https://p5js.org/reference/#/p5/model\" target=\"_blank\">model()</a>\r\ndisplays a custom geometry loaded via\r\n<a href=\"https://p5js.org/reference/#/p5/loadModel\" target=\"_blank\">loadModel()</a>.\r\nThis example includes each of the primitive shapes. It also includes a model\r\nfrom <a href=\"https://nasa3d.arc.nasa.gov/models\" target=\"_blank\">NASA's collection</a>."},"Custom Geometry":{"relativeUrl":"/examples/3d-custom-geometry","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/buildGeometry\" target=\"_blank\">buildGeometry()</a>\r\nfunction stores shapes into a 3D model that can be efficiently used and\r\nreused."},"Materials":{"relativeUrl":"/examples/3d-materials","description":"\r\nIn 3D rendering, a material determines how a surface\r\nresponds to light. p5's\r\n<a href=\"https://p5js.org/reference/#/p5/WEBGL\" target=\"_blank\">WEBGL</a>\r\nmode supports\r\n<a href=\"https://p5js.org/reference/#/p5/ambientMaterial\" target=\"_blank\">ambient</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/emissiveMaterial\" target=\"_blank\">emissive</a>,\r\n<a href=\"https://p5js.org/reference/#/p5/normalMaterial\" target=\"_blank\">normal</a>, and\r\n<a href=\"https://p5js.org/reference/#/p5/specularMaterial\" target=\"_blank\">specular</a>\r\nmaterials.\r\n\r\nAn ambient material responds to ambient light only. A specular\r\nmaterial responds to any light source. In p5, an emissive material\r\ndisplays its color regardless of light source. In other contexts,\r\ntypically an emissive material emits light. A normal material\r\nvisualizes the direction each part of the surface faces. A normal\r\nmaterial does not respond to light.\r\n\r\nAmbient and emissive materials can be combined with each other.\r\nThey can also be combined with fill and stroke. Fill sets a base\r\ncolor for the surface, and stroke sets the color for the object's\r\nvertices.\r\n\r\nAdditionally,\r\n<a href=\"https://p5js.org/reference/#/p5/texture\" target=\"_blank\">texture()</a>\r\nwraps an object with an image. The model and image texture in this example are\r\nfrom <a href=\"https://nasa3d.arc.nasa.gov\" target=\"_blank\">NASA's collection</a>."},"Orbit Control":{"relativeUrl":"/examples/3d-orbit-control","description":"\r\n<a href=\"https://p5js.org/reference/#/p5/orbitControl\" target=\"_blank\">Orbit control</a>\r\nuses mouse or touch input to adjust camera orientation in a 3D\r\nsketch. To rotate the camera, left click and drag a mouse or swipe\r\non a touch screen. To pan the camera, right click and drag a mouse\r\nor swipe with multiple fingers on a touch screen. To move the camera\r\ncloser or further to the center of the sketch, use the scroll wheel\r\non a mouse or pinch in/out on a touch screen."},"Filter Shader":{"relativeUrl":"/examples/3d-filter-shader","description":"\r\nFilter shaders are a way to apply an effect to anything that\r\nis on the canvas. In this example, the effect is applied to a video."},"Adjusting Positions with a Shader":{"relativeUrl":"/examples/3d-adjusting-positions-with-a-shader","description":"\r\nShaders can adjust the positions of the vertices of shapes.\r\nThis lets you distort and animate 3D models."},"Framebuffer Blur":{"relativeUrl":"/examples/3d-framebuffer-blur","description":"\r\nThe\r\n<a href=\"https://www.khronos.org/opengl/wiki/Shader\" target=\"_blank\">shader</a>\r\nin this example uses depth information from a\r\n<a href=\"https://p5js.org/reference/#/p5.Framebuffer\" target=\"_blank\">p5.Framebuffer</a>\r\nto apply a blur. On a real camera, objects appear blurred if they\r\nare closer or farther than the lens's focus. This simulates that\r\neffect. First, the sketch renders five spheres to the framebuffer.\r\nThen, it renders the framebuffer to the canvas using the blur shader."},"Create Graphics":{"relativeUrl":"/examples/advanced-canvas-rendering-create-graphics","description":"\r\nThe\r\n<a href=\"https://p5js.org/reference/#/p5/createGraphics\" target=\"_blank\">createGraphics()</a>\r\nfunction can be used to create a new p5.Graphics object, which can serve as\r\nan off-screen graphics buffer within the canvas. Off-screen buffers can have\r\ndifferent dimensions and properties than their current display surface, even\r\nthough they appear to be existing in the same space."},"Multiple Canvases":{"relativeUrl":"/examples/advanced-canvas-rendering-multiple-canvases","description":"\r\nBy default, p5 runs in Global Mode, which means that\r\nall p5 functions are in the global scope, and all canvas-related functions\r\napply to a single canvas. p5 can also run in Instance Mode, in which those\r\nsame functions are methods of an instance of the p5 class. Each instance of\r\np5 may have its own canvas.\r\n\r\nTo use instance mode, a function must be defined with a parameter representing\r\nthe p5 instance (labeled p in this example). All the p5 functions and variables\r\nthat are typically global will belong to this parameter within this function's\r\nscope. Passing the function into the p5 constructor, runs it."},"Shader as a Texture":{"relativeUrl":"/examples/advanced-canvas-rendering-shader-as-a-texture","description":"\r\nShaders can be applied to 2D/3D shapes as textures.\r\n\r\nTo learn more about using shaders in p5.js:\r\n<a href=\"https://itp-xstory.github.io/p5js-shaders/\">p5.js Shaders</a>"},"Snowflakes":{"relativeUrl":"/examples/classes-and-objects-snowflakes","description":"\r\nThis example demonstrates the use of a particle system\r\nto simulate the motion of falling snowflakes. This program defines a\r\nsnowflake\r\n<a href=\"https://p5js.org/reference/#/p5/class\">class</a>\r\nand uses an array to hold the snowflake objects."},"Shake Ball Bounce":{"relativeUrl":"/examples/classes-and-objects-shake-ball-bounce","description":"\r\nUsing a \r\n<a href=\"https://p5js.org/reference/#/p5/class\" target=\"_blank\">class</a>, \r\nyou can create a collection of circles that move within the canvas in \r\nresponse to the tilt of a mobile device. You must open this page on a mobile \r\ndevice to display the sketch."},"Connected Particles":{"relativeUrl":"/examples/classes-and-objects-connected-particles","description":"\r\nThis example uses two custom\r\n<a href=\"https://p5js.org/reference/#/p5/class\" target=\"_blank\">classes</a>.\r\nThe Particle class stores a position, velocity, and hue. It renders\r\na circle using the current position and hue, and it updates the\r\nposition using the current velocity. The Path class stores an array\r\nof objects created from the Particle class. It renders lines\r\nconnecting each of the particles. When the user clicks the mouse, the\r\nsketch creates a new instance of the Path class. When the user drags\r\nthe mouse, the sketch adds a new instance of the Particle class to\r\nthe current path.\r\n"},"Flocking":{"relativeUrl":"/examples/classes-and-objects-flocking","description":"\r\nDemonstration of flocking behavior.\r\nFull discussion of the implementation can be found in the\r\n<a href=\"https://natureofcode.com/book/chapter-6-autonomous-agents/\">Nature of Code</a>\r\nbook by Daniel Shiffman. The simulation is based on the research of\r\n<a href=\"http://www.red3d.com/cwr/\">Craig Reynolds</a>, who\r\nused the term 'boid' to represent a bird-like object."},"Local Storage":{"relativeUrl":"/examples/loading-and-saving-data-local-storage","description":"\nBrowsers allow websites to store data on the visitor's\ndevice. This is called\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\">local storage</a>.\nThe <a href=\"https://p5js.org/reference/#/p5/getItem\" target=\"_blank\">getItem()</a>,\n<a href=\"https://p5js.org/reference/#/p5/storeItem\" target=\"_blank\">storeItem()</a>,\n<a href=\"https://p5js.org/reference/#/p5/clearStorage\" target=\"_blank\">clearStorage()</a>,\nand <a href=\"https://p5js.org/reference/#/p5/removeItem\" target=\"_blank\">removeItem()</a>\nfunctions control it.\n\nThis example is inspired by Daniel Shiffman's Loading JSON Data and Loading \nTabular Data examples for Processing written in Java. It uses a\n<a href=\"https://p5js.org/reference/#/p5/class\" target=\"_blank\">class</a>\nto organize data for a bubble. The visitor can add new bubbles, and their data \nwill be saved in local storage. If the visitor revisits the sketch, it will\nreload the same bubbles."},"JSON":{"relativeUrl":"/examples/loading-and-saving-data-json","description":"\n<a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON\" target=\"_blank\">JavaScript Object Notation, or JSON</a>,\nis a format for writing data in a file. While the syntax comes from\nJavaScript, JSON is used in many other contexts. This example  is\nbased on Daniel Shiffman's Loading JSON Data Example for Processing\nwritten in Java. It uses a\n<a href=\"https://p5js.org/reference/#/p5/class\" target=\"_blank\">class</a>\nto organize data for a bubble. When the sketch starts, it\nloads the data for two bubbles from a JSON file. The visitor can add\nnew bubbles, download an updated JSON file, and load in a JSON file."},"Table":{"relativeUrl":"/examples/loading-and-saving-data-table","description":"\nComma-Separated Values, or CSV, is a format for writing\ndata in a file. p5 can work with this format using a\n<a href=\"https://p5js.org/reference/#/p5.Table\" target=\"_blank\">p5.Table</a>.\nThis example is based on Daniel Shiffman's\n<a href=\"https://processing.org/examples/loadsavetable.html\" target=\"_blank\">Loading Tabular Data</a>\nexample for Processing. It uses a class to organize data representing\na bubble. When the sketch starts, it loads the data for four bubbles\nfrom a CSV file. The visitor can add new bubbles, download an updated\nCSV file, and load in a CSV file.\n"},"Non-Orthogonal Reflection":{"relativeUrl":"/examples/math-and-physics-non-orthogonal-reflection","description":"\nThis example demonstrates a ball bouncing on a slanted\nsurface, implemented using vector calculations for reflection.\n\nThe code makes extensive use of the \n<a href=\"https://p5js.org/reference/#/p5.Vector\">p5.Vector</a>\nclass, including the \n<a href=\"https://p5js.org/reference/#/p5/createVector\">createVector()</a> function to create new vectors,\nand the vector methods\n<a href=\"https://p5js.org/reference/#/p5.Vector/add\">add()</a>\nand\n<a href=\"https://p5js.org/reference/#/p5.Vector/dot\">dot()</a>\nfor the vector calculations."},"Soft Body":{"relativeUrl":"/examples/math-and-physics-soft-body","description":"\nPhysics simulation of a soft body experiencing\nacceleration toward the mouse position. The shape is created\nwith curves using\n<a href=\"https://p5js.org/reference/#/p5/curveVertex\">curveVertex()</a>\nand\n<a href=\"https://p5js.org/reference/#/p5/curveTightness\">curveTightness()</a>."},"Forces":{"relativeUrl":"/examples/math-and-physics-forces","description":"\nDemonstration of multiple forces acting on bodies.\nBodies experience gravity continuously. Bodies experience fluid\nresistance when in \"water\".\n(<a href=\"http://natureofcode.com\">natureofcode.com</a>)\n\nThe force calculations are performed using the\n<a href=\"https://p5js.org/reference/#/p5.Vector\">p5.Vector</a>\nclass, including the\n<a href=\"https://p5js.org/reference/#/p5/createVector\">createVector()</a>\nfunction to create vectors."},"Smoke Particles":{"relativeUrl":"/examples/math-and-physics-smoke-particle-system","description":"\n\nSmoke particle system demo, based on\nDan Shiffman's original\n<a href=\"https://natureofcode.com/book/chapter-4-particle-systems/\">example</a>\nfor Processing.\n\nThe code makes use of the\n<a href=\"https://p5js.org/reference/#/p5.Vector\">p5.Vector</a>\nclass, including the\n<a href=\"https://p5js.org/reference/#/p5/createVector\">createVector()</a>\nfunction. The various calculations for updating particles'\npositions and velocities are performed with p5.Vector methods.\n\nThe particle system is implemented as a\n<a href=\"https://p5js.org/reference/#/p5/class\">class</a>, which contains an array of\nobjects (of class Particle)."},"Game of Life":{"relativeUrl":"/examples/math-and-physics-game-of-life","description":"\nThe Game of Life is a cellular automaton created by\nmathematician John Conway. A cellular automaton is a type of\nsimulation. In the Game of Life, there is a grid of cells in which each cell is either dead\nor alive. In this example, black squares represent living cells and\nwhite squares represent dead cells. As the simulation runs, cells\nswitch between being dead and alive based on a set of rules:\n<ol>\n <li>Any live cell with fewer than two live neighbours dies.</li>\n <li>Any live cell with more than three live neighbours dies.</li>\n <li>Any live cell with two or three live neighbours lives, unchanged,\nto the next generation.</li>\n <li>Any dead cell with exactly three live neighbours will come to life.</li>\n</ol>\nThese rules generate complex interactions. Click the canvas to start\nthe simulation with randomized cells. Clicking the canvas again will\nrestart it."},"Mandelbrot Set":{"relativeUrl":"/examples/math-and-physics-mandelbrot","description":"\nColorful rendering of the Mandelbrot set\nbased on Daniel Shiffman's\n<a href=\"https://processing.org/examples/mandelbrot.html\">Mandelbrot Example</a> for Processing."}},"libraries":{"BasicECSJs":{"relativeUrl":"/libraries/","description":"A basic javascript ECS system, with SceneManagers, Scenes and GameObjects with their own Start and Update functions."},"BasicUnitTesterJs":{"relativeUrl":"/libraries/","description":"BasicUnitTesterJs is a basic javascript unit tester designed to work on all JS platforms and be small and streamlined for the best developer experience."},"DoubleLinkedListLibJs":{"relativeUrl":"/libraries/","description":"A simple double linked list that stores the head, tail and length of the list"},"MatrixJs":{"relativeUrl":"/libraries/","description":"A basic javascript library for dynamic and powerful matrices based on lists wrapped around with a powerful class."},"OneWayLinkedListLibJs":{"relativeUrl":"/libraries/","description":"A simple one way linked list that stores the head, tail and length of the list"},"Tilemapp5js":{"relativeUrl":"/libraries/","description":"A simple to use & performant tilemap p5.js library"},"TurtleGFX":{"relativeUrl":"/libraries/","description":"TurtleGFX allows to code with Turtle Graphics in JavaScript. Great for education and creative coding."},"VecJs":{"relativeUrl":"/libraries/","description":"A basic javascript library for dynamic vectors (e.g. vec2 & vec3) based on lists."},"WebGL2FBO":{"relativeUrl":"/libraries/","description":"A simple library for OOP encapsulation and abstraction of some of WebGL2 Framebuffers and the Renderbuffers they rely on"},"WebGL2Tex":{"relativeUrl":"/libraries/","description":"A simple library for OOP encapsulation and abstraction of some of the different WebGL2 textures while still giving full control over them."},"BMWalker.js":{"relativeUrl":"/libraries/","description":"A simple JavaScript library for drawing the biological motion 'Walker'."},"c2.js":{"relativeUrl":"/libraries/","description":"c2.js is a JavaScript library for creative coding based on computational geometry, physics simulation, evolutionary algorithm and other modules."},"canvasGUI":{"relativeUrl":"/libraries/","description":"Create GUI controls directly on your canvas."},"concaveHull":{"relativeUrl":"/libraries/","description":"Calculate a Concave Hull from a set of points in 2D space"},"HY5":{"relativeUrl":"/libraries/","description":"hydra 🙏 p5.js ~ share visuals between both frameworks!"},"lygia":{"relativeUrl":"/libraries/","description":"LYGIA is a shader library of reusable functions that will let you prototype, port or ship a project in just few minutes. It's very granular, flexible and efficient. Support multiple shading languages and can easily be added to any project, enviroment or framework of your choice. \n"},"ml5.js":{"relativeUrl":"/libraries/","description":"Friendly machine learning for the web—a neighborly approach to creating and exploring artificial intelligence in the browser."},"número":{"relativeUrl":"/libraries/","description":"A friendly and intuitive math library for p5.js."},"p5.FIP":{"relativeUrl":"/libraries/","description":"Real-time image processing library - add filters and post-processing to your p5.js sketches."},"p5.Polar":{"relativeUrl":"/libraries/","description":"p5.Polar provides mathematical abstractions making it easy to create create beautiful, kaleidoscopic, radial patterns."},"p5.SceneManager":{"relativeUrl":"/libraries/","description":"p5.SceneManager helps you create sketches with multiple states / scenes. Each scene is a like a sketch within the main sketch."},"p5.Utils":{"relativeUrl":"/libraries/","description":"p5.Utils is a tool collection for my coding class, featuring a pixel ruler, gradient fill color bindings, and other helpful shortcuts for beginners."},"p5.anaglyph":{"relativeUrl":"/libraries/","description":"A library for creating 3D stereoscopic 3D scenes and images using red/cyan glasses"},"p5.animS":{"relativeUrl":"/libraries/","description":"Animates p5.js shapes by rendering their drawing processes."},"p5.asciify":{"relativeUrl":"/libraries/","description":"Apply real-time ASCII conversion to your favourite WebGL p5.js sketches to create unique, text-based visuals instantly."},"p5.bezier":{"relativeUrl":"/libraries/","description":"p5.bezier helps draw Bézier curves with more than four control points and closed curves."},"p5.ble":{"relativeUrl":"/libraries/","description":"A Javascript library that enables communication between your BLE devices and your p5.js sketch."},"p5.brush":{"relativeUrl":"/libraries/","description":"Unlock custom brushes, natural fill effects and intuitive hatching in p5.js."},"p5.capture":{"relativeUrl":"/libraries/","description":"Record your p5.js sketches effortlessly!"},"p5.cmyk":{"relativeUrl":"/libraries/","description":"CMYK color for p5.js"},"p5.collide2d":{"relativeUrl":"/libraries/","description":"p5.collide2D provides tools for calculating collision detection for 2D geometry with p5.js."},"p5.createLoop":{"relativeUrl":"/libraries/","description":"Create animation loops with noise and GIF exports in one line of code."},"p5.csg":{"relativeUrl":"/libraries/","description":"A library for constructive solid geometry. Do Boolean operations on your p5.Geometry to make new shapes!"},"p5.fab":{"relativeUrl":"/libraries/","description":"p5.fab controls digital fabrication machines from p5.js!\n"},"p5.fillGradient":{"relativeUrl":"/libraries/","description":"Fill shapes in p5.js with Linear, Radial and Conic Gradients."},"p5.filterRenderer":{"relativeUrl":"/libraries/","description":"A library for rendering 3D scenes with depth-of-field blur and with ambient occlusion shadows."},"p5.flex":{"relativeUrl":"/libraries/","description":"p5 container with responsive canvas feature."},"p5.geolocation":{"relativeUrl":"/libraries/","description":"p5.geolocation provides techniques for acquiring, watching, calculating, and geofencing user locations for p5.js."},"p5.glitch":{"relativeUrl":"/libraries/","description":"p5.js library for glitching images and binary files in the web browser"},"p5.grain":{"relativeUrl":"/libraries/","description":"Conveniently add film grain, seamless texture overlays, and manipulate pixels to achieve nostalgic and artistic effects in p5.js sketches and artworks."},"p5.joystick":{"relativeUrl":"/libraries/","description":"Connect and play with physical joysticks."},"p5.localessage":{"relativeUrl":"/libraries/","description":"p5.localmessage provides a simple interface to send messages locally from one sketch to another."},"p5.mapper":{"relativeUrl":"/libraries/","description":"A projection mapping library for p5.js"},"p5.marching":{"relativeUrl":"/libraries/","description":"Raster to vector conversion, isosurfaces."},"p5.palette":{"relativeUrl":"/libraries/","description":"A library to manage color palettes in p5.js"},"p5.party":{"relativeUrl":"/libraries/","description":"quickly prototype networked multiplayer games and apps"},"p5.pattern":{"relativeUrl":"/libraries/","description":"A pattern drawing library for p5.js."},"p5.qol":{"relativeUrl":"/libraries/","description":"Extend p5 with Quality of Life utilities."},"p5.quadrille.js":{"relativeUrl":"/libraries/","description":"A library for creating puzzle and board games, and for visual computing experiments."},"p5.Riso":{"relativeUrl":"/libraries/","description":"p5.Riso is a library for generating files suitable for Risograph printing. It helps turn your sketches into multi-color prints."},"p5.scaler":{"relativeUrl":"/libraries/","description":"Smart scaling of p5.js sketches in a variety of ways (to fit the browser's inner dimensions, to fit the canvas DOM container, to a specific ratio, etc)."},"p5.serialserver":{"relativeUrl":"/libraries/","description":"p5.serialserver is a p5.js library that enables communication between your p5.js sketch and a serial enabled device, for example, an Arduino microcontroller."},"p5.simpleAR":{"relativeUrl":"/libraries/","description":"A simple JavaScript library that easily converts existing p5.js sketches to AR."},"p5.speech":{"relativeUrl":"/libraries/","description":"p5.speech provides simple, clear access to the Web Speech and Speech Recognition APIs, allowing for the easy creation of sketches that can talk and listen."},"p5.teach.js":{"relativeUrl":"/libraries/","description":"A beginner friendly math animation library for p5.js"},"p5.toio":{"relativeUrl":"/libraries/","description":"A JavaScript library for controlling toio™Core Cube from p5.js sketches."},"p5.touchgui":{"relativeUrl":"/libraries/","description":"p5.touchgui is intended to extend p5.js and make it easy to add buttons, sliders, and other GUI (graphical user interface) objects to your p5.js sketches, enabling you to focus on quickly iterating ideas with easily created GUI objects that work with both mouse and multi-touch input."},"p5.treegl":{"relativeUrl":"/libraries/","description":"Shader development and space transformations WEBGL p5.js library."},"p5.tween":{"relativeUrl":"/libraries/","description":"With p5.tween you can create easily animations as tween in a few keyframes."},"p5.videorecorder":{"relativeUrl":"/libraries/","description":"Record your canvas as a video file with audio."},"p5.warp":{"relativeUrl":"/libraries/","description":"Fast 3D domain warping using shaders."},"p5.webserial":{"relativeUrl":"/libraries/","description":"A library for interacting with Serial devices from within the browser, based on Web Serial API (available on Chrome and Edge)."},"p5.xr":{"relativeUrl":"/libraries/","description":"A library for creating VR and AR sketches with p5."},"p5grid":{"relativeUrl":"/libraries/","description":"Hexagonal Tiling Library"},"p5jsDebugCam":{"relativeUrl":"/libraries/","description":"A basic keyboard only debug camera for p5.js"},"p5mirror":{"relativeUrl":"/libraries/","description":"A library to download your editor.p5js sketches into a git repo or locally"},"p5play":{"relativeUrl":"/libraries/","description":"JS game engine that uses p5.js for graphics and Box2D for physics."},"p5snap":{"relativeUrl":"/libraries/","description":"a command-line interface to create snapshots of sketches"},"p5videoKit":{"relativeUrl":"/libraries/","description":"A dashboard for mixing video in the browser"},"pretty-grid":{"relativeUrl":"/libraries/","description":"Create and manipulate grids with Javascript"},"Shader Park":{"relativeUrl":"/libraries/","description":"Explore shader programming through a JavaScript interface without the complexity of GLSL. Quickly script shaders using a P5.js style language."},"simple.js":{"relativeUrl":"/libraries/","description":"Helper functions and defaults for young and new coders."},"Total Serialism":{"relativeUrl":"/libraries/","description":"A toolbox full of methods for procedurally generating and transforming arrays mainly focused on algorithmic composition. Includes methods like markov-chain, cellular automaton, lindenmayer system, euclidean distribution and much more! Generate the array with your desired method and easily iterate over them in a for-loop to draw the results."},"UI Renderer":{"relativeUrl":"/libraries/","description":"Create a UI within your sketch, including utilities for different layouts and interactive sliders."},"WEBMIDI.js":{"relativeUrl":"/libraries/","description":"A user-friendly library to send and receive MIDI messages with ease."}},"events":{"p5.js Contributors Conference 2015":{"relativeUrl":"/events/contributors-conference-2015","description":"\nimport YouTubeEmbed from '../../../components/YouTubeEmbed/index.astro'\nimport Logos from '../../../components/Logos/index.astro'\n\nA group of approximately 30 participants gathered spent a week at the [Frank-Ratchye STUDIO for Creative Inquiry](http://studioforcreativeinquiry.org/), advancing the code, documentation, and community outreach tools of the p5.js programming environment. Participants came from as far away as Hong Kong, Seattle, Los Angeles, Boston and New York. Most were working professionals in the fields of creative technology, interaction design, and new-media arts, but the group also included a half-dozen undergraduate and graduate students from Carnegie Mellon’s Schools of Art and Architecture.\n\n\n\n![A group of participants smile and make a p5 sign with their hands](../images/cc2015/2015_1.jpg)\n![Woman presenting the p5.js community statement from her laptop](../images/cc2015/2015_3.jpg)\n![Woman expressively speaks into a microphone while two male collaborators look on](../images/cc2015/2015_4.jpg)\n![Participants attentively smile and listen to a presentation](../images/cc2015/2015_5.jpg)\n![Woman reads about p5.js into a microphone to three female students](../images/cc2015/2015_6.jpg)\n![Participants sit in a circle around a white board with sticky notes on it while a female student speaks into a microphone](../images/cc2015/2015_7.jpg)\n![Participants sit around a table looking at each others laptops and compare code](../images/cc2015/2015_8.jpg)\n![Whiteboard with different colored sticky and written notes about programming](../images/cc2015/2015_9.jpg)\n![Woman speaking into a microphone about valuing different skill sets while a group of participants with laptops look at her powerpoint in a classroom](../images/cc2015/2015_10.jpg)\n![Woman speaks at a podium in an auditorium while three participants sit on the stage and another three are skyping in on the stage screen](../images/cc2015/2015_11.jpg)\n![Overhead view of a classroom with participants working on their laptops](../images/cc2015/2015_12.jpg)\n![Five people having a discussion in a circle](../images/cc2015/2015_13.jpg)\n![Five people in a circle with their laptops sharing their notes](../images/cc2015/2015_14.jpg)\n![Man in a classroom with a microphone speaking out to a group of participants](../images/cc2015/2015_15.jpg)\n![Participants jump, smile and throw their hands in the air on a green lawn](../images/cc2015/2015_2.jpg)\n\n## Participants\n\n[Jason Alderman](http://huah.net/jason/), [Sepand Ansari](http://sepans.com/), [Tega Brain](http://tegabrain.com/), [Emily Chen](https://medium.com/@emchenNYC/), [Andres Colubri](http://andrescolubri.net/), [Luca Damasco](https://twitter.com/lucapodular), [Guy de Bree](http://guydebree.com/), [Christine de Carteret](http://www.cjdecarteret.com/), [Xy Feng](http://xystudio.cc/), [Sarah Groff-Palermo](http://www.sarahgp.com/), [Chris Hallberg](http://www.crhallberg.com/), [Val Head](http://valhead.com/), [Johanna Hedva](http://johannahedva.com/), [Kate Hollenbach](http://www.katehollenbach.com/), [Jennifer Jacobs](http://web.media.mit.edu/~jacobsj/), [Epic Jefferson](http://www.epicjefferson.com/), [Michelle Partogi](http://michellepartogi.com/), [Sam Lavigne](http://lav.io/), [Golan Levin](http://flong.com/), [Cici Liu](http://www.liuchangitp.com/), [Maya Man](http://www.mayaman.cc/), [Lauren McCarthy](http://lauren-mccarthy.com/), [David Newbury](http://www.workergnome.com/), [Paolo Pedercini](http://molleindustria.org/), [Luisa Pereira](http://luisaph.com/), [Miles Peyton](http://mileshiroo.info/), [Caroline Record](http://carolinerecord.com/), [Berenger Recoules](http://b2renger.github.io/), [Stephanie Pi](https://pibloginthesky.wordpress.com/), [Jason Sigal](http://jasonsigal.cc/), [Kevin Siwoff](http://studioindefinit.com/), [Charlotte Stiles](http://charlottestiles.com/)\n\n## Diversity\n\nAlongside technical development, one of the main focuses of this conference was outreach, community, and diversity. The conference began with a panel—[Diversity: Seven Voices on Race, Gender, Ability & Class for FLOSS and the Internet](http://studioforcreativeinquiry.org/events/diversity-seven-voices-on-race-gender-ability-class-for-floss-and-the-internet). Organized by [Johanna Hedva](http://johannahedva.com/) and [Lauren McCarthy](http://lauren-mccarthy.com/), the panel took place Tuesday, 25 May 2015 in Kresge Auditorium at Carnegie Mellon University. Speakers included [Maya Man](http://www.mayaman.cc/), [Casey Reas](http://reas.com/), [Johanna Hedva](http://johannahedva.com/), [Stephanie Pi](https://pibloginthesky.wordpress.com/), [Phoenix Perry](http://phoenixperry.com/), [Taeyoon Choi](http://taeyoonchoi.com/), [Sara Hendren](http://ablersite.org/), [Epic Jefferson](http://www.epicjefferson.com/), and [Chandler McWilliams](http://chandlermcwilliams.com/).\n![A poster about diversity for FLOSS and the Internet](../images/cc2015/diversity_640.jpg)\n\n## Support\n\nOur contributor conference took place at the [Frank-Ratchye STUDIO for Creative Inquiry](http://studioforcreativeinquiry.org/) at Carnegie Mellon University, an academic laboratory for atypical, anti-disciplinary, and inter-institutional research at the intersections of arts, science, technology, and culture.\n\nThis event was made possible by a grant from the [National Endowment for the Arts](https://arts.gov/), and generous support from the [NYU Interactive Telecommunications Program](https://tisch.nyu.edu/itp) (ITP), [Processing Foundation](http://foundation.processing.org/), [TheArtificial](http://theartificial.nl/), [Bocoup](http://bocoup.com/), [Darius Kazemi](http://tinysubversions.com/), and [Emergent Digital Practices | University of Denver]\n\n**Thank you!**\n\n<Logos>\n    <a href=\"https://arts.gov/\">![The National Endowment for the Arts (NEA)](../images/logo/artworks.jpg)</a>\n    <a href=\"http://studioforcreativeinquiry.org\">![The Frank-Ratchye STUDIO for Creative Inquiry](../images/logo/frank-ratchye.png)</a>\n    <a href=\"https://itp.nyu.edu/itp/\">![NYU ITP](../images/logo/itp.png)</a>\n    <a href=\"http://www.du.edu/ahss/edp/\">![The Emergent Digital Practices program at University of Denver](../images/logo/edp.png)</a>\n    <a href=\"http://bocoup.com/\">![ITP](../images/logo/bocoup.png)</a>\n    <a href=\"http://theartificial.nl/\">![The Artificial](../images/logo/theartificial.png)</a>\n</Logos>\nundefined"},"p5.js Contributors Conference 2019":{"relativeUrl":"/events/contributors-conference-2019","description":"\nimport YouTubeEmbed from '../../../components/YouTubeEmbed/index.astro'\nimport Logos from '../../../components/Logos/index.astro'\n\nAn interdisciplinary group of 35 participants gathered at the <a href=\"http://studioforcreativeinquiry.org/\">Frank-Ratchye STUDIO for Creative Inquiry</a>, advancing the code, documentation, and community outreach tools and exploring the current landscape of the p5.js programming environment. Comprising a diverse range of participants within the fields of creative technology, interaction design, and new media arts, the conference was aimed at fostering dialogue through a multidisciplinary lens. Working groups focused on several topic areas: Access; Music and Code in Performance; Landscape of Creative Tech; and Internationalization. \n\n<YouTubeEmbed id=\"YkfG7Ggpi_o\" />\n\n<YouTubeEmbed id=\"At1newHnZpA\" />\n\nVideos by <a href=\"https://www.youtube.com/channel/UCzMs9qg50AW2LEpLDzHT5NA\">Qianqian Ye</a>\n\n![Man at a podium giving a presentation to the group](../images/cc2019/2019_1.jpg)\n![Participants sitting at a long table having lunch and a discussion](../images/cc2019/2019_2.jpg)\n![Classroom of participants working on their laptops](../images/cc2019/2019_4.jpg)\n![Participants in a meeting in a dark classroom](../images/cc2019/2019_5.jpg)\n![Woman giving presentation in a classroom of diverse participants](../images/cc2019/2019_6.jpg)\n![Participants conversing in a busy classroom](../images/cc2019/2019_7.jpg)\n![Woman with microphone speaking to fellow participants in a classroom](../images/cc2019/2019_8.jpg)\n![Participant speaks at a podium in front of projected text about the problem with anonymyzing data](../images/cc2019/2019_9.jpg)\n![Person with a microphone speaking to fellow participants in front of text that reads p5.js will not add any new features except those that increase access](../images/cc2019/2019_10.jpg)\n![Woman speaking into a microphone talking to fellow participants ](../images/cc2019/2019_11.jpg)\n![A man with a microphone speaking to fellow participants](../images/cc2019/2019_12.jpg)\n![Participants sit in a classroom towards the speakers listening intently](../images/cc2019/2019_13.jpg)\n![Woman with microphone speaking to fellow participants with the text sacred boundaries in the projection behind her](../images/cc2019/2019_15.jpg)\n![Overhead view of participants listening to a panel of people with an image of a 3d rendered man on it](../images/cc2019/2019_16.jpg)\n![Participants sit around a table with their laptops and observe code on a screen](../images/cc2019/2019_17.jpg)\n![Woman sitting next to a lifesize teddy bear works on her laptop](../images/cc2019/2019_18.jpg)\n![Participants standing outside smiling](../images/cc2019/2019_19.jpg)\n![Four participants standing in a circle conversing](../images/cc2019/2019_20.jpg)\n![Participants sitting outside eating lunch together](../images/cc2019/2019_21.jpg)\n![Participants sitting around a large U shaped table looking towards the front of the classroom](../images/cc2019/2019_22.jpg)\n![Man sitting in front of the classroom speaking energetically into a microphone](../images/cc2019/2019_23.jpg)\n![Group of people sit around campfire made from four LCD monitors.](../images/cc2019/campfire.jpg)\n![Group photo of participants smiling enthusiastically with their hands in the air](../images/cc2019/2019_24.jpg)\n\nPhotos by <a href=\"https://www.flickr.com/photos/creativeinquiry/albums/72157710545834046/\">Jacquelyn Johnson</a>\n\n## Participants\n\n<a href=\"https://americanartist.us/biocv\" target=\"_blank\">American Artist</a>, <a href=\"https://www.omayeli.com/\" target=\"_blank\">Omayeli Arenyeka</a>, <a href=\"http://www.sinabahram.com/\" target=\"_blank\">Sina Bahram</a>, <a href=\"https://aatishb.com/\" target=\"_blank\">Aatish Bhatia</a>, <a href=\"https://natalie.computer/\" target=\"_blank\">Natalie Braginsky</a>, <a href=\"https://jonchambers.net/\" target=\"_blank\">Jon Chambers</a>, <a href=\"https://twitter.com/lucapodular\" target=\"_blank\">Luca Damasco</a>, <a href=\"https://www.linkedin.com/in/aren-davey-bb3496103/\" target=\"_blank\">Aren Davey</a>, <a href=\"https://teddavis.org/\" target=\"_blank\">Ted Davis</a>, <a href=\"http://l05.is/\" target=\"_blank\">Carlos Garcia</a>, <a href=\"http://stalgiagrigg.name/\" target=\"_blank\">Stalgia Grigg</a>, <a href=\"http://www.katehollenbach.com/\" target=\"_blank\">Kate Hollenbach</a>, <a href=\"http://www.shawnemichaelainholloway.com/\" target=\"_blank\">shawné michaelain holloway</a>, <a href=\"http://www.takinglifeseriously.com/index.html\" target=\"_blank\">Claire Kearney-Volpe</a>, <a href=\"https://www.sonalee.me/\" target=\"_blank\">Sona Lee</a>, <a href=\"https://designerken.be/designing\" target=\"_blank\">Kenneth Lim</a>, <a href=\"https://www.outofambit.com/\" target=\"_blank\">Evelyn Masso</a>, <a href=\"http://lauren-mccarthy.com/\" target=\"_blank\">Lauren McCarthy</a>, <a href=\"https://laja.me/\" target=\"_blank\">LaJuné McMillian</a>, <a href=\"https://www.decontextualize.com/\" target=\"_blank\">Allison Parrish</a>, <a href=\"http://www.luisapereira.net/\" target=\"_blank\">Luisa Pereira</a>, <a href=\"https://guillemontecinos.cl/\" target=\"_blank\">Guillermo Montecinos</a>, <a href=\"http://montoyamoraga.io/\" target=\"_blank\">Aarón Montoya-Moraga</a>, <a href=\"http://lm-m.com/\" target=\"_blank\">Luis Morales-Navarro</a>, Shefali Nayak, <a href=\"http://everest-pipkin.com/\" target=\"_blank\">Everest Pipkin</a>, <a href=\"http://oross.net/\" target=\"_blank\">Olivia Ross</a>, <a href=\"https://dorothysantos.com/\" target=\"_blank\">Dorothy R. Santos</a>, <a href=\"https://www.yashengshe.com/\" target=\"_blank\">Yasheng She</a>, <a href=\"https://junshern.github.io/\" target=\"_blank\">Jun Shern Chan</a>, <a href=\"https://cassietarakajian.com/\" target=\"_blank\">Cassie Tarakajian</a>, <a href=\"https://www.laurenvalley.com/\" target=\"_blank\">Lauren Valley</a>, <a href=\"https://xin-xin.info\" target=\"_blank\">Xin Xin</a>, <a href=\"https://ayxx.me/\" target=\"_blank\">Alex Yixuan Xu</a>, <a href=\"http://www.qianqian-ye.com/\" target=\"_blank\">Qianqian Ye</a> \n\n## Outputs\n\n- A panel on Blackness and Gender in Virtual Space led by American Artist, with shawné michaelain holloway and LaJuné McMillian.\n- New art installations by Stalgia Grigg, LaJuné McMillian, Aatish Bhatia, and Jon Chambers.\n- A prototype of a  <a href=\"https://github.com/aparrish/nb5js-proof-of-concept\" target=\"_blank\">notebook interface for p5.js.</a> Created by Allison Parrish.\n- A design of the p5.js library system for the p5 Editor. Created by Cassie Tarakajian and Luca Damasco.\n- Prototypes connecting p5 to other libraries. Created by Alex Yixuan Xu and Lauren Valley.\n- <a href=\"https://docs.google.com/document/d/1NPSVTWlTxWv8_rWLr8j91Qf8CcJA5ns8I8zFjCCmwuk/edit#heading=h.ea0uhs87h6fk\" target=\"_blank\">p5.js Global Contributor's Toolkit.</a> Created by Aarón Montoya-Moraga, Kenneth Lim, Guillermo Montecinos, Qianqian Ye,  Dorothy R. Santos, and Yasheng She.\n- <a href=\"https://docs.google.com/presentation/d/19xxc2zWWdFMAQjT6tRdN5ZU13vAKSwM7jojaC2U4F6Q/edit\" target=\"_blank\">How to write non-violent creative code.</a> A zine led by Olivia Ross.\n- An overhaul of the p5.js website for accessibility. Including updates for screen reader accessibility, and improvements to the home, download, getting started, and reference pages. With contributions from Claire Kearney-Volpe, Sina Bahram, Kate Hollenbach, Olivia Ross, Luis Morales-Navarro, Lauren McCarthy, and Evelyn Masso.\n- <a href=\"https://github.com/aahdee/p5grid\">p5grid</a>. An implementation of highly flexible triangle, square, hexagon, and octagon girds for p5.js. Created by Aren Davey.\n- <a href=\"https://github.com/L05/p5.multiplayer\">p5.multiplayer</a>. A set of template files for building a multi-device, multiplayer game where multiple clients can connect to a specified host page. Created by L05.\n- Experiments using <a href=\"https://teddavis.org/p5live/\">P5LIVE</a>, testing early implementations of softCompile, OSC interfacing and added connectivity with demo for MIDI setup. A p5.js collaborative live-coding vj environment! Created by Ted Davis.\n- Collaborative performances by Luisa Pereira, Jun Shern Chan, Shefali Nayak, Sona Lee, Ted Davis, and Carlos Garcia.\n- A performance by Natalie Braginsky.\n- Workshops led by Everest Pipkin and Jon Chambers.\n- A closing campfire circle led by Golan Levin.\n\n## Support\n\nOur contributor conference took place at the <a href=\"http://studioforcreativeinquiry.org\">Frank-Ratchye STUDIO for Creative Inquiry</a> at Carnegie Mellon University, an academic laboratory for atypical, anti-disciplinary, and inter-institutional research at the intersections of arts, science, technology, and culture.\n\nThis event was made possible by a grant from the <a href=\"https://arts.gov/\" target=\"_blank\">National Endowment for the Arts</a>, and generous support from the <a href=\"http://foundation.processing.org\" target=\"_blank\">Processing Foundation</a>, <a href=\"https://www.mozilla.org/en-US/moss/\" target=\"_blank\">Mozilla Foundation</a>, <a href=\"https://www.du.edu/ahss/opensourcearts/\" target=\"_blank\">Clinic for Open Source Arts (COSA) at the University of Denver</a>, <a href=\"http://idm.engineering.nyu.edu/\" target=\"_blank\">NYU Tandon IDM</a>, <a href=\"https://tisch.nyu.edu/itp\" target=\"_blank\"> NYU ITP</a>, <a href=\"http://thebaselschoolofdesign.ch/\" target=\"_blank\">FHNW Academy of Art and Design</a>, <a href=\"https://www.cdm.depaul.edu/Pages/default.aspx\" target=\"_blank\">DePaul University College of Computing and Digital Media</a>, and <a href=\"http://amt.parsons.edu/\" target=\"_blank\">Parsons School of Art, Media, and Technology at the New School</a>.\n\n**Thank you!**\n\n<Logos>\n    <a href=\"https://arts.gov/\">![The National Endowment for the Arts (NEA)](../images/logo/artworks.jpg)</a>\n    <a href=\"http://studioforcreativeinquiry.org\">![The Frank-Ratchye STUDIO for Creative Inquiry](../images/logo/frank-ratchye.png)</a>\n    <a href=\"http://thebaselschoolofdesign.ch/\">![University of Applied Sciences and Arts Northwestern Switzerland Academy of Arts and Design](../images/logo/northwestern-switzerland.jpg)</a>\n    <a href=\"http://foundation.processing.org/\">![Processing Foundation](../images/logo/processing-foundation.png)</a>\n    <a href=\"https://www.du.edu/ahss/opensourcearts/\">![Clinic for Open Source Arts](../images/logo/COSA.png)</a>\n    <a href=\"http://idm.engineering.nyu.edu/\">![NYU Tandon School of Engineering Integrated Digital Media](../images/logo/nyu.jpg)</a>\n    <a href=\"https://amt.parsons.edu/\">![Parsons Art, Media and Technology](../images/logo/Parsons.jpg)</a>\n    <a href=\"https://tisch.nyu.edu/itp\">![NYU ITP](../images/logo/itp.png)</a>\n    <a href=\"https://www.cdm.depaul.edu/Pages/default.aspx\">![DePaul University](../images/logo/depaul.png)</a>\n</Logos>\nundefined"},"p5.js Access Day 2022":{"relativeUrl":"/events/p5js-access-day-2022","description":"\nimport YouTubeEmbed from '../../../components/YouTubeEmbed/index.astro'\nimport Logos from '../../../components/Logos/index.astro'\n\nThe p5.js Access Day is a virtual conference to talk about access in open-source software for the arts (OSSTA) and greater issues beyond the software. The day-long online event features four themed-sessions — Critical Web Accessibility, Disability Arts, Access & Community Building, and Access via Translation. It provides space for contributors of p5.js and experienced practitioners from outside OSSTA projects to share their knowledge, perspectives, and dreams for building greater access to technical and arts spaces.\n\nOrganizer and curator: [Qianqian Ye](https://qianqian-ye.com/)\n\nEvent Coordinator and Video Producer: [Karen Abe](https://www.instagram.com/prod.ka/)\n\n## p5.js Access Day 2022 Recap Video\n<YouTubeEmbed id=\"WBDaBRH-_YA\" />\n\n## p5.js Access Day 2022 Recap Video with ASL Interpretation\n<YouTubeEmbed id=\"xJi3ATgbuGQ\" />\n\n## Event Opening\n<YouTubeEmbed id=\"H-8KE7WKbC4\" />\n\n## Critical Web Accessibility\n<YouTubeEmbed id=\"8IwJc3jnRuw\" />\n\nModerator: [Kate Hollenbach](http://www.katehollenbach.com/),\nSpeakers: [Luis Morales-Navarro](http://luismn.com/), [Jes Daigle](https://twitter.com/techandautism)\n\n\n## Disability Arts\n<YouTubeEmbed id=\"OxgK6CCg8Lg\" />\nModerator: [Xiaowei R. Wang](https://www.xiaoweiwang.com/),\n\nSpeakers: [Natalee Decker](https://www.instagram.com/crip_fantasy/), [Kemi Sijuwade-Ukadike](https://www.linkedin.com/in/adekemisijuwade), [Kevin Gotkin](https://kevingotkin.com/)\n\n\n## Access & Community Building\n<YouTubeEmbed id=\"v3sTLNZUl0c\" />\nModerator: [Dorothy R. Santos](https://dorothysantos.com/),\n\nSpeakers: [Tiny Tech Zine](https://tinytechzines.org/), [Close Isn’t Home](https://closeisnthome.com/), [Zainab Aliyu](https://zai.zone/)\n\n\n## Access via Translation\n<YouTubeEmbed id=\"h3HhhH5hokM\" />\nModerator: [Kenneth Lim](https://limzykenneth.com/),\n\nSpeakers: [Inhwa Yeom](https://yinhwa.art/), [Shaharyar Shamshi](https://shaharyarshamshi.xyz/), [Felipe Gomes](https://felipesg.cargo.site/)\n\n\n## Event Closing\n<YouTubeEmbed id=\"Qv9QUYiGnk8\" />\n\n## Event Production\n- Event Advisor: [Kate Hollenbach](http://www.katehollenbach.com/), [Claire Kearney-Volpe](http://www.takinglifeseriously.com/index.html), [Saber Khan](https://www.edsaber.info/), [evelyn masso](https://outofambit.format.com/), [Lauren Lee McCarthy](http://lauren-mccarthy.com/), [Dorothy R. Santos](https://dorothysantos.com/), [Xiaowei R. Wang](https://www.xiaoweiwang.com/), [Xin Xin](https://xin-xin.info/)\n- Live ASL Interpretation: [Pro Bono ASL](https://www.probonoasl.com/)\n- Graphic Designer: [Katie Chan](https://twitter.com/katiechaan)\n- Live Event Tech Support: [Karen Abe](https://www.instagram.com/prod.ka/), [Jay Borgwardt](https://www.jayborgwardt.com/), [Yuehao Jiang](https://yuehaojiang.com/)\n- Closed Captioning Transcription Support: Ju Hye Kim, Xiao Yi Wang-Beckval\n- Live ASL Support: [Claire Wong](https://www.instagram.com/claireewongg/)\n\n\n## Support\nThis event was made possible by a grant from the [Mozilla Foundation](https://foundation.mozilla.org/) Community Building Award, and generous support from the [Processing Foundation](https://processingfoundation.org/) and [Frank-Ratchye STUDIO for Creative Inquiry](http://studioforcreativeinquiry.org/). \n**Thank you!**\n\n<Logos>\n    <a href=\"https://foundation.mozilla.org/\">![Mozilla Foundation](../images/logo/mozilla-foundation.png)</a>\n    <a href=\"http://studioforcreativeinquiry.org\">![The Frank-Ratchye STUDIO for Creative Inquiry](../images/logo/frank-ratchye.png)</a>\n    <a href=\"http://foundation.processing.org/\">![Processing Foundation](../images/logo/processing-foundation.png)</a>\n</Logos>\nundefined"},"p5.js Community Salon 2023":{"relativeUrl":"/events/p5js-community-salon-2023","description":"\nimport YouTubeEmbed from '../../../components/YouTubeEmbed/index.astro'\nimport Logos from '../../../components/Logos/index.astro'\n\np5.js Community Salon is a public gathering of p5.js community members to share and connect at NYU ITP on Thursday, March 30, 6:30-7:30pm. During the event, a group of speakers will briefly share their work with the community, followed by food and social time. \n\n## Organizers:\np5.js Community Salon is organized by p5.js Project Lead [Qianqian Ye](https://qianqian-ye.com), as part of their IMA/ITP Project Fellowship. This event is supported by Sonia Choi, Project and Communications Coordinator at Processing Foundation.\n\nPhoto credit: [Ziyuan Lin](https://www.ziyuanlin.com).\n\n![Qianqian Ye holding a mic next to a big t.v. screen that has a grid of p5.js contributor photos on it.](../images/p5js-salon-2023/salon-2.JPG)\n\n## Speakers:\nZainab Aliyu\n![Zainab Aliyu holding a mic next to a big t.v. screen that has an image of her work. She is holding a book and reading and excerpt from it.](../images/p5js-salon-2023/salon-3.JPG)\n\nAarati Akkapedi\n![Aarati Akkapedi holding a mic next to a big whiteboard that has a collection of printed work by them.](../images/p5js-salon-2023/salon-4.JPG)\n\nSonia Choi\n![Suhyun Choi holding a mic next to a big t.v. screen that has an image of their work.](../images/p5js-salon-2023/salon-5.JPG)\n\nDon Hanson\n![Don Hanson holding a mic in front of a big t.v. screen that has an image of their work.](../images/p5js-salon-2023/salon-6.JPG)\n\nShawné Michaelain Holloway\n![Shawné Michaelain Holloway holding a mic next to a big t.v. screen that has an image of their work.](../images/p5js-salon-2023/salon-7.JPG)\n\nTsige Tafesse\n![Tsige Tafesse holding a mic next to a big t.v. screen that has an image of Processing Foundation Fellowship Open Call.](../images/p5js-salon-2023/salon-8.JPG)\n\nRachel Lim\n![Rachel Lim holding a mic next to a big t.v. screen that has an image of p5.js Web Editor New Features.](../images/p5js-salon-2023/salon-9.JPG)\n\nJackie Liu\n![Jackie Liu holding a mic next to a big t.v. screen that has a series of screenshots of their game project “Chao bing”.](../images/p5js-salon-2023/salon-10.JPG)\n\nOlivia McKayla Ross\n![Olivia Ross holding a mic next to a big t.v. screen that has the p5 salon poster on it.](../images/p5js-salon-2023/salon-11.JPG)\n\nMunus Shih\n![Munus Shih holding a mic next to a big t.v. screen that has an image of himself with his name, pronouns, and other facts about him.](../images/p5js-salon-2023/salon-12.JPG)\n\nXin Xin\n![Xin Xin holding a mic next to a big t.v. screen that has an image and text of their work.](../images/p5js-salon-2023/salon-13.JPG)\n\nLavanya Suresh\n![Lavanya Suresh holding a mic next to a big t.v. screen that has an image of her work on Kolams.](../images/p5js-salon-2023/salon-14.JPG)\n\n![p5.js community salon poster.](../images/p5js-salon-2023/0-banner-p5js-community-salon.jpg)\n\n![A group image of all the presenters and organizers, smiling and making silly faces at the camera. They are mostly kneeling down and few are standing upright.](../images/p5js-salon-2023/salon-15.JPG)\n\n![p5.js salon audience are sitting in a crowded room with curious expression.](../images/p5js-salon-2023/salon-16.JPG)\n\n### p5.js Community Salon Recap Video Part 1\n<YouTubeEmbed id=\"WYFdZaidHWZ8\" />\n\n### p5.js Community Salon Recap Video Part 2\n<YouTubeEmbed id=\"ggU95SHqB-s\" />\n\n## Support\nThis event was supported by NYU IMA/ITP Project Fellowship. \n**Thank you!**\n\n<Logos>\n   <a href=\"https://tisch.nyu.edu/itp\">![NYU ITP](../images/logo/itp.png)</a>\n</Logos>undefined"},"Sovereign Tech Fund x p5.js Documentation Accessibility Project":{"relativeUrl":"/events/stf-2024","description":"\nimport YouTubeEmbed from '../../../components/YouTubeEmbed/index.astro'\nimport Logos from '../../../components/Logos/index.astro'\n\np5.js was selected to receive a total of €450,000 through two rounds of funding from the [Sovereign Tech Fund](https://sovereigntechfund.de/en) to enhance [p5.js Documentation organization & accessibility](https://www.sovereigntechfund.de/tech/p5js). This work is part of the Sovereign Tech Fund’s [Contribute Back to Open Source Challenges](https://sovereigntechfund.de/en/challenges/).\n\nThis project addressed the longstanding challenges of scatterness and limited accessibility within the p5.js documentation. The final deliverable includes an updated p5.js website with a focus on accessible, organized, and translated contributor documentation. Additionally, the website features a curated collection of community sketches, an add-ons library, and educational resources.\n\nBy providing improved contributor documentation, the project aims to facilitate effective navigation and feature exploration, empowering users to create richer and more innovative projects with p5.js. Furthermore, the improved documentation promotes accessibility and inclusivity, ensuring that people from diverse backgrounds, skill levels, and cultures can engage meaningfully with p5.js.\n\n\n## Contributors\n\nThis project brought together approximately 140 contributors, with 60-75 participating in each round. The team included both experienced and first-time contributors, forming a global group dedicated to writing, translating, designing, engineering, researching, and conducting accessibility reviews.\n\nWhile open-source contributors typically operate independently, this project fostered collective efforts, encouraging collaboration among individuals with diverse skills and perspectives. This shift towards more collaborative endeavors has led to a more cohesive and synergistic approach to advancing the p5.js project, exemplifying the strength of community-driven initiatives in the open-source landscape.\n\n**Thank you to all the contributors who participated in the two rounds of the p5.js x STF project! Your efforts made this project possible! 💗**\n\n**Thank you to the Processing Foundation for all the administrative support!**\n\n\n### Round 1\n*September 1 to December 31, 2023.*    \n\n#### Internal Team\n* Project Lead and Manager: Qianqian Ye\n* Doc Lead: Kenneth Lim, Dave Pagurek, Nick McIntyre\n* Assistant Project Manager: Karen Abe\n\n\n#### Website\n* Website Designer: Stefanie Tam, Tyler Yin\n* Website Developer: Bocoup (cypress masso, Stalgia Grigg, Carmen Cañas, Isaac Durazo)\n\n\n#### Accessibility\n* Consultant: Andy Slater\n* Proofreader: Fivver\n\n\n#### p5.js Definition Workshop Team\n* Organizer: Winnie Soon, Koundinya Dhulipalla \n* Facilitator: Yasmine Boudiaf, Jazmin Morris\n* 30 x Workshop Participants from UAL CCI community\n\n\n#### p5.js Examples\n* Doc Lead: Caleb Foss\n* Writer: Darren Kessner, Kathryn Lichlyter\n* Reviewer: Amy Chen, Lance Cole\n\n\n#### p5.js Tutorials\n* Doc Lead: Nick McIntyre\n* Writers & Reviewers: Joanne Amarisa, Gregory Benedis-Grab, Christine Belzie, Tristan Bunn, Julien Kris, Ruth Ikegah, Portia Morrell, Jaleesa Trapp, Akanksha Vyas\n\n\n#### p5.js WebGL Documentation\n* Doc Lead: Dave Pagurek\n* Reviewer: Adam Ferriss\n\n\n#### p5.js Contributor Documentation\n* Doc Lead: Kenneth Lim\n* Writer: Alm Chung\n* Reviewer: Tanvi Kumar, Luis Morales-Navarro\n\n#### Community Statement & Code of Conduct\n* Writer: Oluwakemi Oritsejafor\n* Reviewer: Zainab Aliyu\n\n\n### Round 2\n*January 1 to April 30, 2024.*  \n\n\n#### Internal Team\n* Project Lead and Manager: Qianqian Ye\n* Doc Lead: Kenneth Lim, Dave Pagurek\n* Project Manager: Karen Abe\n\n\n#### Website\n* Website Designer: Stefanie Tam, Tyler Yin\n* Website Developer: Bocoup (cypress masso, Stalgia Grigg, Carmen Cañas, Isaac Durazo)\n* Website Copywriter: Sarah Ciston\n* p5.js community sketch Curator: Zainab Aliyu\n* Special thanks to Sinan Ascioglu from OpenProcessing for supporting the community sketches\n\n\n#### Translation Team\n* Researcher: Koundinya Dhulipalla\n* Spanish Translation\n    * Steward: Cristian Bañuelos, Sebastián Méndez\n    * Contributor: Diana Galindo Clavijo, Xavier Gongora, Marcela Martinez Galvan, Emilio Ocelotl Reyes, S. Marianne Teixido Guzmán\n* Chinese Translation\n    * Steward: Weijia Li, Miaoye Que\n    * Contributor: Chirui Cheng, Lingxiao Wang, Shengnan Li, Angela Rong, Yudi Wu\n* Hindi Translation \n    * Steward: Tanvi Kumar, Divyansh Srivastava\n    * Contributor: Eshaan Aggarwal, Akash Jaiswalm, Aditya Rana, Sanjay Singh Rajpoot, Surbhi Pittie\n* Korean Translation\n    * Steward: Inhwa Yeom, Sejin Oh \n    * Contributor: Yewon Jang, Yunyoung Jang, Minwook Park, Sunghun Park, Hyunwoo Rhee\n\n\n#### Reference Team\n* Technical Writer: Nick McIntyre\n* Reviewer: Darren Kessner, Layla Quiñones\n\n\n#### Accessibility Team\n* Accessibility Consultant: Nat Decker, thai Lu, Cielo Saucedo, Liam Coleman\n\n\n#### Writers\n* Documentation Revisions Lead: Layla Quiñones\n* Revisions Writer: Julien Kris, Ruth Ikegah, Gregory Benedis-Grab, Akanksha Vyas, Kathryn Lichlyter, Kate Machmeyer\n* Accessibility Technical Writer: Caleb Foss\n* Proofreader: Fivver\n\n## p5.js New Website!\n<YouTubeEmbed id=\"0_r4HSmNb9o\" />\n\n## Support\n\nThis project  was supported by the Sovereign Tech Fund. The Sovereign Tech Fund (STF) supports the development, improvement, and maintenance of open digital infrastructure in the public interest. Its goal is to strengthen the open source ecosystem sustainably, focusing on security, resilience, technological diversity, and the people behind the code. STF is funded by the German Federal Ministry for Economic Affairs and Climate Action (BMWK) and hosted at and supported by the German Federal Agency for Disruptive Innovation GmbH (SPRIND).\n\n**Thanks STF for supporting the p5.js project!**\n\n\n## Links\n\n[STF](https://www.sovereigntechfund.de/programs/challenges): Contribute Back to Open-source Challenge\n\n[MEDIUM](https://medium.com/@ProcessingOrg/p5-js-receives-major-funding-from-the-sovereign-tech-fund-bbf61d1171fe): p5.js Receives Major Funding from the Sovereign Tech Fund\n\n\n<Logos>\n    <a href=\"https://www.sovereigntechfund.de/\">![Sovereign Tech Fund](../images/logo/stf.webp)</a>\n</Logos>\nundefined"}},"people":{"A Welles":{"relativeUrl":"/people/#a-welles"},"Aaron Casanova":{"relativeUrl":"/people/#aaron-casanova"},"Aaron George":{"relativeUrl":"/people/#aaron-george"},"aarón montoya-moraga":{"relativeUrl":"/people/#aaron-montoya-moraga"},"Aaron Ni":{"relativeUrl":"/people/#aaron-ni"},"Aatish Bhatia":{"relativeUrl":"/people/#aatish-bhatia"},"Abe Pazos":{"relativeUrl":"/people/#abe-pazos"},"Abhi Gulati":{"relativeUrl":"/people/#abhi-gulati"},"Abhinav Kumar":{"relativeUrl":"/people/#abhinav-kumar"},"Abhinav Sagar":{"relativeUrl":"/people/#abhinav-sagar"},"Abhinav Srinivas":{"relativeUrl":"/people/#abhinav-srinivas"},"Abishake":{"relativeUrl":"/people/#abishake"},"Acha":{"relativeUrl":"/people/#acha"},"Adam Ferriss":{"relativeUrl":"/people/#adam-ferriss"},"Adam Král":{"relativeUrl":"/people/#adam-kral"},"Adam Smith":{"relativeUrl":"/people/#adam-smith"},"Adarsh":{"relativeUrl":"/people/#adarsh"},"Adil Rabbani":{"relativeUrl":"/people/#adil-rabbani"},"Aditya Deshpande":{"relativeUrl":"/people/#aditya-deshpande"},"Aditya Mohan":{"relativeUrl":"/people/#aditya-mohan"},"Aditya Rachman Putra":{"relativeUrl":"/people/#aditya-rachman-putra"},"Aditya Rana":{"relativeUrl":"/people/#aditya-rana"},"Aditya Shrivastav":{"relativeUrl":"/people/#aditya-shrivastav"},"Aditya Siddheshwar":{"relativeUrl":"/people/#aditya-siddheshwar"},"aditya123473892":{"relativeUrl":"/people/#aditya123473892"},"Adwaith D":{"relativeUrl":"/people/#adwaith-d"},"agrshch":{"relativeUrl":"/people/#agrshch"},"Ahmet Kaya":{"relativeUrl":"/people/#ahmet-kaya"},"Aidan Nelson":{"relativeUrl":"/people/#aidan-nelson"},"Aierie":{"relativeUrl":"/people/#aierie"},"Ajaya Mati":{"relativeUrl":"/people/#ajaya-mati"},"ajayTDM":{"relativeUrl":"/people/#ajaytdm"},"Ajeet Pratap Singh":{"relativeUrl":"/people/#ajeet-pratap-singh"},"Akash Jaiswal":{"relativeUrl":"/people/#akash-jaiswal"},"AKASH RAJ":{"relativeUrl":"/people/#akash-raj"},"Akash":{"relativeUrl":"/people/#akash"},"Akhil Raj":{"relativeUrl":"/people/#akhil-raj"},"Akshat Nema":{"relativeUrl":"/people/#akshat-nema"},"Akshay Padte":{"relativeUrl":"/people/#akshay-padte"},"al6862":{"relativeUrl":"/people/#al6862"},"Alberto Di Biase":{"relativeUrl":"/people/#alberto-di-biase"},"Alejandra Trejo":{"relativeUrl":"/people/#alejandra-trejo"},"Alejandro":{"relativeUrl":"/people/#alejandro"},"Alex Lyons":{"relativeUrl":"/people/#alex-lyons"},"Alex Troesch":{"relativeUrl":"/people/#alex-troesch"},"AliLordLoss":{"relativeUrl":"/people/#alilordloss"},"AlM Chng":{"relativeUrl":"/people/#alm-chng"},"Aloneduckling":{"relativeUrl":"/people/#aloneduckling"},"alp tuğan":{"relativeUrl":"/people/#alp-tugan"},"Amey Bhavsar":{"relativeUrl":"/people/#amey-bhavsar"},"anagondesign":{"relativeUrl":"/people/#anagondesign"},"András Gárdos":{"relativeUrl":"/people/#andras-gardos"},"AndrasGG":{"relativeUrl":"/people/#andrasgg"},"andrei antonescu":{"relativeUrl":"/people/#andrei-antonescu"},"Andy Timmons":{"relativeUrl":"/people/#andy-timmons"},"Ankush Banik":{"relativeUrl":"/people/#ankush-banik"},"Anna Carreras":{"relativeUrl":"/people/#anna-carreras"},"Annie McKinnon":{"relativeUrl":"/people/#annie-mckinnon"},"anniezhengg":{"relativeUrl":"/people/#anniezhengg"},"Anshuman Maurya":{"relativeUrl":"/people/#anshuman-maurya"},"Anthony Su":{"relativeUrl":"/people/#anthony-su"},"Antonio Jesús Sánchez Padial":{"relativeUrl":"/people/#antonio-jesus-sanchez-padial"},"ANURAG GUPTA":{"relativeUrl":"/people/#anurag-gupta"},"Aqmalp99":{"relativeUrl":"/people/#aqmalp99"},"Arbaaz":{"relativeUrl":"/people/#arbaaz"},"Arihant Parsoya":{"relativeUrl":"/people/#arihant-parsoya"},"Arijit Kundu":{"relativeUrl":"/people/#arijit-kundu"},"Arijit":{"relativeUrl":"/people/#arijit"},"Armaan Gupta":{"relativeUrl":"/people/#armaan-gupta"},"Arsenije Savic":{"relativeUrl":"/people/#arsenije-savic"},"ArshM17":{"relativeUrl":"/people/#arshm17"},"Aryan Koundal":{"relativeUrl":"/people/#aryan-koundal"},"Aryan Singh":{"relativeUrl":"/people/#aryan-singh"},"Aryan Thakor":{"relativeUrl":"/people/#aryan-thakor"},"Ashley Kang":{"relativeUrl":"/people/#ashley-kang"},"Ashris":{"relativeUrl":"/people/#ashris"},"ashu8912":{"relativeUrl":"/people/#ashu8912"},"AsukaMinato":{"relativeUrl":"/people/#asukaminato"},"Atul Varma":{"relativeUrl":"/people/#atul-varma"},"Austin Cawley-Edwards":{"relativeUrl":"/people/#austin-cawley-edwards"},"Austin Lee Slominski":{"relativeUrl":"/people/#austin-lee-slominski"},"Avelar":{"relativeUrl":"/people/#avelar"},"Ayush Jain":{"relativeUrl":"/people/#ayush-jain"},"Ayush Shankar":{"relativeUrl":"/people/#ayush-shankar"},"Ayush Sharma":{"relativeUrl":"/people/#ayush-sharma"},"b2renger":{"relativeUrl":"/people/#b2renger"},"Beau Muylle":{"relativeUrl":"/people/#beau-muylle"},"Ben Fry":{"relativeUrl":"/people/#ben-fry"},"Ben Greenberg":{"relativeUrl":"/people/#ben-greenberg"},"Ben Hinchley":{"relativeUrl":"/people/#ben-hinchley"},"Ben Moren":{"relativeUrl":"/people/#ben-moren"},"Ben Scheiner":{"relativeUrl":"/people/#ben-scheiner"},"Ben Wendt":{"relativeUrl":"/people/#ben-wendt"},"Benjamin Davies":{"relativeUrl":"/people/#benjamin-davies"},"Benoît Bouré":{"relativeUrl":"/people/#benoit-boure"},"BerfinA":{"relativeUrl":"/people/#berfina"},"Berke Özgen":{"relativeUrl":"/people/#berke-ozgen"},"Bernice Wu":{"relativeUrl":"/people/#bernice-wu"},"Bharath Kumar R":{"relativeUrl":"/people/#bharath-kumar-r"},"Blaize Kaye":{"relativeUrl":"/people/#blaize-kaye"},"Boaz":{"relativeUrl":"/people/#boaz"},"Bob Holt":{"relativeUrl":"/people/#bob-holt"},"Bob Ippolito":{"relativeUrl":"/people/#bob-ippolito"},"Bobby Kazimiroff":{"relativeUrl":"/people/#bobby-kazimiroff"},"Boris Bucha":{"relativeUrl":"/people/#boris-bucha"},"Brad Buchanan":{"relativeUrl":"/people/#brad-buchanan"},"Brad Smith":{"relativeUrl":"/people/#brad-smith"},"Brahvim":{"relativeUrl":"/people/#brahvim"},"Brett Cooper":{"relativeUrl":"/people/#brett-cooper"},"Brian Boucheron":{"relativeUrl":"/people/#brian-boucheron"},"Brian Whitman":{"relativeUrl":"/people/#brian-whitman"},"brightredchilli":{"relativeUrl":"/people/#brightredchilli"},"Bryan":{"relativeUrl":"/people/#bryan"},"bsubbaraman":{"relativeUrl":"/people/#bsubbaraman"},"Bulkan Evcimen":{"relativeUrl":"/people/#bulkan-evcimen"},"cab_kyabe":{"relativeUrl":"/people/#cab-kyabe"},"cacoollib":{"relativeUrl":"/people/#cacoollib"},"Caitlin":{"relativeUrl":"/people/#caitlin"},"Caleb Eggensperger":{"relativeUrl":"/people/#caleb-eggensperger"},"Caleb Foss":{"relativeUrl":"/people/#caleb-foss"},"Caleb Mazalevskis":{"relativeUrl":"/people/#caleb-mazalevskis"},"Cameron Yick":{"relativeUrl":"/people/#cameron-yick"},"Camille Roux":{"relativeUrl":"/people/#camille-roux"},"Caroline Hermans":{"relativeUrl":"/people/#caroline-hermans"},"Caroline Record":{"relativeUrl":"/people/#caroline-record"},"Casey Reas":{"relativeUrl":"/people/#casey-reas"},"Cassie Tarakajian":{"relativeUrl":"/people/#cassie-tarakajian"},"cedarfall":{"relativeUrl":"/people/#cedarfall"},"Ceesjan Luiten":{"relativeUrl":"/people/#ceesjan-luiten"},"Chan Jun Shern":{"relativeUrl":"/people/#chan-jun-shern"},"Chandler McWilliams":{"relativeUrl":"/people/#chandler-mcwilliams"},"Char":{"relativeUrl":"/people/#char"},"chaski":{"relativeUrl":"/people/#chaski"},"chechenxu":{"relativeUrl":"/people/#chechenxu"},"Chelly Jin":{"relativeUrl":"/people/#chelly-jin"},"Chiciuc Nicușor":{"relativeUrl":"/people/#chiciuc-nicusor"},"Chinmay Kadam":{"relativeUrl":"/people/#chinmay-kadam"},"Chiun Hau You":{"relativeUrl":"/people/#chiun-hau-you"},"Chris Hallberg":{"relativeUrl":"/people/#chris-hallberg"},"Chris P.":{"relativeUrl":"/people/#chris-p-"},"Chris Thomson":{"relativeUrl":"/people/#chris-thomson"},"Chris":{"relativeUrl":"/people/#chris"},"Christine de Carteret":{"relativeUrl":"/people/#christine-de-carteret"},"Christopher Coleman":{"relativeUrl":"/people/#christopher-coleman"},"Christopher John Ryan":{"relativeUrl":"/people/#christopher-john-ryan"},"Claire K-V":{"relativeUrl":"/people/#claire-k-v"},"Cliff Su":{"relativeUrl":"/people/#cliff-su"},"codeanticode":{"relativeUrl":"/people/#codeanticode"},"Coding for the Arts":{"relativeUrl":"/people/#coding-for-the-arts"},"Cody Fuller":{"relativeUrl":"/people/#cody-fuller"},"CommanderRoot":{"relativeUrl":"/people/#commanderroot"},"Connie Liu":{"relativeUrl":"/people/#connie-liu"},"Constance Yu":{"relativeUrl":"/people/#constance-yu"},"Corey Farwell":{"relativeUrl":"/people/#corey-farwell"},"Corey Gouker":{"relativeUrl":"/people/#corey-gouker"},"Cosme Escobedo":{"relativeUrl":"/people/#cosme-escobedo"},"Craig Pickard":{"relativeUrl":"/people/#craig-pickard"},"Cristóbal Valenzuela":{"relativeUrl":"/people/#cristobal-valenzuela"},"cypress masso":{"relativeUrl":"/people/#cypress-masso"},"Dabe Andre Enajada":{"relativeUrl":"/people/#dabe-andre-enajada"},"Dan Hoizner":{"relativeUrl":"/people/#dan-hoizner"},"Dan":{"relativeUrl":"/people/#dan"},"Dana Mulder":{"relativeUrl":"/people/#dana-mulder"},"Daniel Adams":{"relativeUrl":"/people/#daniel-adams"},"Daniel Grantham":{"relativeUrl":"/people/#daniel-grantham"},"Daniel Howe":{"relativeUrl":"/people/#daniel-howe"},"Daniel Marino":{"relativeUrl":"/people/#daniel-marino"},"Daniel Michel":{"relativeUrl":"/people/#daniel-michel"},"Daniel Sarno":{"relativeUrl":"/people/#daniel-sarno"},"Daniel Shiffman":{"relativeUrl":"/people/#daniel-shiffman"},"Darby Rathbone":{"relativeUrl":"/people/#darby-rathbone"},"Darío Hereñú":{"relativeUrl":"/people/#dario-herenu"},"Darius Morawiec":{"relativeUrl":"/people/#darius-morawiec"},"Dave Pagurek":{"relativeUrl":"/people/#dave-pagurek"},"Dave":{"relativeUrl":"/people/#dave"},"David Aerne":{"relativeUrl":"/people/#david-aerne"},"David Newbury":{"relativeUrl":"/people/#david-newbury"},"David Weiss":{"relativeUrl":"/people/#david-weiss"},"David White":{"relativeUrl":"/people/#david-white"},"David Wicks":{"relativeUrl":"/people/#david-wicks"},"David":{"relativeUrl":"/people/#david"},"Decoy4ever":{"relativeUrl":"/people/#decoy4ever"},"Derek Enlow":{"relativeUrl":"/people/#derek-enlow"},"Derek J. Kinsman":{"relativeUrl":"/people/#derek-j--kinsman"},"Derrick McMillen":{"relativeUrl":"/people/#derrick-mcmillen"},"Deveshi Dwivedi":{"relativeUrl":"/people/#deveshi-dwivedi"},"Devon Rifkin":{"relativeUrl":"/people/#devon-rifkin"},"Dewansh Thakur":{"relativeUrl":"/people/#dewansh-thakur"},"Dharshan":{"relativeUrl":"/people/#dharshan"},"Dhruv Sahnan":{"relativeUrl":"/people/#dhruv-sahnan"},"Diana Galindo":{"relativeUrl":"/people/#diana-galindo"},"digitalfrost":{"relativeUrl":"/people/#digitalfrost"},"Divyansh013":{"relativeUrl":"/people/#divyansh013"},"DIVYANSHU RAJ":{"relativeUrl":"/people/#divyanshu-raj"},"Diya Solanki":{"relativeUrl":"/people/#diya-solanki"},"DIYgirls":{"relativeUrl":"/people/#diygirls"},"Dominic Jodoin":{"relativeUrl":"/people/#dominic-jodoin"},"Dorothy R. Santos":{"relativeUrl":"/people/#dorothy-r--santos"},"Dr. Holomorfo":{"relativeUrl":"/people/#dr--holomorfo"},"dummyAccount22":{"relativeUrl":"/people/#dummyaccount22"},"Dusk":{"relativeUrl":"/people/#dusk"},"Dwiferdio Seagal Putra":{"relativeUrl":"/people/#dwiferdio-seagal-putra"},"e-Coucou":{"relativeUrl":"/people/#e-coucou"},"Ed Brannin":{"relativeUrl":"/people/#ed-brannin"},"Eden Cridge":{"relativeUrl":"/people/#eden-cridge"},"elgin mclaren":{"relativeUrl":"/people/#elgin-mclaren"},"Elliot-Hernandez":{"relativeUrl":"/people/#elliot-hernandez"},"EmilioOcelotl":{"relativeUrl":"/people/#emilioocelotl"},"Emily Chen":{"relativeUrl":"/people/#emily-chen"},"Emily Xie":{"relativeUrl":"/people/#emily-xie"},"Emma Krantz":{"relativeUrl":"/people/#emma-krantz"},"Epic Jefferson":{"relativeUrl":"/people/#epic-jefferson"},"epramer-godaddy":{"relativeUrl":"/people/#epramer-godaddy"},"Erica Pramer":{"relativeUrl":"/people/#erica-pramer"},"Erik Butcher":{"relativeUrl":"/people/#erik-butcher"},"Eshaan Aggarwal":{"relativeUrl":"/people/#eshaan-aggarwal"},"Evelyn Eastmond":{"relativeUrl":"/people/#evelyn-eastmond"},"evelyn masso":{"relativeUrl":"/people/#evelyn-masso"},"everything became blue":{"relativeUrl":"/people/#everything-became-blue"},"Evorage":{"relativeUrl":"/people/#evorage"},"Ewan Johnstone":{"relativeUrl":"/people/#ewan-johnstone"},"Fabian Morón Zirfas":{"relativeUrl":"/people/#fabian-moron-zirfas"},"Faith Wuyue Yu":{"relativeUrl":"/people/#faith-wuyue-yu"},"FAL":{"relativeUrl":"/people/#fal"},"Federico Grandi":{"relativeUrl":"/people/#federico-grandi"},"feedzh":{"relativeUrl":"/people/#feedzh"},"Fenil Gandhi":{"relativeUrl":"/people/#fenil-gandhi"},"ffd8":{"relativeUrl":"/people/#ffd8"},"Fisher Diede":{"relativeUrl":"/people/#fisher-diede"},"Francesco Bigiarini":{"relativeUrl":"/people/#francesco-bigiarini"},"Freddie Rawlins":{"relativeUrl":"/people/#freddie-rawlins"},"Frederik Ring":{"relativeUrl":"/people/#frederik-ring"},"Fun Planet":{"relativeUrl":"/people/#fun-planet"},"Gareth Battensby":{"relativeUrl":"/people/#gareth-battensby"},"Gareth Williams":{"relativeUrl":"/people/#gareth-williams"},"Garima":{"relativeUrl":"/people/#garima"},"gauini":{"relativeUrl":"/people/#gauini"},"Gaurav Tiwary":{"relativeUrl":"/people/#gaurav-tiwary"},"Gene Kogan":{"relativeUrl":"/people/#gene-kogan"},"Geraldo Neto":{"relativeUrl":"/people/#geraldo-neto"},"ggorlen":{"relativeUrl":"/people/#ggorlen"},"Ghales":{"relativeUrl":"/people/#ghales"},"Golan Levin":{"relativeUrl":"/people/#golan-levin"},"GoToLoop":{"relativeUrl":"/people/#gotoloop"},"Gracia-zhang":{"relativeUrl":"/people/#gracia-zhang"},"Greg Sadetsky":{"relativeUrl":"/people/#greg-sadetsky"},"Gregor Martynus":{"relativeUrl":"/people/#gregor-martynus"},"Guilherme Silveira":{"relativeUrl":"/people/#guilherme-silveira"},"Guillermo Montecinos":{"relativeUrl":"/people/#guillermo-montecinos"},"Gus Becker":{"relativeUrl":"/people/#gus-becker"},"Haider Ali Punjabi":{"relativeUrl":"/people/#haider-ali-punjabi"},"Half Scheidl":{"relativeUrl":"/people/#half-scheidl"},"harkirat singh":{"relativeUrl":"/people/#harkirat-singh"},"Harman Batheja":{"relativeUrl":"/people/#harman-batheja"},"Harrycheng233":{"relativeUrl":"/people/#harrycheng233"},"Harsh Agrawal":{"relativeUrl":"/people/#harsh-agrawal"},"Harsh Range":{"relativeUrl":"/people/#harsh-range"},"Harshil Goel":{"relativeUrl":"/people/#harshil-goel"},"Hilary Lau":{"relativeUrl":"/people/#hilary-lau"},"Himanshu Malviya":{"relativeUrl":"/people/#himanshu-malviya"},"Hirad Sab":{"relativeUrl":"/people/#hirad-sab"},"Hitesh Kumar":{"relativeUrl":"/people/#hitesh-kumar"},"hrishit":{"relativeUrl":"/people/#hrishit"},"hunahpu18":{"relativeUrl":"/people/#hunahpu18"},"hvillase":{"relativeUrl":"/people/#hvillase"},"iambiancafonseca":{"relativeUrl":"/people/#iambiancafonseca"},"IENGROUND":{"relativeUrl":"/people/#ienground"},"Ike Bischof":{"relativeUrl":"/people/#ike-bischof"},"Ikko Ashimine":{"relativeUrl":"/people/#ikko-ashimine"},"INARI_DARKFOX":{"relativeUrl":"/people/#inari-darkfox"},"Inhwa":{"relativeUrl":"/people/#inhwa"},"Isaac Durazo ":{"relativeUrl":"/people/#isaac-durazo-"},"İsmail Namdar":{"relativeUrl":"/people/#ismail-namdar"},"Ivy Feraco":{"relativeUrl":"/people/#ivy-feraco"},"J Wong":{"relativeUrl":"/people/#j-wong"},"Jack B. Du":{"relativeUrl":"/people/#jack-b--du"},"Jack Dempsey":{"relativeUrl":"/people/#jack-dempsey"},"Jacques P. du Toit":{"relativeUrl":"/people/#jacques-p--du-toit"},"Jai Kotia":{"relativeUrl":"/people/#jai-kotia"},"Jai Vignesh J":{"relativeUrl":"/people/#jai-vignesh-j"},"Jakub Valtar":{"relativeUrl":"/people/#jakub-valtar"},"James Dunn":{"relativeUrl":"/people/#james-dunn"},"Janis Sepúlveda":{"relativeUrl":"/people/#janis-sepulveda"},"Jared Donovan":{"relativeUrl":"/people/#jared-donovan"},"Jared Sprague":{"relativeUrl":"/people/#jared-sprague"},"Jason Alderman":{"relativeUrl":"/people/#jason-alderman"},"Jason Mandel":{"relativeUrl":"/people/#jason-mandel"},"Jason Sigal":{"relativeUrl":"/people/#jason-sigal"},"Jatin Panjwani":{"relativeUrl":"/people/#jatin-panjwani"},"Jay Gupta":{"relativeUrl":"/people/#jay-gupta"},"Jaymz Rhime":{"relativeUrl":"/people/#jaymz-rhime"},"Jean-Michaël Celerier":{"relativeUrl":"/people/#jean-michael-celerier"},"Jean Pierre Charalambos":{"relativeUrl":"/people/#jean-pierre-charalambos"},"Jen Kagan":{"relativeUrl":"/people/#jen-kagan"},"Jenna deBoisblanc":{"relativeUrl":"/people/#jenna-deboisblanc"},"Jenna":{"relativeUrl":"/people/#jenna"},"Jennifer Jacobs":{"relativeUrl":"/people/#jennifer-jacobs"},"Jens Axel Søgaard":{"relativeUrl":"/people/#jens-axel-søgaard"},"jeong":{"relativeUrl":"/people/#jeong"},"Jerel Johnson":{"relativeUrl":"/people/#jerel-johnson"},"Jeremy Tuloup":{"relativeUrl":"/people/#jeremy-tuloup"},"Jess Klein":{"relativeUrl":"/people/#jess-klein"},"jesse cahn-thompson":{"relativeUrl":"/people/#jesse-cahn-thompson"},"Jesús Enrique Rascón":{"relativeUrl":"/people/#jesus-enrique-rascon"},"JetStarBlues":{"relativeUrl":"/people/#jetstarblues"},"Jiashan Wu":{"relativeUrl":"/people/#jiashan-wu"},"Jimish Fotariya":{"relativeUrl":"/people/#jimish-fotariya"},"Jithin KS":{"relativeUrl":"/people/#jithin-ks"},"Jiwon Park (hanpanic)":{"relativeUrl":"/people/#jiwon-park-(hanpanic)"},"JoeCastor":{"relativeUrl":"/people/#joecastor"},"Johan Karlsson":{"relativeUrl":"/people/#johan-karlsson"},"John Pasquarello":{"relativeUrl":"/people/#john-pasquarello"},"Jon Kaufman":{"relativeUrl":"/people/#jon-kaufman"},"Jonas Rinke":{"relativeUrl":"/people/#jonas-rinke"},"Jonathan Dahan":{"relativeUrl":"/people/#jonathan-dahan"},"Jonathan-David Schröder":{"relativeUrl":"/people/#jonathan-david-schroder"},"Jonathan Heindl":{"relativeUrl":"/people/#jonathan-heindl"},"Joonas Jokinen":{"relativeUrl":"/people/#joonas-jokinen"},"Jordan Shaw":{"relativeUrl":"/people/#jordan-shaw"},"Jordan Sucher":{"relativeUrl":"/people/#jordan-sucher"},"Jorge Moreno":{"relativeUrl":"/people/#jorge-moreno"},"José Miguel Tajuelo Garrigós":{"relativeUrl":"/people/#jose-miguel-tajuelo-garrigos"},"Joseph Aronson":{"relativeUrl":"/people/#joseph-aronson"},"Joseph Hong":{"relativeUrl":"/people/#joseph-hong"},"Joshua Marris":{"relativeUrl":"/people/#joshua-marris"},"Joshua Noble":{"relativeUrl":"/people/#joshua-noble"},"Joshua Storm Becker":{"relativeUrl":"/people/#joshua-storm-becker"},"Jstodd":{"relativeUrl":"/people/#jstodd"},"JT Nimoy":{"relativeUrl":"/people/#jt-nimoy"},"Juan Irache":{"relativeUrl":"/people/#juan-irache"},"juliane nagao":{"relativeUrl":"/people/#juliane-nagao"},"Julio Lab":{"relativeUrl":"/people/#julio-lab"},"Juraj Onuska":{"relativeUrl":"/people/#juraj-onuska"},"Justin Kim":{"relativeUrl":"/people/#justin-kim"},"Jyotiraditya Pradhan":{"relativeUrl":"/people/#jyotiraditya-pradhan"},"K.Adam White":{"relativeUrl":"/people/#k-adam-white"},"kaabe1":{"relativeUrl":"/people/#kaabe1"},"Kai-han Chang":{"relativeUrl":"/people/#kai-han-chang"},"Karen":{"relativeUrl":"/people/#karen"},"karinaxlpz":{"relativeUrl":"/people/#karinaxlpz"},"Kate Grant":{"relativeUrl":"/people/#kate-grant"},"Kate Hollenbach":{"relativeUrl":"/people/#kate-hollenbach"},"Kathryn Isabelle Lawrence":{"relativeUrl":"/people/#kathryn-isabelle-lawrence"},"Katie":{"relativeUrl":"/people/#katie"},"Katsuya Endoh":{"relativeUrl":"/people/#katsuya-endoh"},"Keith Tan":{"relativeUrl":"/people/#keith-tan"},"Ken Miller":{"relativeUrl":"/people/#ken-miller"},"Kenneth Lim":{"relativeUrl":"/people/#kenneth-lim"},"Keshav Malik":{"relativeUrl":"/people/#keshav-malik"},"Kevin Barabash":{"relativeUrl":"/people/#kevin-barabash"},"Kevin Bradley":{"relativeUrl":"/people/#kevin-bradley"},"Kevin Grajeda":{"relativeUrl":"/people/#kevin-grajeda"},"Kevin Ho":{"relativeUrl":"/people/#kevin-ho"},"Kevin Siwoff":{"relativeUrl":"/people/#kevin-siwoff"},"Kevin Workman":{"relativeUrl":"/people/#kevin-workman"},"kjav":{"relativeUrl":"/people/#kjav"},"konstantinstanmeyer":{"relativeUrl":"/people/#konstantinstanmeyer"},"koolaidkrusade":{"relativeUrl":"/people/#koolaidkrusade"},"kroko / Reinis Adovičs":{"relativeUrl":"/people/#kroko---reinis-adovics"},"Kunal Kumar Verma":{"relativeUrl":"/people/#kunal-kumar-verma"},"Kyle James":{"relativeUrl":"/people/#kyle-james"},"Kyle McDonald":{"relativeUrl":"/people/#kyle-mcdonald"},"L05":{"relativeUrl":"/people/#l05"},"Laksh Singla":{"relativeUrl":"/people/#laksh-singla"},"Lakshay Joshi":{"relativeUrl":"/people/#lakshay-joshi"},"lam802":{"relativeUrl":"/people/#lam802"},"Laura Ciro":{"relativeUrl":"/people/#laura-ciro"},"Lauren Lee McCarthy":{"relativeUrl":"/people/#lauren-lee-mccarthy"},"Lauren":{"relativeUrl":"/people/#lauren"},"Lee T":{"relativeUrl":"/people/#lee-t"},"LEMIBANDDEXARI":{"relativeUrl":"/people/#lemibanddexari"},"Leo Kamwathi":{"relativeUrl":"/people/#leo-kamwathi"},"Leo Wang":{"relativeUrl":"/people/#leo-wang"},"Leslie Yip":{"relativeUrl":"/people/#leslie-yip"},"Liam Piesley":{"relativeUrl":"/people/#liam-piesley"},"Liang Tang":{"relativeUrl":"/people/#liang-tang"},"Linda Paiste":{"relativeUrl":"/people/#linda-paiste"},"Lingxiao Wang":{"relativeUrl":"/people/#lingxiao-wang"},"linnhallonqvist":{"relativeUrl":"/people/#linnhallonqvist"},"Lionel Ringenbach":{"relativeUrl":"/people/#lionel-ringenbach"},"Lisa Mabley":{"relativeUrl":"/people/#lisa-mabley"},"Liu Chang":{"relativeUrl":"/people/#liu-chang"},"Liz Peng":{"relativeUrl":"/people/#liz-peng"},"Long Phan":{"relativeUrl":"/people/#long-phan"},"lottihill":{"relativeUrl":"/people/#lottihill"},"Louis Demange":{"relativeUrl":"/people/#louis-demange"},"Luc de wit":{"relativeUrl":"/people/#luc-de-wit"},"Luca Damasco":{"relativeUrl":"/people/#luca-damasco"},"Luis Morales-Navarro":{"relativeUrl":"/people/#luis-morales-navarro"},"luisaph":{"relativeUrl":"/people/#luisaph"},"Luke Burgess-Yeo":{"relativeUrl":"/people/#luke-burgess-yeo"},"M":{"relativeUrl":"/people/#m"},"Maciej Stankiewicz":{"relativeUrl":"/people/#maciej-stankiewicz"},"maddy":{"relativeUrl":"/people/#maddy"},"maddyfisher":{"relativeUrl":"/people/#maddyfisher"},"mainstreamdev":{"relativeUrl":"/people/#mainstreamdev"},"Malay Vasa":{"relativeUrl":"/people/#malay-vasa"},"Manan Arora":{"relativeUrl":"/people/#manan-arora"},"Mann Shah":{"relativeUrl":"/people/#mann-shah"},"manpreet":{"relativeUrl":"/people/#manpreet"},"Marc Abbey":{"relativeUrl":"/people/#marc-abbey"},"Marcus Parsons":{"relativeUrl":"/people/#marcus-parsons"},"Mark Nikora":{"relativeUrl":"/people/#mark-nikora"},"Mark Russo":{"relativeUrl":"/people/#mark-russo"},"Mateusz Swiatkowski":{"relativeUrl":"/people/#mateusz-swiatkowski"},"Mathura MG":{"relativeUrl":"/people/#mathura-mg"},"MATSUDA, Kouichi":{"relativeUrl":"/people/#matsuda,-kouichi"},"Matthew Kaney":{"relativeUrl":"/people/#matthew-kaney"},"Mattia Micheletta Merlin":{"relativeUrl":"/people/#mattia-micheletta-merlin"},"Mauricio Verano Merino":{"relativeUrl":"/people/#mauricio-verano-merino"},"Max Goldstein":{"relativeUrl":"/people/#max-goldstein"},"Max Kolyanov":{"relativeUrl":"/people/#max-kolyanov"},"Max Segal":{"relativeUrl":"/people/#max-segal"},"maxdevjs":{"relativeUrl":"/people/#maxdevjs"},"Maya Man":{"relativeUrl":"/people/#maya-man"},"mcturner1995":{"relativeUrl":"/people/#mcturner1995"},"meezwhite":{"relativeUrl":"/people/#meezwhite"},"mhsh312":{"relativeUrl":"/people/#mhsh312"},"Miaoye Que":{"relativeUrl":"/people/#miaoye-que"},"Michael Hadley":{"relativeUrl":"/people/#michael-hadley"},"Michael J Conrad":{"relativeUrl":"/people/#michael-j-conrad"},"Mikael Lindqvist":{"relativeUrl":"/people/#mikael-lindqvist"},"Mike ":{"relativeUrl":"/people/#mike-"},"Mike Anderson":{"relativeUrl":"/people/#mike-anderson"},"Miles Peyton":{"relativeUrl":"/people/#miles-peyton"},"min-kim42":{"relativeUrl":"/people/#min-kim42"},"MiniPear":{"relativeUrl":"/people/#minipear"},"Minjun Kim":{"relativeUrl":"/people/#minjun-kim"},"Minwook Park":{"relativeUrl":"/people/#minwook-park"},"Mislav Milicevic":{"relativeUrl":"/people/#mislav-milicevic"},"ml.008":{"relativeUrl":"/people/#ml-008"},"mohamedalisaifudeen":{"relativeUrl":"/people/#mohamedalisaifudeen"},"Mohammad Hussain Nagaria":{"relativeUrl":"/people/#mohammad-hussain-nagaria"},"Mohana Sundaram S":{"relativeUrl":"/people/#mohana-sundaram-s"},"Mohit Balwani":{"relativeUrl":"/people/#mohit-balwani"},"Moira Turner":{"relativeUrl":"/people/#moira-turner"},"Monalisa Maity":{"relativeUrl":"/people/#monalisa-maity"},"Monica Powell":{"relativeUrl":"/people/#monica-powell"},"Mostafa Ewis":{"relativeUrl":"/people/#mostafa-ewis"},"Mr. Algorithm":{"relativeUrl":"/people/#mr--algorithm"},"Muhammad Haroon":{"relativeUrl":"/people/#muhammad-haroon"},"Munus Shih":{"relativeUrl":"/people/#munus-shih"},"Musab Kılıç":{"relativeUrl":"/people/#musab-kılıc"},"mxchelle":{"relativeUrl":"/people/#mxchelle"},"Nabeel (Dexter)":{"relativeUrl":"/people/#nabeel-(dexter)"},"Nabil Hassein":{"relativeUrl":"/people/#nabil-hassein"},"Nahuel Palumbo":{"relativeUrl":"/people/#nahuel-palumbo"},"Nakul Shahdadpuri":{"relativeUrl":"/people/#nakul-shahdadpuri"},"nancy":{"relativeUrl":"/people/#nancy"},"Naoto Hieda":{"relativeUrl":"/people/#naoto-hieda"},"naoyashiga":{"relativeUrl":"/people/#naoyashiga"},"Nat Decker":{"relativeUrl":"/people/#nat-decker"},"Nicholas Marino":{"relativeUrl":"/people/#nicholas-marino"},"NicholasGillen":{"relativeUrl":"/people/#nicholasgillen"},"Nick Briz":{"relativeUrl":"/people/#nick-briz"},"Nick McIntyre":{"relativeUrl":"/people/#nick-mcintyre"},"Nick Müller":{"relativeUrl":"/people/#nick-muller"},"Nick Yahnke":{"relativeUrl":"/people/#nick-yahnke"},"Nico Finkernagel":{"relativeUrl":"/people/#nico-finkernagel"},"Niels Joubert":{"relativeUrl":"/people/#niels-joubert"},"NIINOMI":{"relativeUrl":"/people/#niinomi"},"Nik Nyby":{"relativeUrl":"/people/#nik-nyby"},"Nikhil":{"relativeUrl":"/people/#nikhil"},"nikhilkalburgi":{"relativeUrl":"/people/#nikhilkalburgi"},"Niki Ito":{"relativeUrl":"/people/#niki-ito"},"Niklas Peters":{"relativeUrl":"/people/#niklas-peters"},"Nisar Hassan Naqvi":{"relativeUrl":"/people/#nisar-hassan-naqvi"},"Nitin Rana":{"relativeUrl":"/people/#nitin-rana"},"Nitish Bansal":{"relativeUrl":"/people/#nitish-bansal"},"nully0x":{"relativeUrl":"/people/#nully0x"},"odm275":{"relativeUrl":"/people/#odm275"},"oleboleskole3":{"relativeUrl":"/people/#oleboleskole3"},"Oleksii Bulba":{"relativeUrl":"/people/#oleksii-bulba"},"Oliver Steele":{"relativeUrl":"/people/#oliver-steele"},"Oliver Wright":{"relativeUrl":"/people/#oliver-wright"},"Onexi":{"relativeUrl":"/people/#onexi"},"Ong Zhi Zheng":{"relativeUrl":"/people/#ong-zhi-zheng"},"Oren Shoham":{"relativeUrl":"/people/#oren-shoham"},"Orwiss":{"relativeUrl":"/people/#orwiss"},"ov":{"relativeUrl":"/people/#ov"},"oz":{"relativeUrl":"/people/#oz"},"paollabd":{"relativeUrl":"/people/#paollabd"},"Paolo Pedercini":{"relativeUrl":"/people/#paolo-pedercini"},"Paul Wheeler":{"relativeUrl":"/people/#paul-wheeler"},"Peiling Jiang":{"relativeUrl":"/people/#peiling-jiang"},"perminder-17":{"relativeUrl":"/people/#perminder-17"},"Peter Marsh":{"relativeUrl":"/people/#peter-marsh"},"peter":{"relativeUrl":"/people/#peter"},"Petr Brzek":{"relativeUrl":"/people/#petr-brzek"},"Philip Bell":{"relativeUrl":"/people/#philip-bell"},"Phoenix Perry":{"relativeUrl":"/people/#phoenix-perry"},"pie999":{"relativeUrl":"/people/#pie999"},"Pierre Krafft":{"relativeUrl":"/people/#pierre-krafft"},"pifragile":{"relativeUrl":"/people/#pifragile"},"piinthecloud":{"relativeUrl":"/people/#piinthecloud"},"pinky-pig":{"relativeUrl":"/people/#pinky-pig"},"PiyushChandra17":{"relativeUrl":"/people/#piyushchandra17"},"plural":{"relativeUrl":"/people/#plural"},"Poulav Bhowmick":{"relativeUrl":"/people/#poulav-bhowmick"},"PracDuckling":{"relativeUrl":"/people/#pracduckling"},"Pragya":{"relativeUrl":"/people/#pragya"},"Prashant Gupta":{"relativeUrl":"/people/#prashant-gupta"},"Prateek Jain":{"relativeUrl":"/people/#prateek-jain"},"Prateekgit":{"relativeUrl":"/people/#prateekgit"},"Pratyay Banerjee":{"relativeUrl":"/people/#pratyay-banerjee"},"Priya-Pathak":{"relativeUrl":"/people/#priya-pathak"},"Qianqian Ye":{"relativeUrl":"/people/#qianqian-ye"},"Quinton Ashley":{"relativeUrl":"/people/#quinton-ashley"},"R. Luke DuBois":{"relativeUrl":"/people/#r--luke-dubois"},"Rachel Lim":{"relativeUrl":"/people/#rachel-lim"},"raclim":{"relativeUrl":"/people/#raclim"},"Rahul Mohata":{"relativeUrl":"/people/#rahul-mohata"},"rahulrangers":{"relativeUrl":"/people/#rahulrangers"},"Rajiv Ranjan Singh":{"relativeUrl":"/people/#rajiv-ranjan-singh"},"Ramin":{"relativeUrl":"/people/#ramin"},"Ramon Jr. Yniguez":{"relativeUrl":"/people/#ramon-jr--yniguez"},"RandomGamingDev":{"relativeUrl":"/people/#randomgamingdev"},"Raphaël de Courville":{"relativeUrl":"/people/#raphael-de-courville"},"reejuBhattacharya":{"relativeUrl":"/people/#reejubhattacharya"},"Reijo Vosu":{"relativeUrl":"/people/#reijo-vosu"},"reona396":{"relativeUrl":"/people/#reona396"},"rinkydevi":{"relativeUrl":"/people/#rinkydevi"},"Rishabh Taparia":{"relativeUrl":"/people/#rishabh-taparia"},"Robyn Overstreet":{"relativeUrl":"/people/#robyn-overstreet"},"Rohan Julka":{"relativeUrl":"/people/#rohan-julka"},"Rune Skjoldborg Madsen":{"relativeUrl":"/people/#rune-skjoldborg-madsen"},"Ryan Slade":{"relativeUrl":"/people/#ryan-slade"},"Ryuya":{"relativeUrl":"/people/#ryuya"},"saber khan":{"relativeUrl":"/people/#saber-khan"},"Sachin Varghese":{"relativeUrl":"/people/#sachin-varghese"},"Sagar Arora":{"relativeUrl":"/people/#sagar-arora"},"Sai Bhushan":{"relativeUrl":"/people/#sai-bhushan"},"Saksham Saxena":{"relativeUrl":"/people/#saksham-saxena"},"sam delong":{"relativeUrl":"/people/#sam-delong"},"Sam Lavigne":{"relativeUrl":"/people/#sam-lavigne"},"sambensim":{"relativeUrl":"/people/#sambensim"},"Samir Ghosh":{"relativeUrl":"/people/#samir-ghosh"},"Sampo Rapeli":{"relativeUrl":"/people/#sampo-rapeli"},"Samrudh Shetty":{"relativeUrl":"/people/#samrudh-shetty"},"Samuel Alarco Cantos":{"relativeUrl":"/people/#samuel-alarco-cantos"},"Samuel Cho":{"relativeUrl":"/people/#samuel-cho"},"Sanchit Kapoor":{"relativeUrl":"/people/#sanchit-kapoor"},"Sandeep Kumar Bhagat":{"relativeUrl":"/people/#sandeep-kumar-bhagat"},"Sanjay Singh Rajpoot":{"relativeUrl":"/people/#sanjay-singh-rajpoot"},"Sanket Singh":{"relativeUrl":"/people/#sanket-singh"},"Sarah Ciston":{"relativeUrl":"/people/#sarah-ciston"},"Sarah Groff Hennigh-Palermo":{"relativeUrl":"/people/#sarah-groff-hennigh-palermo"},"Sarthak Saxena":{"relativeUrl":"/people/#sarthak-saxena"},"Saskia Freeke":{"relativeUrl":"/people/#saskia-freeke"},"Satyam Kulkarni":{"relativeUrl":"/people/#satyam-kulkarni"},"Sawai Singh Rajpurohit":{"relativeUrl":"/people/#sawai-singh-rajpurohit"},"Scott Garner":{"relativeUrl":"/people/#scott-garner"},"Scott Murray":{"relativeUrl":"/people/#scott-murray"},"Seb Méndez":{"relativeUrl":"/people/#seb-mendez"},"SejinOH":{"relativeUrl":"/people/#sejinoh"},"Sekani Warner":{"relativeUrl":"/people/#sekani-warner"},"senbaku":{"relativeUrl":"/people/#senbaku"},"Seonghyeon Kim":{"relativeUrl":"/people/#seonghyeon-kim"},"Sepand Ansari":{"relativeUrl":"/people/#sepand-ansari"},"Serena20003":{"relativeUrl":"/people/#serena20003"},"Seth":{"relativeUrl":"/people/#seth"},"Seung-Gi Kim(David)":{"relativeUrl":"/people/#seung-gi-kim(david)"},"shaharyarshamshi":{"relativeUrl":"/people/#shaharyarshamshi"},"Shahma Ansari":{"relativeUrl":"/people/#shahma-ansari"},"Shahriar Rahman Rubayet":{"relativeUrl":"/people/#shahriar-rahman-rubayet"},"Shawn Van Every":{"relativeUrl":"/people/#shawn-van-every"},"sheamus":{"relativeUrl":"/people/#sheamus"},"SHIBAHARA Hiroki":{"relativeUrl":"/people/#shibahara-hiroki"},"Shirou":{"relativeUrl":"/people/#shirou"},"Shivansh Sharma":{"relativeUrl":"/people/#shivansh-sharma"},"Shubham Kumar":{"relativeUrl":"/people/#shubham-kumar"},"Shubham Rathore":{"relativeUrl":"/people/#shubham-rathore"},"shujulin":{"relativeUrl":"/people/#shujulin"},"siddhant":{"relativeUrl":"/people/#siddhant"},"Simranjeet Singh":{"relativeUrl":"/people/#simranjeet-singh"},"Sinan Ascioglu":{"relativeUrl":"/people/#sinan-ascioglu"},"Sithe Ncube":{"relativeUrl":"/people/#sithe-ncube"},"Sivaram D":{"relativeUrl":"/people/#sivaram-d"},"skyperx":{"relativeUrl":"/people/#skyperx"},"sm7515":{"relativeUrl":"/people/#sm7515"},"smilee":{"relativeUrl":"/people/#smilee"},"So Sun Park":{"relativeUrl":"/people/#so-sun-park"},"Sona Lee":{"relativeUrl":"/people/#sona-lee"},"sortasleepy":{"relativeUrl":"/people/#sortasleepy"},"Souvik Kumar":{"relativeUrl":"/people/#souvik-kumar"},"Sparsh Paliwal":{"relativeUrl":"/people/#sparsh-paliwal"},"sparshg":{"relativeUrl":"/people/#sparshg"},"Spencer Faith":{"relativeUrl":"/people/#spencer-faith"},"sphantom-code":{"relativeUrl":"/people/#sphantom-code"},"Spongman":{"relativeUrl":"/people/#spongman"},"Stalgia Grigg":{"relativeUrl":"/people/#stalgia-grigg"},"stampyzfanz":{"relativeUrl":"/people/#stampyzfanz"},"Stef Tervelde":{"relativeUrl":"/people/#stef-tervelde"},"Steven Green":{"relativeUrl":"/people/#steven-green"},"Stig Møller Hansen":{"relativeUrl":"/people/#stig-møller-hansen"},"stormCup":{"relativeUrl":"/people/#stormcup"},"Sudhanshu Tiwari":{"relativeUrl":"/people/#sudhanshu-tiwari"},"suhani6904":{"relativeUrl":"/people/#suhani6904"},"Suhas CV":{"relativeUrl":"/people/#suhas-cv"},"Summer Rizzo":{"relativeUrl":"/people/#summer-rizzo"},"Sun Lifei":{"relativeUrl":"/people/#sun-lifei"},"surajsurajsuraj":{"relativeUrl":"/people/#surajsurajsuraj"},"Surbhi Pittie":{"relativeUrl":"/people/#surbhi-pittie"},"susan evans":{"relativeUrl":"/people/#susan-evans"},"Swapnil-2001":{"relativeUrl":"/people/#swapnil-2001"},"sz245":{"relativeUrl":"/people/#sz245"},"tae":{"relativeUrl":"/people/#tae"},"Taeyoon Choi":{"relativeUrl":"/people/#taeyoon-choi"},"takawo":{"relativeUrl":"/people/#takawo"},"Takuma Kira":{"relativeUrl":"/people/#takuma-kira"},"Tanner Dolby":{"relativeUrl":"/people/#tanner-dolby"},"Tanvi Kumar":{"relativeUrl":"/people/#tanvi-kumar"},"tapioca24":{"relativeUrl":"/people/#tapioca24"},"taseenb":{"relativeUrl":"/people/#taseenb"},"Tega Brain":{"relativeUrl":"/people/#tega-brain"},"Teixido":{"relativeUrl":"/people/#teixido"},"TetroGem":{"relativeUrl":"/people/#tetrogem"},"tetunori":{"relativeUrl":"/people/#tetunori"},"Théodore Orfèvres":{"relativeUrl":"/people/#theodore-orfevres"},"Thomas Diewald":{"relativeUrl":"/people/#thomas-diewald"},"Thomas Herlea":{"relativeUrl":"/people/#thomas-herlea"},"Tiago Hermano":{"relativeUrl":"/people/#tiago-hermano"},"Todd H. Page":{"relativeUrl":"/people/#todd-h--page"},"togekisse":{"relativeUrl":"/people/#togekisse"},"Tokini Irene Fubara":{"relativeUrl":"/people/#tokini-irene-fubara"},"tonipizza":{"relativeUrl":"/people/#tonipizza"},"truemaxdh":{"relativeUrl":"/people/#truemaxdh"},"trych":{"relativeUrl":"/people/#trych"},"tuan":{"relativeUrl":"/people/#tuan"},"Tushar Choudhari":{"relativeUrl":"/people/#tushar-choudhari"},"TwoTicks":{"relativeUrl":"/people/#twoticks"},"Tyler Jordan":{"relativeUrl":"/people/#tyler-jordan"},"Tyler Stefanich":{"relativeUrl":"/people/#tyler-stefanich"},"Umang Utkarsh":{"relativeUrl":"/people/#umang-utkarsh"},"Unicar":{"relativeUrl":"/people/#unicar"},"UnityOfFairfax":{"relativeUrl":"/people/#unityoffairfax"},"uno seis tres":{"relativeUrl":"/people/#uno-seis-tres"},"Urvashi":{"relativeUrl":"/people/#urvashi"},"Utkarsh Tiwari":{"relativeUrl":"/people/#utkarsh-tiwari"},"Val Head":{"relativeUrl":"/people/#val-head"},"Varsha Verma":{"relativeUrl":"/people/#varsha-verma"},"Vasu Goel":{"relativeUrl":"/people/#vasu-goel"},"Vedhant Agarwal":{"relativeUrl":"/people/#vedhant-agarwal"},"Victor Morgan":{"relativeUrl":"/people/#victor-morgan"},"Vijith Assar":{"relativeUrl":"/people/#vijith-assar"},"viola ":{"relativeUrl":"/people/#viola-"},"vipulrawat":{"relativeUrl":"/people/#vipulrawat"},"Vishal Sharma":{"relativeUrl":"/people/#vishal-sharma"},"Vishal Singh":{"relativeUrl":"/people/#vishal-singh"},"Vishwas Srivastava":{"relativeUrl":"/people/#vishwas-srivastava"},"Vítor Galvão":{"relativeUrl":"/people/#vitor-galvao"},"Vivek Tiwari":{"relativeUrl":"/people/#vivek-tiwari"},"wackbyte":{"relativeUrl":"/people/#wackbyte"},"Wade Marshall":{"relativeUrl":"/people/#wade-marshall"},"wagedu":{"relativeUrl":"/people/#wagedu"},"Wes Lord":{"relativeUrl":"/people/#wes-lord"},"Will Martin":{"relativeUrl":"/people/#will-martin"},"Wu Che Yu":{"relativeUrl":"/people/#wu-che-yu"},"Xavier Góngora":{"relativeUrl":"/people/#xavier-gongora"},"Xavier Snelgrove":{"relativeUrl":"/people/#xavier-snelgrove"},"XingZiLong":{"relativeUrl":"/people/#xingzilong"},"XTY":{"relativeUrl":"/people/#xty"},"XY Feng":{"relativeUrl":"/people/#xy-feng"},"Yana Agun Siswanto":{"relativeUrl":"/people/#yana-agun-siswanto"},"Yannick Assogba":{"relativeUrl":"/people/#yannick-assogba"},"Yasai":{"relativeUrl":"/people/#yasai"},"Yash Pandey":{"relativeUrl":"/people/#yash-pandey"},"YewonCALLI":{"relativeUrl":"/people/#yewoncalli"},"Yifan Mai":{"relativeUrl":"/people/#yifan-mai"},"Yining Shi":{"relativeUrl":"/people/#yining-shi"},"Yograj Rajput":{"relativeUrl":"/people/#yograj-rajput"},"Yolonanido":{"relativeUrl":"/people/#yolonanido"},"Yousef Abu-Salah":{"relativeUrl":"/people/#yousef-abu-salah"},"yu":{"relativeUrl":"/people/#yu"},"Yuki":{"relativeUrl":"/people/#yuki"},"Yuting Lu":{"relativeUrl":"/people/#yuting-lu"},"Zac Tolle":{"relativeUrl":"/people/#zac-tolle"},"Zach Rispoli":{"relativeUrl":"/people/#zach-rispoli"},"zacharystenger":{"relativeUrl":"/people/#zacharystenger"},"Zearin":{"relativeUrl":"/people/#zearin"},"Zeke Sikelianos":{"relativeUrl":"/people/#zeke-sikelianos"},"zelf0":{"relativeUrl":"/people/#zelf0"},"Zeno Zeng":{"relativeUrl":"/people/#zeno-zeng"},"Zhao Xin":{"relativeUrl":"/people/#zhao-xin"},"Zoë Ingram":{"relativeUrl":"/people/#zoe-ingram"},"Zoe Stenger":{"relativeUrl":"/people/#zoe-stenger"},"æmon":{"relativeUrl":"/people/#æmon"},"李坤霖":{"relativeUrl":"/people/#李坤霖"}},"reference":{"Array":{"relativeUrl":"/reference/p5/Array"},"String":{"relativeUrl":"/reference/p5/String"},"abs()":{"relativeUrl":"/reference/p5/abs","alias":"abs"},"accelerationX":{"relativeUrl":"/reference/p5/accelerationX"},"accelerationY":{"relativeUrl":"/reference/p5/accelerationY"},"accelerationZ":{"relativeUrl":"/reference/p5/accelerationZ"},"acos()":{"relativeUrl":"/reference/p5/acos","alias":"acos"},"alpha()":{"relativeUrl":"/reference/p5/alpha","alias":"alpha"},"ambientLight()":{"relativeUrl":"/reference/p5/ambientLight","alias":"ambientLight"},"ambientMaterial()":{"relativeUrl":"/reference/p5/ambientMaterial","alias":"ambientMaterial"},"angleMode()":{"relativeUrl":"/reference/p5/angleMode","alias":"angleMode"},"append":{"relativeUrl":"/reference/p5/append"},"applyMatrix()":{"relativeUrl":"/reference/p5/applyMatrix","alias":"applyMatrix"},"arc()":{"relativeUrl":"/reference/p5/arc","alias":"arc"},"arrayCopy()":{"relativeUrl":"/reference/p5/arrayCopy","alias":"arrayCopy"},"asin()":{"relativeUrl":"/reference/p5/asin","alias":"asin"},"atan()":{"relativeUrl":"/reference/p5/atan","alias":"atan"},"atan2()":{"relativeUrl":"/reference/p5/atan2","alias":"atan2"},"background()":{"relativeUrl":"/reference/p5/background","alias":"background"},"beginClip()":{"relativeUrl":"/reference/p5/beginClip","alias":"beginClip"},"beginContour()":{"relativeUrl":"/reference/p5/beginContour","alias":"beginContour"},"beginGeometry()":{"relativeUrl":"/reference/p5/beginGeometry","alias":"beginGeometry"},"beginShape()":{"relativeUrl":"/reference/p5/beginShape","alias":"beginShape"},"bezier()":{"relativeUrl":"/reference/p5/bezier","alias":"bezier"},"bezierDetail()":{"relativeUrl":"/reference/p5/bezierDetail","alias":"bezierDetail"},"bezierPoint()":{"relativeUrl":"/reference/p5/bezierPoint","alias":"bezierPoint"},"bezierTangent()":{"relativeUrl":"/reference/p5/bezierTangent","alias":"bezierTangent"},"bezierVertex()":{"relativeUrl":"/reference/p5/bezierVertex","alias":"bezierVertex"},"blend()":{"relativeUrl":"/reference/p5/blend","alias":"blend"},"blendMode()":{"relativeUrl":"/reference/p5/blendMode","alias":"blendMode"},"blue()":{"relativeUrl":"/reference/p5/blue","alias":"blue"},"boolean()":{"relativeUrl":"/reference/p5/boolean","alias":"boolean"},"box()":{"relativeUrl":"/reference/p5/box","alias":"box"},"brightness()":{"relativeUrl":"/reference/p5/brightness","alias":"brightness"},"buildGeometry()":{"relativeUrl":"/reference/p5/buildGeometry","alias":"buildGeometry"},"byte()":{"relativeUrl":"/reference/p5/byte","alias":"byte"},"camera()":{"relativeUrl":"/reference/p5/camera","alias":"camera"},"ceil()":{"relativeUrl":"/reference/p5/ceil","alias":"ceil"},"changed()":{"relativeUrl":"/reference/p5/changed","alias":"changed"},"char()":{"relativeUrl":"/reference/p5/char","alias":"char"},"circle()":{"relativeUrl":"/reference/p5/circle","alias":"circle"},"class":{"relativeUrl":"/reference/p5/class"},"clear()":{"relativeUrl":"/reference/p5/clear","alias":"clear"},"clearDepth()":{"relativeUrl":"/reference/p5/clearDepth","alias":"clearDepth"},"clearStorage()":{"relativeUrl":"/reference/p5/clearStorage","alias":"clearStorage"},"clip()":{"relativeUrl":"/reference/p5/clip","alias":"clip"},"color()":{"relativeUrl":"/reference/p5/color","alias":"color"},"colorMode()":{"relativeUrl":"/reference/p5/colorMode","alias":"colorMode"},"concat()":{"relativeUrl":"/reference/p5/concat","alias":"concat"},"cone()":{"relativeUrl":"/reference/p5/cone","alias":"cone"},"console":{"relativeUrl":"/reference/p5/console"},"AUTO":{"relativeUrl":"/reference/p5/AUTO"},"DEGREES":{"relativeUrl":"/reference/p5/DEGREES"},"HALF_PI":{"relativeUrl":"/reference/p5/HALF_PI"},"HSB":{"relativeUrl":"/reference/p5/HSB"},"P2D":{"relativeUrl":"/reference/p5/P2D"},"PI":{"relativeUrl":"/reference/p5/PI"},"QUARTER_PI":{"relativeUrl":"/reference/p5/QUARTER_PI"},"RADIANS":{"relativeUrl":"/reference/p5/RADIANS"},"TAU":{"relativeUrl":"/reference/p5/TAU"},"TWO_PI":{"relativeUrl":"/reference/p5/TWO_PI"},"VERSION":{"relativeUrl":"/reference/p5/VERSION"},"WEBGL":{"relativeUrl":"/reference/p5/WEBGL"},"WEBGL2":{"relativeUrl":"/reference/p5/WEBGL2"},"constrain()":{"relativeUrl":"/reference/p5/constrain","alias":"constrain"},"copy()":{"relativeUrl":"/reference/p5/copy","alias":"copy"},"cos()":{"relativeUrl":"/reference/p5/cos","alias":"cos"},"createA()":{"relativeUrl":"/reference/p5/createA","alias":"createA"},"createAudio()":{"relativeUrl":"/reference/p5/createAudio","alias":"createAudio"},"createButton()":{"relativeUrl":"/reference/p5/createButton","alias":"createButton"},"createCamera()":{"relativeUrl":"/reference/p5/createCamera","alias":"createCamera"},"createCanvas()":{"relativeUrl":"/reference/p5/createCanvas","alias":"createCanvas"},"createCapture()":{"relativeUrl":"/reference/p5/createCapture","alias":"createCapture"},"createCheckbox()":{"relativeUrl":"/reference/p5/createCheckbox","alias":"createCheckbox"},"createColorPicker()":{"relativeUrl":"/reference/p5/createColorPicker","alias":"createColorPicker"},"createConvolver()":{"relativeUrl":"/reference/p5/createConvolver","alias":"createConvolver"},"createDiv()":{"relativeUrl":"/reference/p5/createDiv","alias":"createDiv"},"createElement()":{"relativeUrl":"/reference/p5/createElement","alias":"createElement"},"createFileInput()":{"relativeUrl":"/reference/p5/createFileInput","alias":"createFileInput"},"createFilterShader()":{"relativeUrl":"/reference/p5/createFilterShader","alias":"createFilterShader"},"createFramebuffer()":{"relativeUrl":"/reference/p5/createFramebuffer","alias":"createFramebuffer"},"createGraphics()":{"relativeUrl":"/reference/p5/createGraphics","alias":"createGraphics"},"createImage()":{"relativeUrl":"/reference/p5/createImage","alias":"createImage"},"createImg()":{"relativeUrl":"/reference/p5/createImg","alias":"createImg"},"createInput()":{"relativeUrl":"/reference/p5/createInput","alias":"createInput"},"createNumberDict()":{"relativeUrl":"/reference/p5/createNumberDict","alias":"createNumberDict"},"createP()":{"relativeUrl":"/reference/p5/createP","alias":"createP"},"createRadio()":{"relativeUrl":"/reference/p5/createRadio","alias":"createRadio"},"createSelect()":{"relativeUrl":"/reference/p5/createSelect","alias":"createSelect"},"createShader()":{"relativeUrl":"/reference/p5/createShader","alias":"createShader"},"createSlider()":{"relativeUrl":"/reference/p5/createSlider","alias":"createSlider"},"createSpan()":{"relativeUrl":"/reference/p5/createSpan","alias":"createSpan"},"createStringDict()":{"relativeUrl":"/reference/p5/createStringDict","alias":"createStringDict"},"createVector()":{"relativeUrl":"/reference/p5/createVector","alias":"createVector"},"createVideo()":{"relativeUrl":"/reference/p5/createVideo","alias":"createVideo"},"createWriter()":{"relativeUrl":"/reference/p5/createWriter","alias":"createWriter"},"cursor()":{"relativeUrl":"/reference/p5/cursor","alias":"cursor"},"curve()":{"relativeUrl":"/reference/p5/curve","alias":"curve"},"curveDetail()":{"relativeUrl":"/reference/p5/curveDetail","alias":"curveDetail"},"curvePoint()":{"relativeUrl":"/reference/p5/curvePoint","alias":"curvePoint"},"curveTangent()":{"relativeUrl":"/reference/p5/curveTangent","alias":"curveTangent"},"curveTightness()":{"relativeUrl":"/reference/p5/curveTightness","alias":"curveTightness"},"curveVertex()":{"relativeUrl":"/reference/p5/curveVertex","alias":"curveVertex"},"cylinder()":{"relativeUrl":"/reference/p5/cylinder","alias":"cylinder"},"day()":{"relativeUrl":"/reference/p5/day","alias":"day"},"debugMode()":{"relativeUrl":"/reference/p5/debugMode","alias":"debugMode"},"degrees()":{"relativeUrl":"/reference/p5/degrees","alias":"degrees"},"deltaTime":{"relativeUrl":"/reference/p5/deltaTime"},"describe()":{"relativeUrl":"/reference/p5/describe","alias":"describe"},"describeElement()":{"relativeUrl":"/reference/p5/describeElement","alias":"describeElement"},"deviceMoved()":{"relativeUrl":"/reference/p5/deviceMoved","alias":"deviceMoved"},"deviceOrientation":{"relativeUrl":"/reference/p5/deviceOrientation"},"deviceShaken()":{"relativeUrl":"/reference/p5/deviceShaken","alias":"deviceShaken"},"deviceTurned()":{"relativeUrl":"/reference/p5/deviceTurned","alias":"deviceTurned"},"directionalLight()":{"relativeUrl":"/reference/p5/directionalLight","alias":"directionalLight"},"disableFriendlyErrors":{"relativeUrl":"/reference/p5/disableFriendlyErrors"},"displayDensity()":{"relativeUrl":"/reference/p5/displayDensity","alias":"displayDensity"},"displayHeight":{"relativeUrl":"/reference/p5/displayHeight"},"displayWidth":{"relativeUrl":"/reference/p5/displayWidth"},"dist()":{"relativeUrl":"/reference/p5/dist","alias":"dist"},"doubleClicked()":{"relativeUrl":"/reference/p5/doubleClicked","alias":"doubleClicked"},"draw()":{"relativeUrl":"/reference/p5/draw","alias":"draw"},"drawingContext":{"relativeUrl":"/reference/p5/drawingContext"},"ellipse()":{"relativeUrl":"/reference/p5/ellipse","alias":"ellipse"},"ellipseMode()":{"relativeUrl":"/reference/p5/ellipseMode","alias":"ellipseMode"},"ellipsoid()":{"relativeUrl":"/reference/p5/ellipsoid","alias":"ellipsoid"},"emissiveMaterial()":{"relativeUrl":"/reference/p5/emissiveMaterial","alias":"emissiveMaterial"},"endClip()":{"relativeUrl":"/reference/p5/endClip","alias":"endClip"},"endContour()":{"relativeUrl":"/reference/p5/endContour","alias":"endContour"},"endGeometry()":{"relativeUrl":"/reference/p5/endGeometry","alias":"endGeometry"},"endShape()":{"relativeUrl":"/reference/p5/endShape","alias":"endShape"},"erase()":{"relativeUrl":"/reference/p5/erase","alias":"erase"},"exitPointerLock()":{"relativeUrl":"/reference/p5/exitPointerLock","alias":"exitPointerLock"},"exp()":{"relativeUrl":"/reference/p5/exp","alias":"exp"},"fill()":{"relativeUrl":"/reference/p5/fill","alias":"fill"},"filter()":{"relativeUrl":"/reference/p5/filter","alias":"filter"},"float()":{"relativeUrl":"/reference/p5/float","alias":"float"},"floor()":{"relativeUrl":"/reference/p5/floor","alias":"floor"},"focused":{"relativeUrl":"/reference/p5/focused"},"for":{"relativeUrl":"/reference/p5/for"},"fract()":{"relativeUrl":"/reference/p5/fract","alias":"fract"},"frameCount":{"relativeUrl":"/reference/p5/frameCount"},"frameRate()":{"relativeUrl":"/reference/p5/frameRate","alias":"frameRate"},"freeGeometry()":{"relativeUrl":"/reference/p5/freeGeometry","alias":"freeGeometry"},"freqToMidi()":{"relativeUrl":"/reference/p5/freqToMidi","alias":"freqToMidi"},"frustum()":{"relativeUrl":"/reference/p5/frustum","alias":"frustum"},"fullscreen()":{"relativeUrl":"/reference/p5/fullscreen","alias":"fullscreen"},"function":{"relativeUrl":"/reference/p5/function"},"get()":{"relativeUrl":"/reference/p5/get","alias":"get"},"getAudioContext()":{"relativeUrl":"/reference/p5/getAudioContext","alias":"getAudioContext"},"getItem()":{"relativeUrl":"/reference/p5/getItem","alias":"getItem"},"getOutputVolume()":{"relativeUrl":"/reference/p5/getOutputVolume","alias":"getOutputVolume"},"getTargetFrameRate()":{"relativeUrl":"/reference/p5/getTargetFrameRate","alias":"getTargetFrameRate"},"getURL()":{"relativeUrl":"/reference/p5/getURL","alias":"getURL"},"getURLParams()":{"relativeUrl":"/reference/p5/getURLParams","alias":"getURLParams"},"getURLPath()":{"relativeUrl":"/reference/p5/getURLPath","alias":"getURLPath"},"green()":{"relativeUrl":"/reference/p5/green","alias":"green"},"gridOutput()":{"relativeUrl":"/reference/p5/gridOutput","alias":"gridOutput"},"height":{"relativeUrl":"/reference/p5/height"},"hex()":{"relativeUrl":"/reference/p5/hex","alias":"hex"},"hour()":{"relativeUrl":"/reference/p5/hour","alias":"hour"},"httpDo()":{"relativeUrl":"/reference/p5/httpDo","alias":"httpDo"},"httpGet()":{"relativeUrl":"/reference/p5/httpGet","alias":"httpGet"},"httpPost()":{"relativeUrl":"/reference/p5/httpPost","alias":"httpPost"},"hue()":{"relativeUrl":"/reference/p5/hue","alias":"hue"},"if":{"relativeUrl":"/reference/p5/if"},"image()":{"relativeUrl":"/reference/p5/image","alias":"image"},"imageLight()":{"relativeUrl":"/reference/p5/imageLight","alias":"imageLight"},"imageMode()":{"relativeUrl":"/reference/p5/imageMode","alias":"imageMode"},"input()":{"relativeUrl":"/reference/p5/input","alias":"input"},"int()":{"relativeUrl":"/reference/p5/int","alias":"int"},"isLooping()":{"relativeUrl":"/reference/p5/isLooping","alias":"isLooping"},"join()":{"relativeUrl":"/reference/p5/join","alias":"join"},"key":{"relativeUrl":"/reference/p5/key"},"keyCode":{"relativeUrl":"/reference/p5/keyCode"},"keyIsDown()":{"relativeUrl":"/reference/p5/keyIsDown","alias":"keyIsDown"},"keyIsPressed":{"relativeUrl":"/reference/p5/keyIsPressed"},"keyPressed()":{"relativeUrl":"/reference/p5/keyPressed","alias":"keyPressed"},"keyReleased()":{"relativeUrl":"/reference/p5/keyReleased","alias":"keyReleased"},"keyTyped()":{"relativeUrl":"/reference/p5/keyTyped","alias":"keyTyped"},"lerp()":{"relativeUrl":"/reference/p5/lerp","alias":"lerp"},"lerpColor()":{"relativeUrl":"/reference/p5/lerpColor","alias":"lerpColor"},"let":{"relativeUrl":"/reference/p5/let"},"lightFalloff()":{"relativeUrl":"/reference/p5/lightFalloff","alias":"lightFalloff"},"lightness()":{"relativeUrl":"/reference/p5/lightness","alias":"lightness"},"lights()":{"relativeUrl":"/reference/p5/lights","alias":"lights"},"line()":{"relativeUrl":"/reference/p5/line","alias":"line"},"linePerspective()":{"relativeUrl":"/reference/p5/linePerspective","alias":"linePerspective"},"loadBytes()":{"relativeUrl":"/reference/p5/loadBytes","alias":"loadBytes"},"loadFont()":{"relativeUrl":"/reference/p5/loadFont","alias":"loadFont"},"loadImage()":{"relativeUrl":"/reference/p5/loadImage","alias":"loadImage"},"loadJSON()":{"relativeUrl":"/reference/p5/loadJSON","alias":"loadJSON"},"loadModel()":{"relativeUrl":"/reference/p5/loadModel","alias":"loadModel"},"loadPixels()":{"relativeUrl":"/reference/p5/loadPixels","alias":"loadPixels"},"loadShader()":{"relativeUrl":"/reference/p5/loadShader","alias":"loadShader"},"loadSound()":{"relativeUrl":"/reference/p5/loadSound","alias":"loadSound"},"loadStrings()":{"relativeUrl":"/reference/p5/loadStrings","alias":"loadStrings"},"loadTable()":{"relativeUrl":"/reference/p5/loadTable","alias":"loadTable"},"loadXML()":{"relativeUrl":"/reference/p5/loadXML","alias":"loadXML"},"log()":{"relativeUrl":"/reference/p5/log","alias":"log"},"loop()":{"relativeUrl":"/reference/p5/loop","alias":"loop"},"mag()":{"relativeUrl":"/reference/p5/mag","alias":"mag"},"map()":{"relativeUrl":"/reference/p5/map","alias":"map"},"match()":{"relativeUrl":"/reference/p5/match","alias":"match"},"matchAll()":{"relativeUrl":"/reference/p5/matchAll","alias":"matchAll"},"max()":{"relativeUrl":"/reference/p5/max","alias":"max"},"metalness()":{"relativeUrl":"/reference/p5/metalness","alias":"metalness"},"midiToFreq()":{"relativeUrl":"/reference/p5/midiToFreq","alias":"midiToFreq"},"millis()":{"relativeUrl":"/reference/p5/millis","alias":"millis"},"min()":{"relativeUrl":"/reference/p5/min","alias":"min"},"minute()":{"relativeUrl":"/reference/p5/minute","alias":"minute"},"model()":{"relativeUrl":"/reference/p5/model","alias":"model"},"month()":{"relativeUrl":"/reference/p5/month","alias":"month"},"mouseButton":{"relativeUrl":"/reference/p5/mouseButton"},"mouseClicked()":{"relativeUrl":"/reference/p5/mouseClicked","alias":"mouseClicked"},"mouseDragged()":{"relativeUrl":"/reference/p5/mouseDragged","alias":"mouseDragged"},"mouseIsPressed":{"relativeUrl":"/reference/p5/mouseIsPressed"},"mouseMoved()":{"relativeUrl":"/reference/p5/mouseMoved","alias":"mouseMoved"},"mousePressed()":{"relativeUrl":"/reference/p5/mousePressed","alias":"mousePressed"},"mouseReleased()":{"relativeUrl":"/reference/p5/mouseReleased","alias":"mouseReleased"},"mouseWheel()":{"relativeUrl":"/reference/p5/mouseWheel","alias":"mouseWheel"},"mouseX":{"relativeUrl":"/reference/p5/mouseX"},"mouseY":{"relativeUrl":"/reference/p5/mouseY"},"movedX":{"relativeUrl":"/reference/p5/movedX"},"movedY":{"relativeUrl":"/reference/p5/movedY"},"nf()":{"relativeUrl":"/reference/p5/nf","alias":"nf"},"nfc()":{"relativeUrl":"/reference/p5/nfc","alias":"nfc"},"nfp()":{"relativeUrl":"/reference/p5/nfp","alias":"nfp"},"nfs()":{"relativeUrl":"/reference/p5/nfs","alias":"nfs"},"noCanvas()":{"relativeUrl":"/reference/p5/noCanvas","alias":"noCanvas"},"noCursor()":{"relativeUrl":"/reference/p5/noCursor","alias":"noCursor"},"noDebugMode()":{"relativeUrl":"/reference/p5/noDebugMode","alias":"noDebugMode"},"noErase()":{"relativeUrl":"/reference/p5/noErase","alias":"noErase"},"noFill()":{"relativeUrl":"/reference/p5/noFill","alias":"noFill"},"noLights()":{"relativeUrl":"/reference/p5/noLights","alias":"noLights"},"noLoop()":{"relativeUrl":"/reference/p5/noLoop","alias":"noLoop"},"noSmooth()":{"relativeUrl":"/reference/p5/noSmooth","alias":"noSmooth"},"noStroke()":{"relativeUrl":"/reference/p5/noStroke","alias":"noStroke"},"noTint()":{"relativeUrl":"/reference/p5/noTint","alias":"noTint"},"noise()":{"relativeUrl":"/reference/p5/noise","alias":"noise"},"noiseDetail()":{"relativeUrl":"/reference/p5/noiseDetail","alias":"noiseDetail"},"noiseSeed()":{"relativeUrl":"/reference/p5/noiseSeed","alias":"noiseSeed"},"norm()":{"relativeUrl":"/reference/p5/norm","alias":"norm"},"normal()":{"relativeUrl":"/reference/p5/normal","alias":"normal"},"normalMaterial()":{"relativeUrl":"/reference/p5/normalMaterial","alias":"normalMaterial"},"Number":{"relativeUrl":"/reference/p5/number"},"Object":{"relativeUrl":"/reference/p5/object"},"orbitControl()":{"relativeUrl":"/reference/p5/orbitControl","alias":"orbitControl"},"ortho()":{"relativeUrl":"/reference/p5/ortho","alias":"ortho"},"outputVolume()":{"relativeUrl":"/reference/p5/outputVolume","alias":"outputVolume"},"p5.Camera":{"relativeUrl":"/reference/p5/p5.Camera"},"p5.Color":{"relativeUrl":"/reference/p5/p5.Color"},"p5.Element":{"relativeUrl":"/reference/p5/p5.Element"},"p5.File":{"relativeUrl":"/reference/p5/p5.File"},"p5.Font":{"relativeUrl":"/reference/p5/p5.Font"},"p5.Framebuffer":{"relativeUrl":"/reference/p5/p5.Framebuffer"},"p5.Geometry":{"relativeUrl":"/reference/p5/p5.Geometry"},"p5.Graphics":{"relativeUrl":"/reference/p5/p5.Graphics"},"p5.Image":{"relativeUrl":"/reference/p5/p5.Image"},"p5.MediaElement":{"relativeUrl":"/reference/p5/p5.MediaElement"},"p5.NumberDict":{"relativeUrl":"/reference/p5/p5.NumberDict"},"p5.PrintWriter":{"relativeUrl":"/reference/p5/p5.PrintWriter"},"p5.Renderer":{"relativeUrl":"/reference/p5/p5.Renderer"},"p5.Shader":{"relativeUrl":"/reference/p5/p5.Shader"},"p5.StringDict":{"relativeUrl":"/reference/p5/p5.StringDict"},"p5.Table":{"relativeUrl":"/reference/p5/p5.Table"},"p5.TableRow":{"relativeUrl":"/reference/p5/p5.TableRow"},"p5.TypedDict":{"relativeUrl":"/reference/p5/p5.TypedDict"},"p5.Vector":{"relativeUrl":"/reference/p5/p5.Vector"},"p5.XML":{"relativeUrl":"/reference/p5/p5.XML"},"p5":{"relativeUrl":"/reference/p5/p5"},"pAccelerationX":{"relativeUrl":"/reference/p5/pAccelerationX"},"pAccelerationY":{"relativeUrl":"/reference/p5/pAccelerationY"},"pAccelerationZ":{"relativeUrl":"/reference/p5/pAccelerationZ"},"pRotationX":{"relativeUrl":"/reference/p5/pRotationX"},"pRotationY":{"relativeUrl":"/reference/p5/pRotationY"},"pRotationZ":{"relativeUrl":"/reference/p5/pRotationZ"},"panorama()":{"relativeUrl":"/reference/p5/panorama","alias":"panorama"},"perspective()":{"relativeUrl":"/reference/p5/perspective","alias":"perspective"},"pixelDensity()":{"relativeUrl":"/reference/p5/pixelDensity","alias":"pixelDensity"},"pixels":{"relativeUrl":"/reference/p5/pixels"},"plane()":{"relativeUrl":"/reference/p5/plane","alias":"plane"},"pmouseX":{"relativeUrl":"/reference/p5/pmouseX"},"pmouseY":{"relativeUrl":"/reference/p5/pmouseY"},"point()":{"relativeUrl":"/reference/p5/point","alias":"point"},"pointLight()":{"relativeUrl":"/reference/p5/pointLight","alias":"pointLight"},"pop()":{"relativeUrl":"/reference/p5/pop","alias":"pop"},"pow()":{"relativeUrl":"/reference/p5/pow","alias":"pow"},"preload()":{"relativeUrl":"/reference/p5/preload","alias":"preload"},"print()":{"relativeUrl":"/reference/p5/print","alias":"print"},"push()":{"relativeUrl":"/reference/p5/push","alias":"push"},"pwinMouseX":{"relativeUrl":"/reference/p5/pwinMouseX"},"pwinMouseY":{"relativeUrl":"/reference/p5/pwinMouseY"},"quad()":{"relativeUrl":"/reference/p5/quad","alias":"quad"},"quadraticVertex()":{"relativeUrl":"/reference/p5/quadraticVertex","alias":"quadraticVertex"},"radians()":{"relativeUrl":"/reference/p5/radians","alias":"radians"},"random()":{"relativeUrl":"/reference/p5/random","alias":"random"},"randomGaussian()":{"relativeUrl":"/reference/p5/randomGaussian","alias":"randomGaussian"},"randomSeed()":{"relativeUrl":"/reference/p5/randomSeed","alias":"randomSeed"},"rect()":{"relativeUrl":"/reference/p5/rect","alias":"rect"},"rectMode()":{"relativeUrl":"/reference/p5/rectMode","alias":"rectMode"},"red()":{"relativeUrl":"/reference/p5/red","alias":"red"},"redraw()":{"relativeUrl":"/reference/p5/redraw","alias":"redraw"},"remove()":{"relativeUrl":"/reference/p5/remove","alias":"remove"},"removeElements()":{"relativeUrl":"/reference/p5/removeElements","alias":"removeElements"},"removeItem()":{"relativeUrl":"/reference/p5/removeItem","alias":"removeItem"},"requestPointerLock()":{"relativeUrl":"/reference/p5/requestPointerLock","alias":"requestPointerLock"},"resetMatrix()":{"relativeUrl":"/reference/p5/resetMatrix","alias":"resetMatrix"},"resetShader()":{"relativeUrl":"/reference/p5/resetShader","alias":"resetShader"},"resizeCanvas()":{"relativeUrl":"/reference/p5/resizeCanvas","alias":"resizeCanvas"},"reverse()":{"relativeUrl":"/reference/p5/reverse","alias":"reverse"},"rotate()":{"relativeUrl":"/reference/p5/rotate","alias":"rotate"},"rotateX()":{"relativeUrl":"/reference/p5/rotateX","alias":"rotateX"},"rotateY()":{"relativeUrl":"/reference/p5/rotateY","alias":"rotateY"},"rotateZ()":{"relativeUrl":"/reference/p5/rotateZ","alias":"rotateZ"},"rotationX":{"relativeUrl":"/reference/p5/rotationX"},"rotationY":{"relativeUrl":"/reference/p5/rotationY"},"rotationZ":{"relativeUrl":"/reference/p5/rotationZ"},"round()":{"relativeUrl":"/reference/p5/round","alias":"round"},"sampleRate()":{"relativeUrl":"/reference/p5/sampleRate","alias":"sampleRate"},"saturation()":{"relativeUrl":"/reference/p5/saturation","alias":"saturation"},"save()":{"relativeUrl":"/reference/p5/save","alias":"save"},"saveCanvas()":{"relativeUrl":"/reference/p5/saveCanvas","alias":"saveCanvas"},"saveFrames()":{"relativeUrl":"/reference/p5/saveFrames","alias":"saveFrames"},"saveGif()":{"relativeUrl":"/reference/p5/saveGif","alias":"saveGif"},"saveJSON()":{"relativeUrl":"/reference/p5/saveJSON","alias":"saveJSON"},"saveSound()":{"relativeUrl":"/reference/p5/saveSound","alias":"saveSound"},"saveStrings()":{"relativeUrl":"/reference/p5/saveStrings","alias":"saveStrings"},"saveTable()":{"relativeUrl":"/reference/p5/saveTable","alias":"saveTable"},"scale()":{"relativeUrl":"/reference/p5/scale","alias":"scale"},"second()":{"relativeUrl":"/reference/p5/second","alias":"second"},"select()":{"relativeUrl":"/reference/p5/select","alias":"select"},"selectAll()":{"relativeUrl":"/reference/p5/selectAll","alias":"selectAll"},"set()":{"relativeUrl":"/reference/p5/set","alias":"set"},"setAttributes()":{"relativeUrl":"/reference/p5/setAttributes","alias":"setAttributes"},"setBPM()":{"relativeUrl":"/reference/p5/setBPM","alias":"setBPM"},"setCamera()":{"relativeUrl":"/reference/p5/setCamera","alias":"setCamera"},"setMoveThreshold()":{"relativeUrl":"/reference/p5/setMoveThreshold","alias":"setMoveThreshold"},"setShakeThreshold()":{"relativeUrl":"/reference/p5/setShakeThreshold","alias":"setShakeThreshold"},"setup()":{"relativeUrl":"/reference/p5/setup","alias":"setup"},"shader()":{"relativeUrl":"/reference/p5/shader","alias":"shader"},"shearX()":{"relativeUrl":"/reference/p5/shearX","alias":"shearX"},"shearY()":{"relativeUrl":"/reference/p5/shearY","alias":"shearY"},"shininess()":{"relativeUrl":"/reference/p5/shininess","alias":"shininess"},"shorten()":{"relativeUrl":"/reference/p5/shorten","alias":"shorten"},"shuffle()":{"relativeUrl":"/reference/p5/shuffle","alias":"shuffle"},"sin()":{"relativeUrl":"/reference/p5/sin","alias":"sin"},"smooth()":{"relativeUrl":"/reference/p5/smooth","alias":"smooth"},"sort()":{"relativeUrl":"/reference/p5/sort","alias":"sort"},"soundFormats()":{"relativeUrl":"/reference/p5/soundFormats","alias":"soundFormats"},"soundOut":{"relativeUrl":"/reference/p5/soundOut"},"specularColor()":{"relativeUrl":"/reference/p5/specularColor","alias":"specularColor"},"specularMaterial()":{"relativeUrl":"/reference/p5/specularMaterial","alias":"specularMaterial"},"sphere()":{"relativeUrl":"/reference/p5/sphere","alias":"sphere"},"splice()":{"relativeUrl":"/reference/p5/splice","alias":"splice"},"split()":{"relativeUrl":"/reference/p5/split","alias":"split"},"splitTokens()":{"relativeUrl":"/reference/p5/splitTokens","alias":"splitTokens"},"spotLight()":{"relativeUrl":"/reference/p5/spotLight","alias":"spotLight"},"sq()":{"relativeUrl":"/reference/p5/sq","alias":"sq"},"sqrt()":{"relativeUrl":"/reference/p5/sqrt","alias":"sqrt"},"square()":{"relativeUrl":"/reference/p5/square","alias":"square"},"storeItem()":{"relativeUrl":"/reference/p5/storeItem","alias":"storeItem"},"str()":{"relativeUrl":"/reference/p5/str","alias":"str"},"stroke()":{"relativeUrl":"/reference/p5/stroke","alias":"stroke"},"strokeCap()":{"relativeUrl":"/reference/p5/strokeCap","alias":"strokeCap"},"strokeJoin()":{"relativeUrl":"/reference/p5/strokeJoin","alias":"strokeJoin"},"strokeWeight()":{"relativeUrl":"/reference/p5/strokeWeight","alias":"strokeWeight"},"subset()":{"relativeUrl":"/reference/p5/subset","alias":"subset"},"tan()":{"relativeUrl":"/reference/p5/tan","alias":"tan"},"text()":{"relativeUrl":"/reference/p5/text","alias":"text"},"textAlign()":{"relativeUrl":"/reference/p5/textAlign","alias":"textAlign"},"textAscent()":{"relativeUrl":"/reference/p5/textAscent","alias":"textAscent"},"textDescent()":{"relativeUrl":"/reference/p5/textDescent","alias":"textDescent"},"textFont()":{"relativeUrl":"/reference/p5/textFont","alias":"textFont"},"textLeading()":{"relativeUrl":"/reference/p5/textLeading","alias":"textLeading"},"textOutput()":{"relativeUrl":"/reference/p5/textOutput","alias":"textOutput"},"textSize()":{"relativeUrl":"/reference/p5/textSize","alias":"textSize"},"textStyle()":{"relativeUrl":"/reference/p5/textStyle","alias":"textStyle"},"textWidth()":{"relativeUrl":"/reference/p5/textWidth","alias":"textWidth"},"textWrap()":{"relativeUrl":"/reference/p5/textWrap","alias":"textWrap"},"texture()":{"relativeUrl":"/reference/p5/texture","alias":"texture"},"textureMode()":{"relativeUrl":"/reference/p5/textureMode","alias":"textureMode"},"textureWrap()":{"relativeUrl":"/reference/p5/textureWrap","alias":"textureWrap"},"tint()":{"relativeUrl":"/reference/p5/tint","alias":"tint"},"torus()":{"relativeUrl":"/reference/p5/torus","alias":"torus"},"touchEnded()":{"relativeUrl":"/reference/p5/touchEnded","alias":"touchEnded"},"touchMoved()":{"relativeUrl":"/reference/p5/touchMoved","alias":"touchMoved"},"touchStarted()":{"relativeUrl":"/reference/p5/touchStarted","alias":"touchStarted"},"touches":{"relativeUrl":"/reference/p5/touches"},"translate()":{"relativeUrl":"/reference/p5/translate","alias":"translate"},"triangle()":{"relativeUrl":"/reference/p5/triangle","alias":"triangle"},"trim()":{"relativeUrl":"/reference/p5/trim","alias":"trim"},"turnAxis":{"relativeUrl":"/reference/p5/turnAxis"},"unchar()":{"relativeUrl":"/reference/p5/unchar","alias":"unchar"},"unhex()":{"relativeUrl":"/reference/p5/unhex","alias":"unhex"},"updatePixels()":{"relativeUrl":"/reference/p5/updatePixels","alias":"updatePixels"},"userStartAudio()":{"relativeUrl":"/reference/p5/userStartAudio","alias":"userStartAudio"},"vertex()":{"relativeUrl":"/reference/p5/vertex","alias":"vertex"},"webglVersion":{"relativeUrl":"/reference/p5/webglVersion"},"while":{"relativeUrl":"/reference/p5/while"},"width":{"relativeUrl":"/reference/p5/width"},"winMouseX":{"relativeUrl":"/reference/p5/winMouseX"},"winMouseY":{"relativeUrl":"/reference/p5/winMouseY"},"windowHeight":{"relativeUrl":"/reference/p5/windowHeight"},"windowResized()":{"relativeUrl":"/reference/p5/windowResized","alias":"windowResized"},"windowWidth":{"relativeUrl":"/reference/p5/windowWidth"},"year()":{"relativeUrl":"/reference/p5/year","alias":"year"},"p5.Amplitude.getLevel()":{"relativeUrl":"/reference/p5.Amplitude/getLevel","alias":"getLevel"},"p5.Amplitude.setInput()":{"relativeUrl":"/reference/p5.Amplitude/setInput","alias":"setInput"},"p5.Amplitude.smooth()":{"relativeUrl":"/reference/p5.Amplitude/smooth","alias":"smooth"},"p5.Amplitude.toggleNormalize()":{"relativeUrl":"/reference/p5.Amplitude/toggleNormalize","alias":"toggleNormalize"},"p5.AudioIn.amp()":{"relativeUrl":"/reference/p5.AudioIn/amp","alias":"amp"},"p5.AudioIn.amplitude":{"relativeUrl":"/reference/p5.AudioIn/amplitude","alias":"amplitude"},"p5.AudioIn.connect()":{"relativeUrl":"/reference/p5.AudioIn/connect","alias":"connect"},"p5.AudioIn.disconnect()":{"relativeUrl":"/reference/p5.AudioIn/disconnect","alias":"disconnect"},"p5.AudioIn.enabled":{"relativeUrl":"/reference/p5.AudioIn/enabled","alias":"enabled"},"p5.AudioIn.getLevel()":{"relativeUrl":"/reference/p5.AudioIn/getLevel","alias":"getLevel"},"p5.AudioIn.getSources()":{"relativeUrl":"/reference/p5.AudioIn/getSources","alias":"getSources"},"p5.AudioIn.setSource()":{"relativeUrl":"/reference/p5.AudioIn/setSource","alias":"setSource"},"p5.AudioIn.start()":{"relativeUrl":"/reference/p5.AudioIn/start","alias":"start"},"p5.AudioIn.stop()":{"relativeUrl":"/reference/p5.AudioIn/stop","alias":"stop"},"p5.AudioVoice.connect()":{"relativeUrl":"/reference/p5.AudioVoice/connect","alias":"connect"},"p5.AudioVoice.disconnect()":{"relativeUrl":"/reference/p5.AudioVoice/disconnect","alias":"disconnect"},"p5.Camera.camera()":{"relativeUrl":"/reference/p5.Camera/camera","alias":"camera"},"p5.Camera.centerX":{"relativeUrl":"/reference/p5.Camera/centerX","alias":"centerX"},"p5.Camera.centerY":{"relativeUrl":"/reference/p5.Camera/centerY","alias":"centerY"},"p5.Camera.centerZ":{"relativeUrl":"/reference/p5.Camera/centerZ","alias":"centerZ"},"p5.Camera.eyeX":{"relativeUrl":"/reference/p5.Camera/eyeX","alias":"eyeX"},"p5.Camera.eyeY":{"relativeUrl":"/reference/p5.Camera/eyeY","alias":"eyeY"},"p5.Camera.eyeZ":{"relativeUrl":"/reference/p5.Camera/eyeZ","alias":"eyeZ"},"p5.Camera.frustum()":{"relativeUrl":"/reference/p5.Camera/frustum","alias":"frustum"},"p5.Camera.lookAt()":{"relativeUrl":"/reference/p5.Camera/lookAt","alias":"lookAt"},"p5.Camera.move()":{"relativeUrl":"/reference/p5.Camera/move","alias":"move"},"p5.Camera.ortho()":{"relativeUrl":"/reference/p5.Camera/ortho","alias":"ortho"},"p5.Camera.pan()":{"relativeUrl":"/reference/p5.Camera/pan","alias":"pan"},"p5.Camera.perspective()":{"relativeUrl":"/reference/p5.Camera/perspective","alias":"perspective"},"p5.Camera.roll()":{"relativeUrl":"/reference/p5.Camera/roll","alias":"roll"},"p5.Camera.set()":{"relativeUrl":"/reference/p5.Camera/set","alias":"set"},"p5.Camera.setPosition()":{"relativeUrl":"/reference/p5.Camera/setPosition","alias":"setPosition"},"p5.Camera.slerp()":{"relativeUrl":"/reference/p5.Camera/slerp","alias":"slerp"},"p5.Camera.tilt()":{"relativeUrl":"/reference/p5.Camera/tilt","alias":"tilt"},"p5.Camera.upX":{"relativeUrl":"/reference/p5.Camera/upX","alias":"upX"},"p5.Camera.upY":{"relativeUrl":"/reference/p5.Camera/upY","alias":"upY"},"p5.Camera.upZ":{"relativeUrl":"/reference/p5.Camera/upZ","alias":"upZ"},"p5.Color.setAlpha()":{"relativeUrl":"/reference/p5.Color/setAlpha","alias":"setAlpha"},"p5.Color.setBlue()":{"relativeUrl":"/reference/p5.Color/setBlue","alias":"setBlue"},"p5.Color.setGreen()":{"relativeUrl":"/reference/p5.Color/setGreen","alias":"setGreen"},"p5.Color.setRed()":{"relativeUrl":"/reference/p5.Color/setRed","alias":"setRed"},"p5.Color.toString()":{"relativeUrl":"/reference/p5.Color/toString","alias":"toString"},"p5.Compressor.attack()":{"relativeUrl":"/reference/p5.Compressor/attack","alias":"attack"},"p5.Compressor.compressor":{"relativeUrl":"/reference/p5.Compressor/compressor","alias":"compressor"},"p5.Compressor.knee()":{"relativeUrl":"/reference/p5.Compressor/knee","alias":"knee"},"p5.Compressor.process()":{"relativeUrl":"/reference/p5.Compressor/process","alias":"process"},"p5.Compressor.ratio()":{"relativeUrl":"/reference/p5.Compressor/ratio","alias":"ratio"},"p5.Compressor.reduction()":{"relativeUrl":"/reference/p5.Compressor/reduction","alias":"reduction"},"p5.Compressor.release()":{"relativeUrl":"/reference/p5.Compressor/release","alias":"release"},"p5.Compressor.set()":{"relativeUrl":"/reference/p5.Compressor/set","alias":"set"},"p5.Compressor.threshold()":{"relativeUrl":"/reference/p5.Compressor/threshold","alias":"threshold"},"p5.Convolver.addImpulse()":{"relativeUrl":"/reference/p5.Convolver/addImpulse","alias":"addImpulse"},"p5.Convolver.convolverNode":{"relativeUrl":"/reference/p5.Convolver/convolverNode","alias":"convolverNode"},"p5.Convolver.impulses":{"relativeUrl":"/reference/p5.Convolver/impulses","alias":"impulses"},"p5.Convolver.process()":{"relativeUrl":"/reference/p5.Convolver/process","alias":"process"},"p5.Convolver.resetImpulse()":{"relativeUrl":"/reference/p5.Convolver/resetImpulse","alias":"resetImpulse"},"p5.Convolver.toggleImpulse()":{"relativeUrl":"/reference/p5.Convolver/toggleImpulse","alias":"toggleImpulse"},"p5.Delay.amp()":{"relativeUrl":"/reference/p5.Delay/amp","alias":"amp"},"p5.Delay.connect()":{"relativeUrl":"/reference/p5.Delay/connect","alias":"connect"},"p5.Delay.delayTime()":{"relativeUrl":"/reference/p5.Delay/delayTime","alias":"delayTime"},"p5.Delay.disconnect()":{"relativeUrl":"/reference/p5.Delay/disconnect","alias":"disconnect"},"p5.Delay.feedback()":{"relativeUrl":"/reference/p5.Delay/feedback","alias":"feedback"},"p5.Delay.filter()":{"relativeUrl":"/reference/p5.Delay/filter","alias":"filter"},"p5.Delay.leftDelay":{"relativeUrl":"/reference/p5.Delay/leftDelay","alias":"leftDelay"},"p5.Delay.process()":{"relativeUrl":"/reference/p5.Delay/process","alias":"process"},"p5.Delay.rightDelay":{"relativeUrl":"/reference/p5.Delay/rightDelay","alias":"rightDelay"},"p5.Delay.setType()":{"relativeUrl":"/reference/p5.Delay/setType","alias":"setType"},"p5.Distortion.WaveShaperNode":{"relativeUrl":"/reference/p5.Distortion/WaveShaperNode","alias":"WaveShaperNode"},"p5.Distortion.getAmount()":{"relativeUrl":"/reference/p5.Distortion/getAmount","alias":"getAmount"},"p5.Distortion.getOversample()":{"relativeUrl":"/reference/p5.Distortion/getOversample","alias":"getOversample"},"p5.Distortion.process()":{"relativeUrl":"/reference/p5.Distortion/process","alias":"process"},"p5.Distortion.set()":{"relativeUrl":"/reference/p5.Distortion/set","alias":"set"},"p5.EQ.bands":{"relativeUrl":"/reference/p5.EQ/bands","alias":"bands"},"p5.EQ.process()":{"relativeUrl":"/reference/p5.EQ/process","alias":"process"},"p5.Effect.amp()":{"relativeUrl":"/reference/p5.Effect/amp","alias":"amp"},"p5.Effect.chain()":{"relativeUrl":"/reference/p5.Effect/chain","alias":"chain"},"p5.Effect.connect()":{"relativeUrl":"/reference/p5.Effect/connect","alias":"connect"},"p5.Effect.disconnect()":{"relativeUrl":"/reference/p5.Effect/disconnect","alias":"disconnect"},"p5.Effect.drywet()":{"relativeUrl":"/reference/p5.Effect/drywet","alias":"drywet"},"p5.Element.addClass()":{"relativeUrl":"/reference/p5.Element/addClass","alias":"addClass"},"p5.Element.attribute()":{"relativeUrl":"/reference/p5.Element/attribute","alias":"attribute"},"p5.Element.center()":{"relativeUrl":"/reference/p5.Element/center","alias":"center"},"p5.Element.child()":{"relativeUrl":"/reference/p5.Element/child","alias":"child"},"p5.Element.class()":{"relativeUrl":"/reference/p5.Element/class","alias":"class"},"p5.Element.doubleClicked()":{"relativeUrl":"/reference/p5.Element/doubleClicked","alias":"doubleClicked"},"p5.Element.dragLeave()":{"relativeUrl":"/reference/p5.Element/dragLeave","alias":"dragLeave"},"p5.Element.dragOver()":{"relativeUrl":"/reference/p5.Element/dragOver","alias":"dragOver"},"p5.Element.draggable()":{"relativeUrl":"/reference/p5.Element/draggable","alias":"draggable"},"p5.Element.drop()":{"relativeUrl":"/reference/p5.Element/drop","alias":"drop"},"p5.Element.elt":{"relativeUrl":"/reference/p5.Element/elt","alias":"elt"},"p5.Element.hasClass()":{"relativeUrl":"/reference/p5.Element/hasClass","alias":"hasClass"},"p5.Element.height":{"relativeUrl":"/reference/p5.Element/height","alias":"height"},"p5.Element.hide()":{"relativeUrl":"/reference/p5.Element/hide","alias":"hide"},"p5.Element.html()":{"relativeUrl":"/reference/p5.Element/html","alias":"html"},"p5.Element.id()":{"relativeUrl":"/reference/p5.Element/id","alias":"id"},"p5.Element.mouseClicked()":{"relativeUrl":"/reference/p5.Element/mouseClicked","alias":"mouseClicked"},"p5.Element.mouseMoved()":{"relativeUrl":"/reference/p5.Element/mouseMoved","alias":"mouseMoved"},"p5.Element.mouseOut()":{"relativeUrl":"/reference/p5.Element/mouseOut","alias":"mouseOut"},"p5.Element.mouseOver()":{"relativeUrl":"/reference/p5.Element/mouseOver","alias":"mouseOver"},"p5.Element.mousePressed()":{"relativeUrl":"/reference/p5.Element/mousePressed","alias":"mousePressed"},"p5.Element.mouseReleased()":{"relativeUrl":"/reference/p5.Element/mouseReleased","alias":"mouseReleased"},"p5.Element.mouseWheel()":{"relativeUrl":"/reference/p5.Element/mouseWheel","alias":"mouseWheel"},"p5.Element.parent()":{"relativeUrl":"/reference/p5.Element/parent","alias":"parent"},"p5.Element.position()":{"relativeUrl":"/reference/p5.Element/position","alias":"position"},"p5.Element.remove()":{"relativeUrl":"/reference/p5.Element/remove","alias":"remove"},"p5.Element.removeAttribute()":{"relativeUrl":"/reference/p5.Element/removeAttribute","alias":"removeAttribute"},"p5.Element.removeClass()":{"relativeUrl":"/reference/p5.Element/removeClass","alias":"removeClass"},"p5.Element.show()":{"relativeUrl":"/reference/p5.Element/show","alias":"show"},"p5.Element.size()":{"relativeUrl":"/reference/p5.Element/size","alias":"size"},"p5.Element.style()":{"relativeUrl":"/reference/p5.Element/style","alias":"style"},"p5.Element.toggleClass()":{"relativeUrl":"/reference/p5.Element/toggleClass","alias":"toggleClass"},"p5.Element.touchEnded()":{"relativeUrl":"/reference/p5.Element/touchEnded","alias":"touchEnded"},"p5.Element.touchMoved()":{"relativeUrl":"/reference/p5.Element/touchMoved","alias":"touchMoved"},"p5.Element.touchStarted()":{"relativeUrl":"/reference/p5.Element/touchStarted","alias":"touchStarted"},"p5.Element.value()":{"relativeUrl":"/reference/p5.Element/value","alias":"value"},"p5.Element.width":{"relativeUrl":"/reference/p5.Element/width","alias":"width"},"p5.Envelope.add()":{"relativeUrl":"/reference/p5.Envelope/add","alias":"add"},"p5.Envelope.attackLevel":{"relativeUrl":"/reference/p5.Envelope/attackLevel","alias":"attackLevel"},"p5.Envelope.attackTime":{"relativeUrl":"/reference/p5.Envelope/attackTime","alias":"attackTime"},"p5.Envelope.decayLevel":{"relativeUrl":"/reference/p5.Envelope/decayLevel","alias":"decayLevel"},"p5.Envelope.decayTime":{"relativeUrl":"/reference/p5.Envelope/decayTime","alias":"decayTime"},"p5.Envelope.mult()":{"relativeUrl":"/reference/p5.Envelope/mult","alias":"mult"},"p5.Envelope.play()":{"relativeUrl":"/reference/p5.Envelope/play","alias":"play"},"p5.Envelope.ramp()":{"relativeUrl":"/reference/p5.Envelope/ramp","alias":"ramp"},"p5.Envelope.releaseLevel":{"relativeUrl":"/reference/p5.Envelope/releaseLevel","alias":"releaseLevel"},"p5.Envelope.releaseTime":{"relativeUrl":"/reference/p5.Envelope/releaseTime","alias":"releaseTime"},"p5.Envelope.scale()":{"relativeUrl":"/reference/p5.Envelope/scale","alias":"scale"},"p5.Envelope.set()":{"relativeUrl":"/reference/p5.Envelope/set","alias":"set"},"p5.Envelope.setADSR()":{"relativeUrl":"/reference/p5.Envelope/setADSR","alias":"setADSR"},"p5.Envelope.setExp()":{"relativeUrl":"/reference/p5.Envelope/setExp","alias":"setExp"},"p5.Envelope.setInput()":{"relativeUrl":"/reference/p5.Envelope/setInput","alias":"setInput"},"p5.Envelope.setRange()":{"relativeUrl":"/reference/p5.Envelope/setRange","alias":"setRange"},"p5.Envelope.triggerAttack()":{"relativeUrl":"/reference/p5.Envelope/triggerAttack","alias":"triggerAttack"},"p5.Envelope.triggerRelease()":{"relativeUrl":"/reference/p5.Envelope/triggerRelease","alias":"triggerRelease"},"p5.FFT.analyze()":{"relativeUrl":"/reference/p5.FFT/analyze","alias":"analyze"},"p5.FFT.getCentroid()":{"relativeUrl":"/reference/p5.FFT/getCentroid","alias":"getCentroid"},"p5.FFT.getEnergy()":{"relativeUrl":"/reference/p5.FFT/getEnergy","alias":"getEnergy"},"p5.FFT.getOctaveBands()":{"relativeUrl":"/reference/p5.FFT/getOctaveBands","alias":"getOctaveBands"},"p5.FFT.linAverages()":{"relativeUrl":"/reference/p5.FFT/linAverages","alias":"linAverages"},"p5.FFT.logAverages()":{"relativeUrl":"/reference/p5.FFT/logAverages","alias":"logAverages"},"p5.FFT.setInput()":{"relativeUrl":"/reference/p5.FFT/setInput","alias":"setInput"},"p5.FFT.smooth()":{"relativeUrl":"/reference/p5.FFT/smooth","alias":"smooth"},"p5.FFT.waveform()":{"relativeUrl":"/reference/p5.FFT/waveform","alias":"waveform"},"p5.File.data":{"relativeUrl":"/reference/p5.File/data","alias":"data"},"p5.File.file":{"relativeUrl":"/reference/p5.File/file","alias":"file"},"p5.File.name":{"relativeUrl":"/reference/p5.File/name","alias":"name"},"p5.File.size":{"relativeUrl":"/reference/p5.File/size","alias":"size"},"p5.File.subtype":{"relativeUrl":"/reference/p5.File/subtype","alias":"subtype"},"p5.File.type":{"relativeUrl":"/reference/p5.File/type","alias":"type"},"p5.Filter.biquadFilter":{"relativeUrl":"/reference/p5.Filter/biquadFilter","alias":"biquadFilter"},"p5.Filter.freq()":{"relativeUrl":"/reference/p5.Filter/freq","alias":"freq"},"p5.Filter.gain()":{"relativeUrl":"/reference/p5.Filter/gain","alias":"gain"},"p5.Filter.process()":{"relativeUrl":"/reference/p5.Filter/process","alias":"process"},"p5.Filter.res()":{"relativeUrl":"/reference/p5.Filter/res","alias":"res"},"p5.Filter.set()":{"relativeUrl":"/reference/p5.Filter/set","alias":"set"},"p5.Filter.setType()":{"relativeUrl":"/reference/p5.Filter/setType","alias":"setType"},"p5.Filter.toggle()":{"relativeUrl":"/reference/p5.Filter/toggle","alias":"toggle"},"p5.Font.font":{"relativeUrl":"/reference/p5.Font/font","alias":"font"},"p5.Font.textBounds()":{"relativeUrl":"/reference/p5.Font/textBounds","alias":"textBounds"},"p5.Font.textToPoints()":{"relativeUrl":"/reference/p5.Font/textToPoints","alias":"textToPoints"},"p5.Framebuffer.autoSized()":{"relativeUrl":"/reference/p5.Framebuffer/autoSized","alias":"autoSized"},"p5.Framebuffer.begin()":{"relativeUrl":"/reference/p5.Framebuffer/begin","alias":"begin"},"p5.Framebuffer.color":{"relativeUrl":"/reference/p5.Framebuffer/color","alias":"color"},"p5.Framebuffer.createCamera()":{"relativeUrl":"/reference/p5.Framebuffer/createCamera","alias":"createCamera"},"p5.Framebuffer.depth":{"relativeUrl":"/reference/p5.Framebuffer/depth","alias":"depth"},"p5.Framebuffer.draw()":{"relativeUrl":"/reference/p5.Framebuffer/draw","alias":"draw"},"p5.Framebuffer.end()":{"relativeUrl":"/reference/p5.Framebuffer/end","alias":"end"},"p5.Framebuffer.get()":{"relativeUrl":"/reference/p5.Framebuffer/get","alias":"get"},"p5.Framebuffer.loadPixels()":{"relativeUrl":"/reference/p5.Framebuffer/loadPixels","alias":"loadPixels"},"p5.Framebuffer.pixelDensity()":{"relativeUrl":"/reference/p5.Framebuffer/pixelDensity","alias":"pixelDensity"},"p5.Framebuffer.pixels":{"relativeUrl":"/reference/p5.Framebuffer/pixels","alias":"pixels"},"p5.Framebuffer.remove()":{"relativeUrl":"/reference/p5.Framebuffer/remove","alias":"remove"},"p5.Framebuffer.resize()":{"relativeUrl":"/reference/p5.Framebuffer/resize","alias":"resize"},"p5.Framebuffer.updatePixels()":{"relativeUrl":"/reference/p5.Framebuffer/updatePixels","alias":"updatePixels"},"p5.Gain.amp()":{"relativeUrl":"/reference/p5.Gain/amp","alias":"amp"},"p5.Gain.connect()":{"relativeUrl":"/reference/p5.Gain/connect","alias":"connect"},"p5.Gain.disconnect()":{"relativeUrl":"/reference/p5.Gain/disconnect","alias":"disconnect"},"p5.Gain.setInput()":{"relativeUrl":"/reference/p5.Gain/setInput","alias":"setInput"},"p5.Geometry.calculateBoundingBox()":{"relativeUrl":"/reference/p5.Geometry/calculateBoundingBox","alias":"calculateBoundingBox"},"p5.Geometry.clearColors()":{"relativeUrl":"/reference/p5.Geometry/clearColors","alias":"clearColors"},"computeFaces()":{"relativeUrl":"/reference/p5.Geometry/computeFaces","alias":"computeFaces"},"p5.Geometry.computeNormals()":{"relativeUrl":"/reference/p5.Geometry/computeNormals","alias":"computeNormals"},"p5.Geometry.faces":{"relativeUrl":"/reference/p5.Geometry/faces","alias":"faces"},"p5.Geometry.flipU()":{"relativeUrl":"/reference/p5.Geometry/flipU","alias":"flipU"},"p5.Geometry.flipV()":{"relativeUrl":"/reference/p5.Geometry/flipV","alias":"flipV"},"p5.Geometry.normalize()":{"relativeUrl":"/reference/p5.Geometry/normalize","alias":"normalize"},"p5.Geometry.saveObj()":{"relativeUrl":"/reference/p5.Geometry/saveObj","alias":"saveObj"},"p5.Geometry.saveStl()":{"relativeUrl":"/reference/p5.Geometry/saveStl","alias":"saveStl"},"p5.Geometry.uvs":{"relativeUrl":"/reference/p5.Geometry/uvs","alias":"uvs"},"p5.Geometry.vertexNormals":{"relativeUrl":"/reference/p5.Geometry/vertexNormals","alias":"vertexNormals"},"p5.Geometry.vertices":{"relativeUrl":"/reference/p5.Geometry/vertices","alias":"vertices"},"p5.Graphics.createFramebuffer()":{"relativeUrl":"/reference/p5.Graphics/createFramebuffer","alias":"createFramebuffer"},"p5.Graphics.remove()":{"relativeUrl":"/reference/p5.Graphics/remove","alias":"remove"},"p5.Graphics.reset()":{"relativeUrl":"/reference/p5.Graphics/reset","alias":"reset"},"p5.Image.blend()":{"relativeUrl":"/reference/p5.Image/blend","alias":"blend"},"p5.Image.copy()":{"relativeUrl":"/reference/p5.Image/copy","alias":"copy"},"p5.Image.delay()":{"relativeUrl":"/reference/p5.Image/delay","alias":"delay"},"p5.Image.filter()":{"relativeUrl":"/reference/p5.Image/filter","alias":"filter"},"p5.Image.get()":{"relativeUrl":"/reference/p5.Image/get","alias":"get"},"p5.Image.getCurrentFrame()":{"relativeUrl":"/reference/p5.Image/getCurrentFrame","alias":"getCurrentFrame"},"p5.Image.height":{"relativeUrl":"/reference/p5.Image/height","alias":"height"},"p5.Image.loadPixels()":{"relativeUrl":"/reference/p5.Image/loadPixels","alias":"loadPixels"},"p5.Image.mask()":{"relativeUrl":"/reference/p5.Image/mask","alias":"mask"},"p5.Image.numFrames":{"relativeUrl":"/reference/p5.Image/numFrames","alias":"numFrames"},"p5.Image.pause()":{"relativeUrl":"/reference/p5.Image/pause","alias":"pause"},"p5.Image.pixelDensity()":{"relativeUrl":"/reference/p5.Image/pixelDensity","alias":"pixelDensity"},"p5.Image.pixels":{"relativeUrl":"/reference/p5.Image/pixels","alias":"pixels"},"p5.Image.play()":{"relativeUrl":"/reference/p5.Image/play","alias":"play"},"p5.Image.reset()":{"relativeUrl":"/reference/p5.Image/reset","alias":"reset"},"p5.Image.resize()":{"relativeUrl":"/reference/p5.Image/resize","alias":"resize"},"p5.Image.save()":{"relativeUrl":"/reference/p5.Image/save","alias":"save"},"p5.Image.set()":{"relativeUrl":"/reference/p5.Image/set","alias":"set"},"p5.Image.setFrame()":{"relativeUrl":"/reference/p5.Image/setFrame","alias":"setFrame"},"p5.Image.updatePixels()":{"relativeUrl":"/reference/p5.Image/updatePixels","alias":"updatePixels"},"p5.Image.width":{"relativeUrl":"/reference/p5.Image/width","alias":"width"},"p5.MediaElement.addCue()":{"relativeUrl":"/reference/p5.MediaElement/addCue","alias":"addCue"},"p5.MediaElement.autoplay()":{"relativeUrl":"/reference/p5.MediaElement/autoplay","alias":"autoplay"},"p5.MediaElement.clearCues()":{"relativeUrl":"/reference/p5.MediaElement/clearCues","alias":"clearCues"},"p5.MediaElement.connect()":{"relativeUrl":"/reference/p5.MediaElement/connect","alias":"connect"},"p5.MediaElement.disconnect()":{"relativeUrl":"/reference/p5.MediaElement/disconnect","alias":"disconnect"},"p5.MediaElement.duration()":{"relativeUrl":"/reference/p5.MediaElement/duration","alias":"duration"},"p5.MediaElement.hideControls()":{"relativeUrl":"/reference/p5.MediaElement/hideControls","alias":"hideControls"},"p5.MediaElement.loop()":{"relativeUrl":"/reference/p5.MediaElement/loop","alias":"loop"},"p5.MediaElement.noLoop()":{"relativeUrl":"/reference/p5.MediaElement/noLoop","alias":"noLoop"},"p5.MediaElement.onended()":{"relativeUrl":"/reference/p5.MediaElement/onended","alias":"onended"},"p5.MediaElement.pause()":{"relativeUrl":"/reference/p5.MediaElement/pause","alias":"pause"},"p5.MediaElement.play()":{"relativeUrl":"/reference/p5.MediaElement/play","alias":"play"},"p5.MediaElement.removeCue()":{"relativeUrl":"/reference/p5.MediaElement/removeCue","alias":"removeCue"},"p5.MediaElement.showControls()":{"relativeUrl":"/reference/p5.MediaElement/showControls","alias":"showControls"},"p5.MediaElement.speed()":{"relativeUrl":"/reference/p5.MediaElement/speed","alias":"speed"},"p5.MediaElement.src":{"relativeUrl":"/reference/p5.MediaElement/src","alias":"src"},"p5.MediaElement.stop()":{"relativeUrl":"/reference/p5.MediaElement/stop","alias":"stop"},"p5.MediaElement.time()":{"relativeUrl":"/reference/p5.MediaElement/time","alias":"time"},"p5.MediaElement.volume()":{"relativeUrl":"/reference/p5.MediaElement/volume","alias":"volume"},"p5.MonoSynth.amp()":{"relativeUrl":"/reference/p5.MonoSynth/amp","alias":"amp"},"p5.MonoSynth.attack":{"relativeUrl":"/reference/p5.MonoSynth/attack","alias":"attack"},"p5.MonoSynth.connect()":{"relativeUrl":"/reference/p5.MonoSynth/connect","alias":"connect"},"p5.MonoSynth.disconnect()":{"relativeUrl":"/reference/p5.MonoSynth/disconnect","alias":"disconnect"},"p5.MonoSynth.dispose()":{"relativeUrl":"/reference/p5.MonoSynth/dispose","alias":"dispose"},"p5.MonoSynth.play()":{"relativeUrl":"/reference/p5.MonoSynth/play","alias":"play"},"p5.MonoSynth.setADSR()":{"relativeUrl":"/reference/p5.MonoSynth/setADSR","alias":"setADSR"},"p5.MonoSynth.triggerAttack()":{"relativeUrl":"/reference/p5.MonoSynth/triggerAttack","alias":"triggerAttack"},"p5.MonoSynth.triggerRelease()":{"relativeUrl":"/reference/p5.MonoSynth/triggerRelease","alias":"triggerRelease"},"p5.Noise.setType()":{"relativeUrl":"/reference/p5.Noise/setType","alias":"setType"},"p5.NumberDict.add()":{"relativeUrl":"/reference/p5.NumberDict/add","alias":"add"},"p5.NumberDict.div()":{"relativeUrl":"/reference/p5.NumberDict/div","alias":"div"},"p5.NumberDict.maxKey()":{"relativeUrl":"/reference/p5.NumberDict/maxKey","alias":"maxKey"},"p5.NumberDict.maxValue()":{"relativeUrl":"/reference/p5.NumberDict/maxValue","alias":"maxValue"},"p5.NumberDict.minKey()":{"relativeUrl":"/reference/p5.NumberDict/minKey","alias":"minKey"},"p5.NumberDict.minValue()":{"relativeUrl":"/reference/p5.NumberDict/minValue","alias":"minValue"},"p5.NumberDict.mult()":{"relativeUrl":"/reference/p5.NumberDict/mult","alias":"mult"},"p5.NumberDict.sub()":{"relativeUrl":"/reference/p5.NumberDict/sub","alias":"sub"},"p5.Oscillator.add()":{"relativeUrl":"/reference/p5.Oscillator/add","alias":"add"},"p5.Oscillator.amp()":{"relativeUrl":"/reference/p5.Oscillator/amp","alias":"amp"},"p5.Oscillator.connect()":{"relativeUrl":"/reference/p5.Oscillator/connect","alias":"connect"},"p5.Oscillator.disconnect()":{"relativeUrl":"/reference/p5.Oscillator/disconnect","alias":"disconnect"},"p5.Oscillator.freq()":{"relativeUrl":"/reference/p5.Oscillator/freq","alias":"freq"},"p5.Oscillator.getAmp()":{"relativeUrl":"/reference/p5.Oscillator/getAmp","alias":"getAmp"},"p5.Oscillator.getFreq()":{"relativeUrl":"/reference/p5.Oscillator/getFreq","alias":"getFreq"},"p5.Oscillator.getPan()":{"relativeUrl":"/reference/p5.Oscillator/getPan","alias":"getPan"},"p5.Oscillator.getType()":{"relativeUrl":"/reference/p5.Oscillator/getType","alias":"getType"},"p5.Oscillator.mult()":{"relativeUrl":"/reference/p5.Oscillator/mult","alias":"mult"},"p5.Oscillator.pan()":{"relativeUrl":"/reference/p5.Oscillator/pan","alias":"pan"},"p5.Oscillator.phase()":{"relativeUrl":"/reference/p5.Oscillator/phase","alias":"phase"},"p5.Oscillator.scale()":{"relativeUrl":"/reference/p5.Oscillator/scale","alias":"scale"},"p5.Oscillator.setType()":{"relativeUrl":"/reference/p5.Oscillator/setType","alias":"setType"},"p5.Oscillator.start()":{"relativeUrl":"/reference/p5.Oscillator/start","alias":"start"},"p5.Oscillator.stop()":{"relativeUrl":"/reference/p5.Oscillator/stop","alias":"stop"},"p5.Panner3D.maxDist()":{"relativeUrl":"/reference/p5.Panner3D/maxDist","alias":"maxDist"},"p5.Panner3D.orient()":{"relativeUrl":"/reference/p5.Panner3D/orient","alias":"orient"},"p5.Panner3D.orientX()":{"relativeUrl":"/reference/p5.Panner3D/orientX","alias":"orientX"},"p5.Panner3D.orientY()":{"relativeUrl":"/reference/p5.Panner3D/orientY","alias":"orientY"},"p5.Panner3D.orientZ()":{"relativeUrl":"/reference/p5.Panner3D/orientZ","alias":"orientZ"},"p5.Panner3D.panner":{"relativeUrl":"/reference/p5.Panner3D/panner","alias":"panner"},"p5.Panner3D.positionX()":{"relativeUrl":"/reference/p5.Panner3D/positionX","alias":"positionX"},"p5.Panner3D.positionY()":{"relativeUrl":"/reference/p5.Panner3D/positionY","alias":"positionY"},"p5.Panner3D.positionZ()":{"relativeUrl":"/reference/p5.Panner3D/positionZ","alias":"positionZ"},"p5.Panner3D.process()":{"relativeUrl":"/reference/p5.Panner3D/process","alias":"process"},"p5.Panner3D.rollof()":{"relativeUrl":"/reference/p5.Panner3D/rollof","alias":"rollof"},"p5.Panner3D.set()":{"relativeUrl":"/reference/p5.Panner3D/set","alias":"set"},"p5.Panner3D.setFalloff()":{"relativeUrl":"/reference/p5.Panner3D/setFalloff","alias":"setFalloff"},"p5.Part.addPhrase()":{"relativeUrl":"/reference/p5.Part/addPhrase","alias":"addPhrase"},"p5.Part.getBPM()":{"relativeUrl":"/reference/p5.Part/getBPM","alias":"getBPM"},"p5.Part.getPhrase()":{"relativeUrl":"/reference/p5.Part/getPhrase","alias":"getPhrase"},"p5.Part.loop()":{"relativeUrl":"/reference/p5.Part/loop","alias":"loop"},"p5.Part.noLoop()":{"relativeUrl":"/reference/p5.Part/noLoop","alias":"noLoop"},"p5.Part.onStep()":{"relativeUrl":"/reference/p5.Part/onStep","alias":"onStep"},"p5.Part.pause()":{"relativeUrl":"/reference/p5.Part/pause","alias":"pause"},"p5.Part.removePhrase()":{"relativeUrl":"/reference/p5.Part/removePhrase","alias":"removePhrase"},"p5.Part.replaceSequence()":{"relativeUrl":"/reference/p5.Part/replaceSequence","alias":"replaceSequence"},"p5.Part.setBPM()":{"relativeUrl":"/reference/p5.Part/setBPM","alias":"setBPM"},"p5.Part.start()":{"relativeUrl":"/reference/p5.Part/start","alias":"start"},"p5.Part.stop()":{"relativeUrl":"/reference/p5.Part/stop","alias":"stop"},"isDetected":{"relativeUrl":"/reference/p5.PeakDetect/isDetected"},"p5.PeakDetect.onPeak()":{"relativeUrl":"/reference/p5.PeakDetect/onPeak","alias":"onPeak"},"p5.PeakDetect.update()":{"relativeUrl":"/reference/p5.PeakDetect/update","alias":"update"},"p5.Phrase.sequence":{"relativeUrl":"/reference/p5.Phrase/sequence","alias":"sequence"},"p5.PolySynth.AudioVoice":{"relativeUrl":"/reference/p5.PolySynth/AudioVoice","alias":"AudioVoice"},"p5.PolySynth.connect()":{"relativeUrl":"/reference/p5.PolySynth/connect","alias":"connect"},"p5.PolySynth.disconnect()":{"relativeUrl":"/reference/p5.PolySynth/disconnect","alias":"disconnect"},"p5.PolySynth.dispose()":{"relativeUrl":"/reference/p5.PolySynth/dispose","alias":"dispose"},"p5.PolySynth.noteADSR()":{"relativeUrl":"/reference/p5.PolySynth/noteADSR","alias":"noteADSR"},"p5.PolySynth.noteAttack()":{"relativeUrl":"/reference/p5.PolySynth/noteAttack","alias":"noteAttack"},"p5.PolySynth.noteRelease()":{"relativeUrl":"/reference/p5.PolySynth/noteRelease","alias":"noteRelease"},"p5.PolySynth.notes":{"relativeUrl":"/reference/p5.PolySynth/notes","alias":"notes"},"p5.PolySynth.play()":{"relativeUrl":"/reference/p5.PolySynth/play","alias":"play"},"p5.PolySynth.polyvalue":{"relativeUrl":"/reference/p5.PolySynth/polyvalue","alias":"polyvalue"},"p5.PolySynth.setADSR()":{"relativeUrl":"/reference/p5.PolySynth/setADSR","alias":"setADSR"},"p5.PrintWriter.clear()":{"relativeUrl":"/reference/p5.PrintWriter/clear","alias":"clear"},"p5.PrintWriter.close()":{"relativeUrl":"/reference/p5.PrintWriter/close","alias":"close"},"p5.PrintWriter.print()":{"relativeUrl":"/reference/p5.PrintWriter/print","alias":"print"},"p5.PrintWriter.write()":{"relativeUrl":"/reference/p5.PrintWriter/write","alias":"write"},"p5.Pulse.width()":{"relativeUrl":"/reference/p5.Pulse/width","alias":"width"},"p5.Reverb.amp()":{"relativeUrl":"/reference/p5.Reverb/amp","alias":"amp"},"p5.Reverb.connect()":{"relativeUrl":"/reference/p5.Reverb/connect","alias":"connect"},"p5.Reverb.disconnect()":{"relativeUrl":"/reference/p5.Reverb/disconnect","alias":"disconnect"},"p5.Reverb.process()":{"relativeUrl":"/reference/p5.Reverb/process","alias":"process"},"p5.Reverb.set()":{"relativeUrl":"/reference/p5.Reverb/set","alias":"set"},"p5.Score.loop()":{"relativeUrl":"/reference/p5.Score/loop","alias":"loop"},"p5.Score.noLoop()":{"relativeUrl":"/reference/p5.Score/noLoop","alias":"noLoop"},"p5.Score.pause()":{"relativeUrl":"/reference/p5.Score/pause","alias":"pause"},"p5.Score.setBPM()":{"relativeUrl":"/reference/p5.Score/setBPM","alias":"setBPM"},"p5.Score.start()":{"relativeUrl":"/reference/p5.Score/start","alias":"start"},"p5.Score.stop()":{"relativeUrl":"/reference/p5.Score/stop","alias":"stop"},"p5.Shader.copyToContext()":{"relativeUrl":"/reference/p5.Shader/copyToContext","alias":"copyToContext"},"p5.Shader.setUniform()":{"relativeUrl":"/reference/p5.Shader/setUniform","alias":"setUniform"},"p5.SoundFile.addCue()":{"relativeUrl":"/reference/p5.SoundFile/addCue","alias":"addCue"},"p5.SoundFile.channels()":{"relativeUrl":"/reference/p5.SoundFile/channels","alias":"channels"},"p5.SoundFile.clearCues()":{"relativeUrl":"/reference/p5.SoundFile/clearCues","alias":"clearCues"},"p5.SoundFile.connect()":{"relativeUrl":"/reference/p5.SoundFile/connect","alias":"connect"},"p5.SoundFile.currentTime()":{"relativeUrl":"/reference/p5.SoundFile/currentTime","alias":"currentTime"},"p5.SoundFile.disconnect()":{"relativeUrl":"/reference/p5.SoundFile/disconnect","alias":"disconnect"},"p5.SoundFile.duration()":{"relativeUrl":"/reference/p5.SoundFile/duration","alias":"duration"},"p5.SoundFile.frames()":{"relativeUrl":"/reference/p5.SoundFile/frames","alias":"frames"},"p5.SoundFile.getBlob()":{"relativeUrl":"/reference/p5.SoundFile/getBlob","alias":"getBlob"},"p5.SoundFile.getPan()":{"relativeUrl":"/reference/p5.SoundFile/getPan","alias":"getPan"},"p5.SoundFile.getPeaks()":{"relativeUrl":"/reference/p5.SoundFile/getPeaks","alias":"getPeaks"},"p5.SoundFile.isLoaded()":{"relativeUrl":"/reference/p5.SoundFile/isLoaded","alias":"isLoaded"},"p5.SoundFile.isLooping()":{"relativeUrl":"/reference/p5.SoundFile/isLooping","alias":"isLooping"},"p5.SoundFile.isPaused()":{"relativeUrl":"/reference/p5.SoundFile/isPaused","alias":"isPaused"},"p5.SoundFile.isPlaying()":{"relativeUrl":"/reference/p5.SoundFile/isPlaying","alias":"isPlaying"},"p5.SoundFile.jump()":{"relativeUrl":"/reference/p5.SoundFile/jump","alias":"jump"},"p5.SoundFile.loop()":{"relativeUrl":"/reference/p5.SoundFile/loop","alias":"loop"},"p5.SoundFile.onended()":{"relativeUrl":"/reference/p5.SoundFile/onended","alias":"onended"},"p5.SoundFile.pan()":{"relativeUrl":"/reference/p5.SoundFile/pan","alias":"pan"},"p5.SoundFile.pause()":{"relativeUrl":"/reference/p5.SoundFile/pause","alias":"pause"},"p5.SoundFile.play()":{"relativeUrl":"/reference/p5.SoundFile/play","alias":"play"},"p5.SoundFile.playMode()":{"relativeUrl":"/reference/p5.SoundFile/playMode","alias":"playMode"},"p5.SoundFile.rate()":{"relativeUrl":"/reference/p5.SoundFile/rate","alias":"rate"},"p5.SoundFile.removeCue()":{"relativeUrl":"/reference/p5.SoundFile/removeCue","alias":"removeCue"},"p5.SoundFile.reverseBuffer()":{"relativeUrl":"/reference/p5.SoundFile/reverseBuffer","alias":"reverseBuffer"},"p5.SoundFile.sampleRate()":{"relativeUrl":"/reference/p5.SoundFile/sampleRate","alias":"sampleRate"},"p5.SoundFile.save()":{"relativeUrl":"/reference/p5.SoundFile/save","alias":"save"},"p5.SoundFile.setBuffer()":{"relativeUrl":"/reference/p5.SoundFile/setBuffer","alias":"setBuffer"},"p5.SoundFile.setLoop()":{"relativeUrl":"/reference/p5.SoundFile/setLoop","alias":"setLoop"},"p5.SoundFile.setPath()":{"relativeUrl":"/reference/p5.SoundFile/setPath","alias":"setPath"},"p5.SoundFile.setVolume()":{"relativeUrl":"/reference/p5.SoundFile/setVolume","alias":"setVolume"},"p5.SoundFile.stop()":{"relativeUrl":"/reference/p5.SoundFile/stop","alias":"stop"},"p5.SoundLoop.bpm":{"relativeUrl":"/reference/p5.SoundLoop/bpm","alias":"bpm"},"p5.SoundLoop.interval":{"relativeUrl":"/reference/p5.SoundLoop/interval","alias":"interval"},"p5.SoundLoop.iterations":{"relativeUrl":"/reference/p5.SoundLoop/iterations","alias":"iterations"},"p5.SoundLoop.maxIterations":{"relativeUrl":"/reference/p5.SoundLoop/maxIterations","alias":"maxIterations"},"p5.SoundLoop.musicalTimeMode":{"relativeUrl":"/reference/p5.SoundLoop/musicalTimeMode","alias":"musicalTimeMode"},"p5.SoundLoop.pause()":{"relativeUrl":"/reference/p5.SoundLoop/pause","alias":"pause"},"p5.SoundLoop.start()":{"relativeUrl":"/reference/p5.SoundLoop/start","alias":"start"},"p5.SoundLoop.stop()":{"relativeUrl":"/reference/p5.SoundLoop/stop","alias":"stop"},"p5.SoundLoop.syncedStart()":{"relativeUrl":"/reference/p5.SoundLoop/syncedStart","alias":"syncedStart"},"p5.SoundLoop.timeSignature":{"relativeUrl":"/reference/p5.SoundLoop/timeSignature","alias":"timeSignature"},"p5.SoundRecorder.record()":{"relativeUrl":"/reference/p5.SoundRecorder/record","alias":"record"},"p5.SoundRecorder.setInput()":{"relativeUrl":"/reference/p5.SoundRecorder/setInput","alias":"setInput"},"p5.SoundRecorder.stop()":{"relativeUrl":"/reference/p5.SoundRecorder/stop","alias":"stop"},"p5.Table.addColumn()":{"relativeUrl":"/reference/p5.Table/addColumn","alias":"addColumn"},"p5.Table.addRow()":{"relativeUrl":"/reference/p5.Table/addRow","alias":"addRow"},"p5.Table.clearRows()":{"relativeUrl":"/reference/p5.Table/clearRows","alias":"clearRows"},"p5.Table.columns":{"relativeUrl":"/reference/p5.Table/columns","alias":"columns"},"p5.Table.findRow()":{"relativeUrl":"/reference/p5.Table/findRow","alias":"findRow"},"p5.Table.findRows()":{"relativeUrl":"/reference/p5.Table/findRows","alias":"findRows"},"p5.Table.get()":{"relativeUrl":"/reference/p5.Table/get","alias":"get"},"p5.Table.getArray()":{"relativeUrl":"/reference/p5.Table/getArray","alias":"getArray"},"p5.Table.getColumn()":{"relativeUrl":"/reference/p5.Table/getColumn","alias":"getColumn"},"p5.Table.getColumnCount()":{"relativeUrl":"/reference/p5.Table/getColumnCount","alias":"getColumnCount"},"p5.Table.getNum()":{"relativeUrl":"/reference/p5.Table/getNum","alias":"getNum"},"p5.Table.getObject()":{"relativeUrl":"/reference/p5.Table/getObject","alias":"getObject"},"p5.Table.getRow()":{"relativeUrl":"/reference/p5.Table/getRow","alias":"getRow"},"p5.Table.getRowCount()":{"relativeUrl":"/reference/p5.Table/getRowCount","alias":"getRowCount"},"p5.Table.getRows()":{"relativeUrl":"/reference/p5.Table/getRows","alias":"getRows"},"p5.Table.getString()":{"relativeUrl":"/reference/p5.Table/getString","alias":"getString"},"p5.Table.matchRow()":{"relativeUrl":"/reference/p5.Table/matchRow","alias":"matchRow"},"p5.Table.matchRows()":{"relativeUrl":"/reference/p5.Table/matchRows","alias":"matchRows"},"p5.Table.removeColumn()":{"relativeUrl":"/reference/p5.Table/removeColumn","alias":"removeColumn"},"p5.Table.removeRow()":{"relativeUrl":"/reference/p5.Table/removeRow","alias":"removeRow"},"p5.Table.removeTokens()":{"relativeUrl":"/reference/p5.Table/removeTokens","alias":"removeTokens"},"p5.Table.rows":{"relativeUrl":"/reference/p5.Table/rows","alias":"rows"},"p5.Table.set()":{"relativeUrl":"/reference/p5.Table/set","alias":"set"},"p5.Table.setNum()":{"relativeUrl":"/reference/p5.Table/setNum","alias":"setNum"},"p5.Table.setString()":{"relativeUrl":"/reference/p5.Table/setString","alias":"setString"},"p5.Table.trim()":{"relativeUrl":"/reference/p5.Table/trim","alias":"trim"},"p5.TableRow.get()":{"relativeUrl":"/reference/p5.TableRow/get","alias":"get"},"p5.TableRow.getNum()":{"relativeUrl":"/reference/p5.TableRow/getNum","alias":"getNum"},"p5.TableRow.getString()":{"relativeUrl":"/reference/p5.TableRow/getString","alias":"getString"},"p5.TableRow.set()":{"relativeUrl":"/reference/p5.TableRow/set","alias":"set"},"p5.TableRow.setNum()":{"relativeUrl":"/reference/p5.TableRow/setNum","alias":"setNum"},"p5.TableRow.setString()":{"relativeUrl":"/reference/p5.TableRow/setString","alias":"setString"},"p5.TypedDict.clear()":{"relativeUrl":"/reference/p5.TypedDict/clear","alias":"clear"},"p5.TypedDict.create()":{"relativeUrl":"/reference/p5.TypedDict/create","alias":"create"},"p5.TypedDict.get()":{"relativeUrl":"/reference/p5.TypedDict/get","alias":"get"},"p5.TypedDict.hasKey()":{"relativeUrl":"/reference/p5.TypedDict/hasKey","alias":"hasKey"},"p5.TypedDict.print()":{"relativeUrl":"/reference/p5.TypedDict/print","alias":"print"},"p5.TypedDict.remove()":{"relativeUrl":"/reference/p5.TypedDict/remove","alias":"remove"},"p5.TypedDict.saveJSON()":{"relativeUrl":"/reference/p5.TypedDict/saveJSON","alias":"saveJSON"},"p5.TypedDict.saveTable()":{"relativeUrl":"/reference/p5.TypedDict/saveTable","alias":"saveTable"},"p5.TypedDict.set()":{"relativeUrl":"/reference/p5.TypedDict/set","alias":"set"},"p5.TypedDict.size()":{"relativeUrl":"/reference/p5.TypedDict/size","alias":"size"},"p5.Vector.add()":{"relativeUrl":"/reference/p5.Vector/add","alias":"add"},"p5.Vector.angleBetween()":{"relativeUrl":"/reference/p5.Vector/angleBetween","alias":"angleBetween"},"p5.Vector.array()":{"relativeUrl":"/reference/p5.Vector/array","alias":"array"},"p5.Vector.clampToZero()":{"relativeUrl":"/reference/p5.Vector/clampToZero","alias":"clampToZero"},"p5.Vector.copy()":{"relativeUrl":"/reference/p5.Vector/copy","alias":"copy"},"p5.Vector.cross()":{"relativeUrl":"/reference/p5.Vector/cross","alias":"cross"},"p5.Vector.dist()":{"relativeUrl":"/reference/p5.Vector/dist","alias":"dist"},"p5.Vector.div()":{"relativeUrl":"/reference/p5.Vector/div","alias":"div"},"p5.Vector.dot()":{"relativeUrl":"/reference/p5.Vector/dot","alias":"dot"},"p5.Vector.equals()":{"relativeUrl":"/reference/p5.Vector/equals","alias":"equals"},"p5.Vector.fromAngle()":{"relativeUrl":"/reference/p5.Vector/fromAngle","alias":"fromAngle"},"p5.Vector.fromAngles()":{"relativeUrl":"/reference/p5.Vector/fromAngles","alias":"fromAngles"},"p5.Vector.heading()":{"relativeUrl":"/reference/p5.Vector/heading","alias":"heading"},"p5.Vector.lerp()":{"relativeUrl":"/reference/p5.Vector/lerp","alias":"lerp"},"p5.Vector.limit()":{"relativeUrl":"/reference/p5.Vector/limit","alias":"limit"},"p5.Vector.mag()":{"relativeUrl":"/reference/p5.Vector/mag","alias":"mag"},"p5.Vector.magSq()":{"relativeUrl":"/reference/p5.Vector/magSq","alias":"magSq"},"p5.Vector.mult()":{"relativeUrl":"/reference/p5.Vector/mult","alias":"mult"},"p5.Vector.normalize()":{"relativeUrl":"/reference/p5.Vector/normalize","alias":"normalize"},"p5.Vector.random2D()":{"relativeUrl":"/reference/p5.Vector/random2D","alias":"random2D"},"p5.Vector.random3D()":{"relativeUrl":"/reference/p5.Vector/random3D","alias":"random3D"},"p5.Vector.reflect()":{"relativeUrl":"/reference/p5.Vector/reflect","alias":"reflect"},"p5.Vector.rem()":{"relativeUrl":"/reference/p5.Vector/rem","alias":"rem"},"p5.Vector.rotate()":{"relativeUrl":"/reference/p5.Vector/rotate","alias":"rotate"},"p5.Vector.set()":{"relativeUrl":"/reference/p5.Vector/set","alias":"set"},"p5.Vector.setHeading()":{"relativeUrl":"/reference/p5.Vector/setHeading","alias":"setHeading"},"p5.Vector.setMag()":{"relativeUrl":"/reference/p5.Vector/setMag","alias":"setMag"},"p5.Vector.slerp()":{"relativeUrl":"/reference/p5.Vector/slerp","alias":"slerp"},"p5.Vector.sub()":{"relativeUrl":"/reference/p5.Vector/sub","alias":"sub"},"p5.Vector.toString()":{"relativeUrl":"/reference/p5.Vector/toString","alias":"toString"},"p5.Vector.x":{"relativeUrl":"/reference/p5.Vector/x","alias":"x"},"p5.Vector.y":{"relativeUrl":"/reference/p5.Vector/y","alias":"y"},"p5.Vector.z":{"relativeUrl":"/reference/p5.Vector/z","alias":"z"},"p5.XML.addChild()":{"relativeUrl":"/reference/p5.XML/addChild","alias":"addChild"},"p5.XML.getAttributeCount()":{"relativeUrl":"/reference/p5.XML/getAttributeCount","alias":"getAttributeCount"},"p5.XML.getChild()":{"relativeUrl":"/reference/p5.XML/getChild","alias":"getChild"},"p5.XML.getChildren()":{"relativeUrl":"/reference/p5.XML/getChildren","alias":"getChildren"},"p5.XML.getContent()":{"relativeUrl":"/reference/p5.XML/getContent","alias":"getContent"},"p5.XML.getName()":{"relativeUrl":"/reference/p5.XML/getName","alias":"getName"},"p5.XML.getNum()":{"relativeUrl":"/reference/p5.XML/getNum","alias":"getNum"},"p5.XML.getParent()":{"relativeUrl":"/reference/p5.XML/getParent","alias":"getParent"},"p5.XML.getString()":{"relativeUrl":"/reference/p5.XML/getString","alias":"getString"},"p5.XML.hasAttribute()":{"relativeUrl":"/reference/p5.XML/hasAttribute","alias":"hasAttribute"},"p5.XML.hasChildren()":{"relativeUrl":"/reference/p5.XML/hasChildren","alias":"hasChildren"},"p5.XML.listAttributes()":{"relativeUrl":"/reference/p5.XML/listChildren","alias":"listAttributes"},"p5.XML.removeChild()":{"relativeUrl":"/reference/p5.XML/removeChild","alias":"removeChild"},"p5.XML.serialize()":{"relativeUrl":"/reference/p5.XML/serialize","alias":"serialize"},"p5.XML.setAttribute()":{"relativeUrl":"/reference/p5.XML/setAttribute","alias":"setAttribute"},"p5.XML.setContent()":{"relativeUrl":"/reference/p5.XML/setContent","alias":"setContent"},"p5.XML.setName()":{"relativeUrl":"/reference/p5.XML/setName","alias":"setName"},"p5.Amplitude":{"relativeUrl":"/reference/p5.sound/p5.Amplitude"},"p5.AudioIn":{"relativeUrl":"/reference/p5.sound/p5.AudioIn"},"p5.AudioVoice":{"relativeUrl":"/reference/p5.sound/p5.AudioVoice"},"p5.BandPass":{"relativeUrl":"/reference/p5.sound/p5.BandPass"},"p5.Compressor":{"relativeUrl":"/reference/p5.sound/p5.Compressor"},"p5.Convolver":{"relativeUrl":"/reference/p5.sound/p5.Convolver"},"p5.Delay":{"relativeUrl":"/reference/p5.sound/p5.Delay"},"p5.Distortion":{"relativeUrl":"/reference/p5.sound/p5.Distortion"},"p5.EQ":{"relativeUrl":"/reference/p5.sound/p5.EQ"},"p5.Effect":{"relativeUrl":"/reference/p5.sound/p5.Effect"},"p5.Envelope":{"relativeUrl":"/reference/p5.sound/p5.Envelope"},"p5.FFT":{"relativeUrl":"/reference/p5.sound/p5.FFT"},"p5.Filter":{"relativeUrl":"/reference/p5.sound/p5.Filter"},"p5.Gain":{"relativeUrl":"/reference/p5.sound/p5.Gain"},"p5.HighPass":{"relativeUrl":"/reference/p5.sound/p5.HighPass"},"p5.LowPass":{"relativeUrl":"/reference/p5.sound/p5.LowPass"},"p5.MonoSynth":{"relativeUrl":"/reference/p5.sound/p5.MonoSynth"},"p5.Noise":{"relativeUrl":"/reference/p5.sound/p5.Noise"},"p5.OnsetDetect":{"relativeUrl":"/reference/p5.sound/p5.OnsetDetect"},"p5.Oscillator":{"relativeUrl":"/reference/p5.sound/p5.Oscillator"},"p5.Panner3D":{"relativeUrl":"/reference/p5.sound/p5.Panner3D"},"p5.Part":{"relativeUrl":"/reference/p5.sound/p5.Part"},"p5.PeakDetect":{"relativeUrl":"/reference/p5.sound/p5.PeakDetect"},"p5.Phrase":{"relativeUrl":"/reference/p5.sound/p5.Phrase"},"p5.PolySynth":{"relativeUrl":"/reference/p5.sound/p5.PolySynth"},"p5.Pulse":{"relativeUrl":"/reference/p5.sound/p5.Pulse"},"p5.Reverb":{"relativeUrl":"/reference/p5.sound/p5.Reverb"},"p5.SawOsc":{"relativeUrl":"/reference/p5.sound/p5.SawOsc"},"p5.Score":{"relativeUrl":"/reference/p5.sound/p5.Score"},"p5.SinOsc":{"relativeUrl":"/reference/p5.sound/p5.SinOsc"},"p5.SoundFile":{"relativeUrl":"/reference/p5.sound/p5.SoundFile"},"p5.SoundLoop":{"relativeUrl":"/reference/p5.sound/p5.SoundLoop"},"p5.SoundRecorder":{"relativeUrl":"/reference/p5.sound/p5.SoundRecorder"},"p5.SqrOsc":{"relativeUrl":"/reference/p5.sound/p5.SqrOsc"},"p5.TriOsc":{"relativeUrl":"/reference/p5.sound/p5.TriOsc"}},"tutorials":{"Animating with Media Objects":{"relativeUrl":"/tutorials/animating-with-media-objects","description":"Learn how to load images and GIFs to your sketches by creating an interactive garden!"},"Color Gradients":{"relativeUrl":"/tutorials/color-gradients","description":"Use radial gradients, linear gradients, and blend modes to create lens flare stickers & colorful filters on top of a webcam selfie."},"Conditionals and Interactivity":{"relativeUrl":"/tutorials/conditionals-and-interactivity","description":"A tutorial on how to use conditional statements and make interactive sketches."},"Coordinates and Transformations":{"relativeUrl":"/tutorials/coordinates-and-transformations","description":"An overview of the different ways you can position objects in WebGL mode."},"Creating and Styling HTML":{"relativeUrl":"/tutorials/creating-styling-html","description":"Dive into the art of creative coding and learn to build and beautify HTML with p5.js."},"Creating Custom Geometry in WebGL":{"relativeUrl":"/tutorials/custom-geometry","description":"A guide to the different ways you can create your own 3D shapes."},"Custom Shapes and Smooth Curves":{"relativeUrl":"/tutorials/custom-shapes-and-smooth-curves","description":"Use vertex(), bezierVertex(), beginShape() and endShape() to create angular and curved sparkle stickers to place on top of your webcam selfie."},"Data Structure Garden":{"relativeUrl":"/tutorials/data-structure-garden","description":"A tutorial on how to use JavaScript objects and arrays."},"Field Guide to Debugging":{"relativeUrl":"/tutorials/field-guide-to-debugging","description":"Learn some healthy habits and best practices for  locating bugs in your program, and finding ways to overcome them."},"Get Started":{"relativeUrl":"/tutorials/get-started","description":"A tutorial that introduces basic p5.js functions and guides you through the steps to create an interactive landscape."},"Getting Started with Node.js":{"relativeUrl":"/tutorials/getting-started-with-nodejs","description":"Learn about HTTP requests and how to use Node.js in your p5.js projects to create dynamic projects that save and retrieve files."},"How to Optimize Your Sketches":{"relativeUrl":"/tutorials/how-to-optimize-your-sketches","description":"An advanced tutorial on how to optimize code in your sketches to run more efficiently."},"Introduction to Shaders":{"relativeUrl":"/tutorials/intro-to-shaders","description":"An introduction to the different ways you can create interesting visual effects with your computer's GPU."},"Layered Rendering with Framebuffers":{"relativeUrl":"/tutorials/layered-rendering-with-framebuffers","description":"Framebuffers are the fastest way to create a scene out of multiple layers in WebGL. Explore how to use them, and the unique 3D information they provide."},"Lights, Camera, Materials":{"relativeUrl":"/tutorials/lights-camera-materials","description":"Learn how to light and frame 3D scenes, and how to style 3D objects."},"Loading and Selecting Fonts":{"relativeUrl":"/tutorials/loading-and-selecting-fonts","description":"Explore typography in creative coding: A Quick guide to choosing and selecting fonts."},"Optimizing WebGL Sketches":{"relativeUrl":"/tutorials/optimizing-webgl-sketches","description":"Tips to help make your sketches run as smoothly as possible on as many devices as possible."},"Organizing Code with Functions":{"relativeUrl":"/tutorials/organizing-code-with-functions","description":"A tutorial on how to create and use functions to help you organize your code."},"How to Use the p5.js Web Editor with a Screen Reader":{"relativeUrl":"/tutorials/p5js-with-screen-reader","description":"A tutorial for setting up the p5.js Web Editor for screen readers."},"Repeating with Loops":{"relativeUrl":"/tutorials/repeating-with-loops","description":"Create a crawling caterpillar race using loops and arrays!"},"Responding to Inputs":{"relativeUrl":"/tutorials/responding-to-inputs","description":"Code nostalgia: Unleash your creativity and bring a vintage snake game to life with p5.js!"},"環境セットアップ":{"relativeUrl":"/tutorials/setting-up-your-environment","description":"p5.js の Web エディターや VS Code をセットアップして、p5.js プロジェクトを書いたり保存したりするための簡単なチュートリアルです。"},"Simple Melody App":{"relativeUrl":"/tutorials/simple-melody-app","description":"Use p5.Oscillator objects to generate musical notes in an app where users can write and replay melodies they create by interacting with the canvas!"},"Abracadabra: Speak With Your Hands in p5.js and ml5.js":{"relativeUrl":"/tutorials/speak-with-your-hands","description":"Control sketches with your hands using ml5.js"},"Variables and Change":{"relativeUrl":"/tutorials/variables-and-change","description":"Learn about variables and how they can be used to create animated sketches!"},"Writing Accessible Canvas Descriptions":{"relativeUrl":"/tutorials/writing-accessible-canvas-descriptions","description":"A tutorial for how to label p5.js code for screen readers."}}}