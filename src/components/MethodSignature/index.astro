---
interface Props {
  name: string;
  params?: ReferenceParam[];
  overloads?: ReferenceOverloads;
}

import {
  type ReferenceOverloads,
  type ReferenceParam,
} from "@/types/parsers.interface.ts";
import CodeContainer from "@components/CodeContainer/index.astro";
import { CopyCodeButton } from "../CopyCodeButton";
const { params, name, overloads } = Astro.props;

const formatParam = (param: ReferenceParam) =>
  param.optional ? `[${param.name}]` : `${param.name}`;

let formattedParams = [];

if (params) {
  formattedParams.push(params.map(formatParam).join(", "));
} else if (overloads) {
  for (const overload of overloads) {
    formattedParams.push(overload.params.map(formatParam).join(", "));
  }
}

const signature = `${name}(${formattedParams})`;
---

{
  formattedParams.map((params) => (
    <CodeContainer>
      <span class="text-black">{`${name}(${params})`}</span>
      <div class="absolute top-xs right-xs">
        <CopyCodeButton client:load textToCopy={signature} />
      </div>
    </CodeContainer>
  ))
}
